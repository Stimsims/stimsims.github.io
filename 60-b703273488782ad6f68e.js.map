{"version":3,"sources":["webpack:///./src/games/Pythagoras/keys.js","webpack:///./src/games/Pythagoras/sim.js","webpack:///./src/games/Pythagoras/index.js"],"names":["DefaultKeys","require","keys","eqPyth","figureNames","module","exports","sim","simInit","settings","create","generate","format","math","GameInstance","result","state","methods","console","log","changes","game","oxygen","time","oxygenMax","oxygenGradient","val","uT","uVol","PYTHAG_EQ","o","simulation","n","k","trigger","read","vp","node","label","aclocStory","view","write","makeChange","getPar","dialogue","branches","intro","move","addons","push","mapped","get","getRatio","a","b","ratios","transforms","length","equation","sum","substitute","onExit","id","actions","temp","success","type","path","value","location","collection","DELETED","flag","out","Scene","text","choice","options","className","latex","end","eq","scene","getEqSide","need","includes","replace","anseq","img","src","getImg","meta","size","replaceAns","randomize","onInput","subs","ansVars","getVariables","map","e","r","subMathEq","nMath","MCQ","acGameMCQ","i","l1","l2","r1","r2","alts","toLatex","selected","Expression","operation","fullWidth","simplified","operationText","lhsEq","lhsLat","rhs","variables","ans","simplify","m1","mixAndMatch","operand","m","execute","opt","correct","parts","mathMap","rat","c","d","correctEq","counter","getRandomIndex","ob","operate","ratio","res","c1","c2","operands","EQLR","oi","color","leave","href","items","output"],"mappings":"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","file":"60-b703273488782ad6f68e.js","sourcesContent":["\r\n\r\nconst DefaultKeys = require('./../keys');\r\n\r\nconst keys =  {...DefaultKeys, \r\n    eqPyth: 'eqPyth',\r\n    figureNames: ['AB', 'BC', 'AC', 'BD', 'AD', 'DC']\r\n};\r\n\r\nmodule.exports = keys;\r\n\r\n// [vp.keys.c]: vp.keys.acMath, [vp.keys.act]","\r\nvar keys = require('./keys');\r\n\r\nvar sim =  {\r\n    //(settings, create, generate, format, math)\r\n    simInit: (settings, create, generate, format, math) => {\r\n       // console.log(`Game simInit methods`, methods);\r\n        let state = new create.GameInstance('intro');\r\n\r\n        return state;\r\n    },\r\n    result: (state, methods) => {\r\n        console.log(`pythagoras sim result state`, state);\r\n        let changes = {};\r\n        changes['game.flags.gameOverAnswersMarked'] = true;\r\n        changes['game.gameover'] = true;\r\n        return {game: changes, sim: {}};\r\n    },\r\n    ['data']:{\r\n        oxygen: function(keys, time, oxygenMax, oxygenGradient){\r\n            let val = oxygenMax +oxygenGradient*time;\r\n            return {[keys.uT]: time, [keys.uVol]: val};\r\n        },\r\n    },\r\n}\r\nmodule.exports = sim;\r\n\r\n","import React from 'react';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Dialogue from 'game/Views/Dialogue/Dialogue.js';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure.js';\r\nimport keys from './keys';\r\nimport simulation from './sim.js';\r\nimport {markMCQs, getEqSide, mixAndMatch, getRandomIndex, getImg, getPar} from 'utilities/Format.js';\r\nimport {getVariables, subMathEq, simplify, execute, toLatex, operate, EQLR} from 'utilities/Game/MathFun.js';\r\nimport {Expression, MathUpdate} from 'utilities/Game/MathExpression.js';\r\nimport {MCQ, GameInstance} from 'utilities/Create.js';\r\nimport {get, DELETED} from 'utilities/Merge';\r\n\r\nconst PYTHAG_EQ = 'a^2 + b^2=c^2';\r\nvar o = {\r\n    //n keys must match k values\r\n    sim: simulation,\r\n    n: {},\r\n    k: keys,\r\n    trigger: (state, methods) => {\r\n        //occurs after input integration into state\r\n        //occurs before sim call, can be overridden by sim\r\n        //a series of checks that determine if a scene will occur\r\n        let score = 0; //if a check passes, and its score is higher than whatever the current scene is, it replaces it\r\n        let changes = {}; //scale 1 to 5 in priority, is never equal check, as order determines priority of equals\r\n        return changes;\r\n    },\r\n    ['trees']: { \r\n        ['intro']: function(read, settings, vp){\r\n            return {node: 'intro', label: vp.keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                        return [\r\n                            <Dialogue {...getPar(settings, vp, makeChange, `intro-dialogue`)}\r\n                                dialogue={o.branches.intro} \r\n                                move='getRatio'\r\n                                write={write}\r\n                                read={read}\r\n                                addons={o.branches.intro.push(vp, settings)} \r\n                            />\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        // ['intro']: function(read, settings, vp){\r\n        //     return {node: 'intro', label: vp.keys.aclocStory,\r\n        //         view: (write, makeChange) => {\r\n        //             return Scene({text: [{id: 'success2', text: 'successs', color: 'pink'}],\r\n        //                 choice: {options: [<Text id=\"success1\" text={\"yes\"} \r\n        //                     out={[\r\n        //                         {type: 'set', path: 'move', value: {location: 'endgame'}},\r\n        //                         {type: 'set', path: 'meta.gameover', value: true}\r\n        //                     ]} />]\r\n        //                 },\r\n        //             }, getPar(settings, vp, makeChange, 'intro'))\r\n        //         }\r\n        //     }\r\n        // },\r\n        ['getRatio']: function(read, settings, vp){\r\n            return {node: 'getRatio', label: vp.keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                        log(`pythagoras tree node getRatio read`, read);\r\n                        log(`pythagoras tree node getRatio write`, write);\r\n                        let mapped = get('mathMap.a', read, write, null);\r\n                        log(`pythagoras tree node getRatio mapped a`, mapped);\r\n                        return [\r\n                            <Dialogue {...getPar(settings, vp, makeChange, `getRatio-dialogue-${mapped?'b':'a'}`)}\r\n                                dialogue={o.branches.getRatio} //out={{type: 'move', move: 'preOxygen'}} //{type:'set', id: 'scene', set: (inputs.scene || 0) + 1}\r\n                                move={mapped?\"sum\":'getRatio'}\r\n                                write={write}\r\n                                read={read}\r\n                                addons={o.branches.getRatio.push(mapped?'b':'a', \r\n                                    mapped?['BC', 'AC', 'DC', 'BC']:['AB', 'AC', 'AD', 'AB'], \r\n                                    vp.keys.figureNames, get('math', read, write, null), mapped, vp, settings)} \r\n                            />\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        ['sum']: function(read, settings, vp){\r\n            return {node: 'sum', label: vp.keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    log(`pythagoras tree node sum read`, read);\r\n                    log(`pythagoras tree node sum write`, write);\r\n                        let a = get(`math.${get(`mathMap.a`, read, write, null)}`, read, write, null);\r\n                        let b = get(`math.${get(`mathMap.b`, read, write, null)}`, read, write, null);\r\n                        // let a = game.math[game.mathMap.a];\r\n                        // let b = game.math[game.mathMap.b];\r\n                        log(`pythagoras tree node sum math a`, a);\r\n                        let ratios = [\r\n                            a.transforms[a.transforms.length - 1].equation,\r\n                            b.transforms[b.transforms.length - 1].equation,\r\n                        ]\r\n                        return [\r\n                            <Dialogue {...getPar(settings, vp, makeChange, `sum-dialogue`)}\r\n                                dialogue={o.branches.sum} \r\n                                move='substitute'\r\n                                write={write}\r\n                                read={read}\r\n                                addons={o.branches.sum.push(ratios, vp, settings)} \r\n                            />\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        ['substitute']: function(read, settings, vp){\r\n            return {node: 'substitute', label: vp.keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    //inputs.math[inputs.mathMap.sum]\r\n                        let sum = get(`math.${get(`mathMap.sum`, read, write, null)}`, read, write, null);\r\n                        return [\r\n                            <Dialogue {...getPar(settings, vp, makeChange, `substitute-dialogue`)}\r\n                                dialogue={o.branches.substitute} \r\n                                move=\"result\"\r\n                                onExit={(id, write)=>{\r\n                                    let actions = [];\r\n                                    log(`tree node dialogue substitute onExit id ${id} write`, write);\r\n                                    if(write.temp.success){\r\n                                        actions.push({type: 'set', path: 'move', value: {location: 'result'}});\r\n                                        actions.push({type: 'merge', path: 'math', value: write.math});\r\n                                    }else{\r\n                                        \r\n                                        actions.push({type: 'set', path: 'move', value: {location: 'getRatio'}});\r\n                                        actions.push({type: 'add', collection: 'mathMap', id: 'a', value: DELETED});\r\n                                        actions.push({type: 'add', collection: 'mathMap', id: 'b', value: DELETED});\r\n                                        actions.push({type: 'add', collection: 'mathMap', id: 'sum', value: DELETED});\r\n                                    }\r\n                                   makeChange(id, actions);\r\n                                }}\r\n                                addons={o.branches.substitute.push(sum, get('math', read, write, null), vp, settings)} \r\n                            />\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        ['result']: function(read, settings, vp){\r\n            return {node: 'result', label: vp.keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                        log(`pythagoras tree node result read`, read);\r\n                        log(`pythagoras tree node result write`, write);\r\n                        let sum = get(`math.${get(`mathMap.sum`, read, write, null)}`, read, write, null);\r\n                        let flag = get('flags.gameOverAnswersMarked', read, write, false);\r\n                        log(`pythagoras tree node result flag ${flag}`);\r\n                        if(flag){\r\n                            return [\r\n                                <Dialogue {...getPar(settings, vp, makeChange, `result-dialogue`)}\r\n                                    dialogue={o.branches.result} \r\n                                   // move=\"endgame\"\r\n                                   out={[\r\n                                        {type: 'set', path:'move', value: {location: 'intro'}},\r\n                                        {type: 'set', path: 'meta.gameover', value: true}\r\n                                    ]} \r\n                                    addons={o.branches.result.push(sum, vp, settings)} \r\n                                />\r\n                            ]\r\n                        }else{\r\n                            return Scene({text: [`waiting for results from server`]},\r\n                            getPar(settings, vp, makeChange, `result-dialogue-waiting`))\r\n                        }\r\n                }\r\n            }\r\n        },\r\n        ['endgame']: function(read, settings, vp){\r\n            return {node: 'endgame', label: vp.keys.aclocStory,\r\n               // out: () => {return {gameover:true}},\r\n                view: (write, makeChange) => {\r\n                    return Scene({\r\n                        text: [`Waiting for results`],\r\n                        choice: {options: [<Text text={'next'} \r\n                                    out={[\r\n                                        {type: 'set', path:'move', value: {location: 'intro'}},\r\n                                        {type: 'set', path: 'meta.gameover', value: true}\r\n                                    ]} \r\n                        />]}\r\n                    },getPar(settings, vp, makeChange, \"endgame\"))\r\n                }\r\n            }\r\n        },\r\n    },\r\n    ['branches']: {\r\n        ['result']: {\r\n            push: (sum) => {\r\n                //i need the current math equation\r\n                //amd the triangle part names\r\n                let eq = sum.transforms[sum.transforms.length - 1].equation;\r\n                return {sum: eq};\r\n            },\r\n            dialogue: (id, node, read, write, makeChange, settings, vp) => {\r\n                switch(node){\r\n                    default:\r\n                        return Scene({text: [{text: `And we have our answer`, className: \"text-center\"},\r\n                        {latex: write.temp.sum.latex, className: 'inline'}],\r\n                        choice: {options:  [<Text text={\"end game\"} out={[\r\n                            {end:true}\r\n                        ]} />]}}, \r\n                        getPar(settings, vp, makeChange, \"sum1\"))\r\n                }\r\n            }\r\n        },\r\n        ['substitute']: {\r\n            push: (sum, math)=> {\r\n                //i need the current math equation\r\n                //amd the triangle part names\r\n                let eq = sum.transforms[sum.transforms.length - 1].equation;\r\n                let lhs = getEqSide(eq.eq, 0);\r\n                //if lhs !== a^2 + b^2, trigger scene 1\r\n                //if rhs does not contain c, trigger scene 2\r\n                //if does not contain f + g, trigger scene 3\r\n                //if is not equal to expected, trigger scene 4\r\n                let expected = 'AB^2+BC^2=(AD+DC)*AC';\r\n                let scene = 1;\r\n                let need = '';\r\n                if(!eq.eq.includes('AB^2')){ //write a scene about getting this from the fractions\r\n                    scene = 2;\r\n                    need = 'AB^2';\r\n                }else if(!eq.eq.includes('BC^2')){\r\n                    scene = 2;\r\n                    need = 'BC^2';\r\n                }else if(eq.eq !== expected){\r\n                    scene = 0;\r\n                }\r\n                let replace = ['AD+DC', 'AD', 'DC',  'AC'];\r\n                let options = ['AC', 'AB', 'BC', 'BD'];\r\n                return {math, equation: sum, eq, options, scene, replace, need};\r\n            },\r\n            // onExit: (inputs) => {\r\n            //     return {success: inputs.success}\r\n            // },\r\n            dialogue: (id, node, read, write, makeChange, settings, vp) => {\r\n                log(`tree node dialogue substitute node ${node}`, write);\r\n                switch(node){\r\n                    case 'check': \r\n                        if(write.temp.success){\r\n                            return Scene({text: [{text: `That looks right, we need to derive`, className: \"text-center inline\"},\r\n                            {latex: write.temp.anseq.latex, className: 'text-center inline'}],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            ],\r\n                            choice: {options: [<Text text={'alright'} out={[{end:true}, \r\n                                {type: 'set', path: 'temp.success', value: true}]}/>]}},\r\n                            getPar(settings, vp, makeChange, \"subcheck\"))\r\n                        }else{\r\n                            return Scene({text: [{text: `That doesn't look right, lets try again`, className: \"text-center\"},\r\n                                {latex: write.temp.eq.latex, className: 'inline'}],\r\n                                img: [\r\n                                    {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                                    {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                                ],\r\n                                choice: {options: [<Text text={'alright'} out={[{end:true}, \r\n                                        {type: 'set', path: 'temp.success', value: false}]}/>]}},\r\n                                getPar(settings, vp, makeChange, \"subcheck\"));\r\n                        }\r\n                        \r\n                    case 'replaceWith': \r\n                        return Scene({text: [{text: `And in your equation`}, {latex: write.temp.eq.latex}, \r\n                            {text: `, what should ${write.temp.replaceAns} be replaced with?`}],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            ],\r\n                            choice: {randomize: true, onInput: (id, val)=>{\r\n                              \r\n                                //get number of variables, divide by num\r\n                                let subs = {};\r\n                                let ansVars = getVariables(write.temp.replaceAns);\r\n                                ansVars.map(e => {\r\n                                    subs[e] = `${val.text}/${ansVars.length}`;\r\n                                })\r\n                                let r = subMathEq(write.temp.eq, subs);\r\n                                let nMath = {...write.temp.equation};\r\n                                nMath.transforms = [...nMath.transforms, \r\n                                    {equation: r, text: `substituted ${write.temp.replaceAns} for ${val.text}`}];\r\n                               // let success = r.eq === 'AB^2+BC^2=(AD+DC)*AC';\r\n                                let success = r.eq === 'AB^2+BC^2=AC^2';\r\n                                \r\n                                log(`tree node dialogue substitute success ${success}`, nMath);\r\n                                makeChange('replaceWith', [\r\n                                    {type:'set', path: 'temp.node', value: 'check'},\r\n                                    {type: 'set', path:'temp.anseq', value: r},\r\n                                    {type: 'set', path:'temp.success', value: success},\r\n                                    {type: 'add', collection: 'math', id: nMath.id, value: nMath},\r\n                                    MCQ(vp.keys.acGameMCQ, '11-substitute-replaceWith', val.text, val.i === 0)\r\n                                ])\r\n                            }, options: write.temp.options.map((e, i) => {\r\n                                return <Text text={e} i={i} />\r\n                            })}},\r\n                        getPar(settings, vp, makeChange, \"subreplaceWith\"));\r\n                    default:\r\n                        return Scene({text: [{text: `\"hmmm...`}, {latex: write.temp.eq.latex}, {text: `you say? That right hand side doesn't look right. It needs to be`},\r\n                                {latex: `AC^2`}, `. We can substitute equals for each other. Which part might be substituted for its equal, as seen in the triangle, \r\n                                that might move us closer to the theoreom`, {latex: PYTHAG_EQ}],\r\n                                img: [\r\n                                    {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                                    {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                                ],\r\n                                choice: {randomize: true, options: write.temp.replace.map((e, i) => {\r\n                                    return <Text text={e} out={[{type: 'set', path: 'temp.node', value: 'replaceWith'},\r\n                                        {type: 'set', path: 'temp.replaceAns', value: e},\r\n                                        MCQ(vp.keys.acGameMCQ, '10-substitute-replace', e, i === 0)]} />\r\n                                })}},\r\n                                getPar(settings, vp, makeChange, \"sub1\"));\r\n                        \r\n                }\r\n            }\r\n        },\r\n        ['sum']: {\r\n            push: (ratios) => {\r\n                log(`dialogue sum push ratios`, ratios);\r\n                //generate the alternatives for the ratios l1 + l2 - r1 + r2, - , l1 + r2 = etc.\r\n                let l1 = getEqSide(ratios[0].eq, 0);\r\n                let l2 = getEqSide(ratios[1].eq, 0);\r\n                let r1 = getEqSide(ratios[0].eq, 1);\r\n                let r2 = getEqSide(ratios[1].eq, 1);\r\n                let alts = [\r\n                    {eq: `${l1}+${l2}=${r1}+${r2}`, latex: toLatex(`${l1}+${l2}=${r1}+${r2}`)}\r\n                ]\r\n                return {ratios, alts };\r\n            },\r\n            dialogue: (id, node, read, write, makeChange, settings, vp) => {\r\n                log(`pythagoras dialogue tree sum node ${node} write`, write);\r\n                switch(node){\r\n                    case 'simplify': return Scene({text: [`And what does that result `, {latex: write.temp.selected.latex}, \r\n                                ' simplify to?'],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                        ],\r\n                        choice: {onInput: (id, val) => {\r\n                            let math = new Expression(\r\n                                val.val.eq, val.val.latex, \r\n                                'summed the ratios together', vp);\r\n                            log(`tree node branch sum out val`, val);\r\n                            makeChange('sum', [\r\n                                {type: 'add', collection: 'math', id: math.id, value: math},\r\n                                {type: 'add', collection: 'mathMap', id: 'sum', value: math.id},\r\n                                MCQ(vp.keys.acGameMCQ, '9-how-combine-ratios-simplify', write.temp.operation, val.i === 0),\r\n                                {end:true}\r\n                            ])\r\n                        }, fullWidth: true, randomize: true, options: write.temp.simplified.map((e, i) => {\r\n                            return <Text latex={e.latex} val={e} i={i} />\r\n                        })}}, getPar(settings, vp, makeChange, \"simp1\"));\r\n                    case 'sum': return Scene({text: [write.temp.operationText, {latex: write.temp.ratios[0].latex},`and`, \r\n                                    {latex: write.temp.ratios[1].latex}, ` should be...`],\r\n                                    img: [\r\n                                        {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                        {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                                    ],\r\n                        choice: {randomize: true, onInput: (id, val) => {\r\n                                let lhsEq = getEqSide(val.val.eq, 0);\r\n                                let lhsLat = getEqSide(val.val.latex, 0);\r\n                                let rhs = getEqSide(val.val.eq, 1);\r\n                                let variables = getVariables(rhs);\r\n                                let operations = ['multiply', 'divide'];\r\n                                \r\n                                let ans =simplify(rhs);\r\n                                let fun = (operation, operand, vp) => {\r\n                                    let m = execute(rhs, operation, operand);\r\n                                    log(`pythagoras sum fun operation ${operation} operand ${operand} rhs ${rhs} res`, m)\r\n                                    return simplify(m.eq);\r\n                                } \r\n                                let m1 = mixAndMatch(fun, 3, operations, variables, vp);\r\n                                let opt = [ ans, ...m1 ];\r\n                                opt = opt.map(e => {return {eq: `${lhsEq}=${e.eq}`, latex: `${lhsLat}=${e.latex}`}});\r\n                                log(`pythagoras sum rhs ${rhs} lhseq ${lhsEq} lhsLat ${lhsLat} res `, opt);\r\n                                //get the variables on the rhs, multiple, divide etc then simplify\r\n                            \r\n                            makeChange('sum', [\r\n                                {type: 'set', path: 'temp.selected', value: val.val},\r\n                                {type: 'set', path: 'temp.simplified', value: opt},\r\n                                {type: 'set', path: 'temp.node', value: 'simplify'},\r\n                                MCQ(vp.keys.acGameMCQ, '8-how-combine-ratios-math', write.temp.operation, val.i === 0)\r\n                            ])\r\n                        }, fullWidth: true, \r\n                            options: write.temp.alts.map((e, i) => {\r\n                            return <Text latex={e.latex} val={e} i={i} />\r\n                        })}},  getPar(settings, vp, makeChange, \"sum1\"))\r\n                    case 'err': \r\n                        return Scene({text: `Oh my! a mathematical exception happened. Lets try again`,\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socsad'), size: 'l', state: ['activeRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            ],\r\n                            choice: {options: [<Text text=\"okay\" out={{type: 'set', path:'temp.node', value: 'start'}} />]}},\r\n                        getPar(settings, vp, makeChange, \"err\"))\r\n                    default:\r\n                        return Scene({text: [`Now we have two equations,`,{latex: write.temp.ratios[0].latex},`and`, \r\n                            {latex: write.temp.ratios[1].latex}, `, based apon the ratios of the similar triangles \r\n                            proportional sides. How can we put these ratios together?`],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            ],\r\n                            choice: {randomize: true, options: [\r\n                                <Text text=\"We could add them \" val={0} />,\r\n                                <Text text=\"We could multiply them\" val={1} />,\r\n                            ], onInput: (id, val) => {\r\n                                let ratios = write.temp.ratios;\r\n                                let l1 = getEqSide(ratios[0].eq, 0);\r\n                                let l2 = getEqSide(ratios[1].eq, 0);\r\n                                let r1 = getEqSide(ratios[0].eq, 1);\r\n                                let r2 = getEqSide(ratios[1].eq, 1);\r\n                                let alts = [];\r\n                                let operationText = '';\r\n                                try{\r\n                                    if(val.val === 0){\r\n                                        operationText = 'The sum of ';\r\n                                        alts.push({eq: `${l1}+${l2}=${r1}+${r2}`, latex: toLatex(`${l1}+${l2}=${r1}+${r2}`)});\r\n                                        alts.push({eq: `${l2}=${r1}`, latex: toLatex(`${l2}=${r1}`)});\r\n                                        alts.push({eq: `${l2}+${r2}=${r1}+${l2}`, latex: toLatex(`${l2}+${r2}=${r1}+${l2}`)});\r\n                                    }else if(val.val === 1){\r\n                                        operationText = 'The multiple of ';\r\n                                        alts.push({eq: `${l1}*${l2}=${r1}*${r2}`, latex: toLatex(`${l1}*${l2}=${r1}*${r2}`)});\r\n                                        alts.push({eq: `${l2}=${r1}`, latex: toLatex(`${l2}=${r1}`)});\r\n                                        alts.push({eq: `${l2}*${r2}=${r1}*${l2}`, latex: toLatex(`${l2}*${r2}=${r1}*${l2}`)});\r\n                                    }\r\n                                    makeChange('sum', [\r\n                                        {type: 'set', path: 'temp.alts', value: alts},\r\n                                        {type: 'set', path: 'temp.operationText', value: operationText},\r\n                                        {type: 'set', path:'temp.node', value: 'sum'},\r\n                                        {type: 'set', path:'temp.operation', value: val.val === 0?'add':'multiply'},\r\n                                        MCQ(vp.keys.acGameMCQ, '8-how-combine-ratios', val.val === 0?'add':'multiply', val.val === 0)\r\n                                    ])\r\n                                }catch(e){\r\n                                    makeChange('sum', [\r\n                                        {type: 'set', path:'temp.node', value: 'err'},\r\n                                    ])\r\n                                }\r\n\r\n                            }}}, getPar(settings, vp, makeChange, \"add1\"));\r\n                }\r\n            }\r\n        },\r\n        ['getRatio']: {\r\n            push: (id, correct, parts, math, mathMap, vp, settings)=>{\r\n                //part, correct eq?, generate alts that are different from it from a,b,c,d,f,g\r\n                let rat = (a, b, c, d) => `${a}/${b}=${c}/${d}`;\r\n                //create 3, so that none match\r\n                log(`getRatio correct`, correct);\r\n                log(`getRatio parts`, parts);\r\n                let correctEq = rat(correct[0], correct[1], correct[2], correct[3]);\r\n                let ratios = [{eq: correctEq, latex: toLatex(correctEq), \r\n                        a: correct[0], b: correct[1], c: correct[2], d: correct[3]}];\r\n                let a, b, c, d, counter = 0;\r\n                while(ratios.length < 4){\r\n                    a = parts[getRandomIndex(parts.length-1)];\r\n                    b = parts[getRandomIndex(parts.length-1)];\r\n                    c = parts[getRandomIndex(parts.length-1)];\r\n                    d = parts[getRandomIndex(parts.length-1)];\r\n                    if((a !== b && c !== d) || counter > 100){\r\n                        let eq = rat(a,b,c,d);\r\n                        log(`getRatio operate push eq ${eq} a ${a} b ${b} equal? ${a===b} \r\n                            c ${c} d ${d} equal? ${c===d} counter ${counter} parts length ${parts.length}`);\r\n                        let latex = toLatex(eq);\r\n                        let ob = {eq, latex, a, b, c, d};\r\n                        log(`getRatio push object`, ob);\r\n                        ratios.push(ob);\r\n                    }\r\n                    counter++;\r\n                }\r\n                log(`tree node dialogue getRatio push mathMap`, mathMap);\r\n                return {ratios, id, math, mathMap}\r\n            },\r\n            dialogue: (id, node, read, write, makeChange, settings, vp) => {\r\n                log(`dialogue getRatio write`, write);\r\n                switch(node){\r\n                    case 'end': return Scene({text: [`So your result is`, {latex: write.temp.operate.equation.latex}, \r\n                        `. We shall see if it proves correct.`],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                        ],\r\n                        choice: {\r\n                            onInput: (id, val) => {\r\n                                let nMath = new Expression(write.temp.operate.equation.eq, write.temp.operate.equation.latex,\r\n                                         'expression for ratio ' + write.temp.id, vp);\r\n                                log(`tree node dialogue getRatio creating math for id ${write.temp.id}`, nMath);\r\n                                makeChange('createRatio', [\r\n                                    {end:true},\r\n                                    {type:'add', collection: 'math', id: nMath.id, value: nMath},\r\n                                    {type:'add', collection: 'mathMap', id: write.temp.id, value: nMath.id}\r\n                                ])\r\n                            },\r\n                            options: [<Text text={\"next\"}  />]\r\n                        }},  getPar(settings, vp, makeChange, \"end\"))\r\n                    case 'operate': return Scene({text: [`And what operation could we perform on this equation,`,{latex: write.temp.ratio},\r\n                            `, to derive`,{latex: write.temp.id === 'a'?'AB^2':'BC^2'},`, and make it easier to work with?`],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                                \r\n                            ],\r\n                            choice: {\r\n                                randomize: true, onInput: (id, val) => {\r\n                                    let res;\r\n                                    if(val.val===0){\r\n                                        ///multiply by b and d\r\n                                        let c1 = write.temp.ratio.b;\r\n                                        let c2 = write.temp.ratio.d; //calculate(operation, eq, altInputs) \r\n                                        if(c1 !== write.temp.ratio.a){\r\n                                            res = operate({operation: 'multiply', operands: [c1]}, write.temp.ratio.eq, \r\n                                                1, EQLR);\r\n                                        }\r\n                                        if(c1 !== write.temp.ratio.c){\r\n                                            res = operate({operation: 'multiply', operands: [c2]}, res[0].equation.eq, \r\n                                            1, EQLR);\r\n                                        }\r\n                                        \r\n                                        log(`getRatio operate cross multiply c1 ${c1} c2 ${c2}`, write.temp);\r\n                                    }else if(val.val === 1){\r\n                                        res = operate({operation: 'multiply', operands: [write.temp.id==='a'?'AB':'BC']}, write.temp.ratio.eq, \r\n                                                1, EQLR);\r\n                                    }else if(val.val === 2 || val.val === 3){\r\n                                        let r1 = val.val===2?write.temp.ratio.a:write.temp.ratio.c;\r\n                                        let r2 = val.val===2?write.temp.ratio.b:write.temp.ratio.d;\r\n                                        log(`getRatio multiply by ${r2}/${r1}`, write.temp);\r\n                                        //multiply by \r\n                                        res = operate({operation: 'multiply', operands: [`${r2}/${r1}`]}, write.temp.ratio.eq, \r\n                                                1, EQLR);\r\n                                    }\r\n                                    log(`getRatio operate eq`, write.temp);\r\n                                    log(`getRatio operate res`, res);\r\n                                    makeChange('ratio', [\r\n                                        MCQ(vp.keys.acGameMCQ, '7-ratio-operation', val.val + \"\", val.val === 0),\r\n                                        {type: 'set', path: 'temp.operate', value: res[0]},\r\n                                        {type: 'set', path:'temp.node', value: 'end'}\r\n                                    ])\r\n                                },\r\n                                options: [\r\n                                    <Text text={\"we should cross multiply\"} val={0} />,\r\n                                    <Text text={`multiply by ${write.temp.id==='a'?'AB':'BC'}`} val={1} />,\r\n                                    <Text text={\"we need to multiply by the first fractions reciprocal\"} val={2}/>,\r\n                                    <Text text={\"we need to multiply by the second fractions reciprocal\"} val={3}/>,\r\n                                ]\r\n                            }}, getPar(settings, vp, makeChange, \"operate\")\r\n                    )\r\n                    case 'ratio': return Scene({text: [`With further operations, which ratio do you think could eventually resolve to `,\r\n                        {latex: write.temp.id === 'a'?'AB^2':'BC^2'},`?`],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']}\r\n                        ],\r\n                        choice: {\r\n                            randomize: true, onInput: (id, val, vp, oi)=>{\r\n                                makeChange('ratio', [\r\n                                    MCQ(vp.keys.acGameMCQ, '6-ratio-pair-select', val.value.eq, val.i === 0),\r\n                                    {type: 'set', path: 'temp.ratio', value: val.value},\r\n                                    {type: 'set', path:'temp.node', value: 'operate'}\r\n                                ])\r\n                            },\r\n                            options: write.temp.ratios.map((e, i) => {\r\n                                return <Text latex={e.latex} i={i} value={e} />\r\n                            })\r\n                        }}, getPar(settings, vp, makeChange, \"ratio\"));\r\n                    default: return Scene({text:  write.temp.id === 'a'?[ `In order to derive `,{latex: 'AB^2 + BC^2 = AC^2'},`, we will need ratios that somehow`,\r\n                        {text: 'multiply', color: 'primary'}, `together to give us the parts. Tackle `, {latex: 'AB^2'},\r\n                       `first`]:\r\n                       [ `And now we shall repeat the process for the other ratio, which should somehow resolve to`, {latex: 'BC^2'}],\r\n                       img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            \r\n                        ],\r\n                        choice: {options: [<Text text={\"next\"} out={{type: 'set', path:'temp.node', value: 'ratio'}} />]}},\r\n                        getPar(settings, vp, makeChange, \"getRatio\"));\r\n                }\r\n            }\r\n        },\r\n        ['intro']: {\r\n            push: (vp, settings) => {\r\n                let ratios = [{eq: `AB/AC=AD/AB`, latex: toLatex(`AB/AC=AD/AB`)}, \r\n                {eq: `AB/BC=AD/AB`, latex: toLatex(`AB/BC=AD/AB`)},\r\n                {eq: `AC/BC=AD/AB`, latex: toLatex(`AC/BC=AD/AB`)}];\r\n                return {ratios}\r\n            },\r\n            dialogue: (id, node, read, write, makeChange, settings, vp) => {\r\n                log(`pythagoras tree dialogue intro node ${node}`);\r\n                switch(node){\r\n                    case 'confirm': return Scene( {text: [`Socrates: \"So we will use this fact of similar triangles and their eternally proprtional sides \r\n                        to prove `, {latex: 'AB^2 + BC^2 = AC^2'}, `. Let's get started!\"`],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            \r\n                        ],\r\n                        choice: {options: [<Text text={\"yes\"} out={{end:true}} />]}},\r\n                        getPar(settings, vp, makeChange, \"confirm\") )\r\n                    case 'confidence': return Scene({text: [`Socrates: \"Have confidence. If you follow the truth you can only derive more truths!\"` ],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                           \r\n                        ],\r\n                        choice: {options: [<Text text={\"You're right\"} out={{type: 'set', path:'temp.node', value: 'confirm'}} />]}},\r\n                        getPar(settings, vp, makeChange, \"confidence'\"))\r\n                    case 'ratio': return Scene({text: [`Socrates: \"And if these triangles sides are related and the two smaller sum together to form the whole, we can surely prove`,\r\n                        {latex: `AB^2 + BC^2 = AC^2`}, 'to be true, if it is true.\"'],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']},\r\n                            \r\n                        ],\r\n                        choice: {options: [<Text text={\"I agree\"} out={{type: 'set', path:'temp.node', value: 'confirm'}} />, \r\n                            <Text text={\"maybe\"} out={{type: 'set', path:'temp.node', value: 'confidence'}} />]}},\r\n                        getPar(settings, vp, makeChange, \"ratio\"))\r\n                    case 'errCorrectRatio': return Scene({text: [`Socrates: \"Wrong pair of sides my child. If two similar triangles sides are proportional, then the ratio of the first triangles hypotenuse \r\n                            to its shorter side, is equal to the second triangles hypotenuse to its shorter side. In this case`, \r\n                            {latex: toLatex(`BC/AC=DC/BC`)}, '\"',\r\n                            {text: 'Review this topic here', color: 'primary',className: 'block',leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',   state: ['activeCenter']}\r\n                            ],\r\n                            choice: {options: [<Text text=\"okay\" out={\r\n                                [\r\n                                    {type: 'set', path:'temp.node', value: 'correctRatio'}\r\n                                ]\r\n                        } />]}}, \r\n                            getPar(settings, vp, makeChange, \"errCorrectRatio\")\r\n                    )\r\n                    case 'correctRatio': return Scene({text: [`Socrates: \"And which of the following ratios would \r\n                            therefore be true for this figure?\"`],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                              \r\n                            ],\r\n                            choice: {\r\n                                randomize: true, onInput: (id, val, vp, oi) => {\r\n                                    makeChange('correctRatio', [\r\n                                        {type: 'set', path:'temp.node', value: val.i === 0?'ratio':'errCorrectRatio'}, \r\n                                        MCQ(vp.keys.acGameMCQ, '5-triangle-correctRatio', val.e.eq, val.i === 0?100:0)\r\n                                    ])\r\n                                },\r\n                                options: write.temp.ratios.map((r, i) => {\r\n                                return <Text latex={r.latex} e={r} i={i} />\r\n                                })\r\n                            }}, getPar(settings, vp, makeChange, \"correctRatio\")\r\n                    )\r\n                    case 'errSimilarEqual': return Scene( {text: [`Socrates: \"If similar triangles lengths were always equal, \r\n                                would they not be the same triangle? Similar is not the same.\"`,\r\n                                {text: 'Review this topic here', color: 'primary',className: 'block',leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                            ],\r\n                            choice: {options: [<Text text={\"true\"} out={{type: 'set', path:'temp.node', value: 'similar'}} />]}},\r\n                            getPar(settings, vp, makeChange, \"errSimilarEqual\")\r\n                    )\r\n                    case 'similar': return Scene({text: [`Socrates: \"What is known about similar triangles?\"`],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                            ],\r\n                            choice: {randomize: true, options: [<Text text={\"Corresponding sides are always equal\"} \r\n                                    out={[{type: 'set', path:'temp.node', value: 'errSimilarEqual'},\r\n                                    MCQ(vp.keys.acGameMCQ, '4-triangle-ratio', 'equal', 0)\r\n                                ]} />,\r\n                                <Text text={\"Corresponding sides are proportional\"} out={[{type: 'set', path:'temp.node', value: 'correctRatio'},\r\n                                MCQ(vp.keys.acGameMCQ, '4-triangle-ratio', 'ratio', 100)\r\n                                ]} />]}\r\n                            }, getPar(settings, vp, makeChange, \"similar\")\r\n                    )\r\n                    case 'angleEqualErr': return Scene({text: [`Socrates: \"The angles needn't overlap to be equal. They can be rotated \r\n                            and scaled in any way, and still be equal in angle.\"`,\r\n                            {text: 'Review this topic here', color: 'primary',className: 'block',leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                                img: [\r\n                                    {id: 'soc', src: getImg(vp.meta, 'socsad'), size: 'l', state: ['passiveRight']},\r\n                                    {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                                ],\r\n                                choice: {options: [<Text text={\"Alright\"} \r\n                                        out={[{type: 'set', path:'temp.node', value: 'angleEqual'}\r\n                                    ]} />]}\r\n                                }, getPar(settings, vp, makeChange, \"angleEqualErr\")\r\n                        )\r\n                    case 'angleEqual':return Scene({text: [`Socrates: \"And which of these triangles angles are truly equal to one another?\"`],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'sochappy'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                            ],\r\n                            choice: {randomize: true, options: [<Text text={\"ADB = BDC\"} \r\n                                    out={[{type: 'set', path:'temp.node', value: 'similar'},\r\n                                    MCQ(vp.keys.acGameMCQ, '2-triangle-angle-equal', 'BDC = ADB', 100)\r\n                                ]} />,\r\n                                <Text text={\"BAC = ACB\"}\r\n                                 out={[{type: 'set', path:'temp.node', value: 'angleEqualErr'},\r\n                                MCQ(vp.keys.acGameMCQ, '2-triangle-angle-equal', 'BAC = ACB', 0)\r\n                                ]} />,\r\n                                <Text text={\"ADB = ACB\"}\r\n                                 out={[{type: 'set', path:'temp.node', value: 'angleEqualErr'},\r\n                                MCQ(vp.keys.acGameMCQ, '2-triangle-angle-equal', 'ADB = ACB', 0)\r\n                                ]} />,\r\n                                <Text text={\"BAC = BDC\"}\r\n                                 out={[{type: 'set', path:'temp.node', value: 'angleEqualErr'},\r\n                                MCQ(vp.keys.acGameMCQ, '2-triangle-angle-equal', 'BAC = BDC', 0)\r\n                                ]} />]}\r\n                            }, getPar(settings, vp, makeChange, \"angleEqual\")\r\n                    )\r\n                    case 'errsimilar-rule': return Scene({\r\n                            text: [`Socrates: \"None of these trianlges share more than one common side each. They share one complete side, \r\n                            and the smaller triangles only share a part of the largers hypotenuse.\"`,\r\n                            {text: 'Review this topic here', color: 'primary',className: 'block',leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                            ],\r\n                            choice: {options: [<Text text={\"yes\"} out={{type: 'set', path:'temp.node', value: 'similar-rule'}} />]}\r\n                            },\r\n                            getPar(settings, vp, makeChange, \"errsimilar-rule\")\r\n                    )\r\n                    case 'similar-rule': return Scene({text: [`Socrates: \"And by what rule do we know that these \r\n                                                    triangles are similar?\"`],\r\n                            img: [\r\n                                {id: 'soc', src:getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                            ],\r\n                            choice: {randomize: true, options: [<Text text={\"They share two sides and an angle, or SAS\"} \r\n                                out={[{type: 'set', path:'temp.node', value: 'errsimilar-rule'},\r\n                            MCQ(vp.keys.acGameMCQ, '1-triangle-similar-rule', 'sas', 0)]} />,\r\n                            <Text text={\"They share three sides, or SSS\"} out={[{type: 'set', path:'temp.node', value: 'errsimilar-rule'},\r\n                            MCQ(vp.keys.acGameMCQ, '1-triangle-similar-rule', 'sss', 0)]} />,\r\n                            <Text text={\"They share 3 identical angles, or AAA\"} out={[{type: 'set', path:'temp.node', value: 'angleEqual'},\r\n                            MCQ(vp.keys.acGameMCQ, '1-triangle-similar-rule', 'aaa', 100)]} />]}},\r\n                            getPar(settings, vp, makeChange, \"similar-rule\")\r\n                    )\r\n                    case 'errPartWhole1': return Scene({\r\n                            text: [`Socrates: \"This is true. But there are no useful facts or theorems we can draw on from this part whole realisation.\r\n                            Perhaps there are other relations that can give us some wiggle room with which to prove`, \r\n                            {latex: 'AB^2 + BC^2 = AC^2'}, '\"',\r\n                            {text: 'Review this topic here', className: 'block', color: 'primary', leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                            img: [\r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']},\r\n                            ],\r\n                            choice: {options: [<Text text={\"true\"} out={{type: 'set', path:'temp.node', value: 'related'}} />]}},\r\n                            getPar(settings, vp, makeChange, \"errPartWhole1\")\r\n                    )\r\n                    case 'errCongruent1': return Scene({text: \r\n                        [`Socrates: \"But does not congruent mean 'identical in form'? How can these 3 triangles be \r\n                        identical in form if two sum to the whole?\"`,\r\n                        {text: 'Review this topic here', color: 'primary',className: 'block',leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                            img: [ {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: ['activeCenter']}],\r\n                            choice: {options: [\r\n                            <Text text={\"true\"} out={{type: 'set', path:'temp.node', value: 'related'}} />\r\n                        ]}\r\n                            }, \r\n                            getPar(settings, vp, makeChange, 'errCongruent1'));\r\n                    case 'related': return Scene({text: [`Socrates: \"And how are these three triangles related, if at all?\"`],\r\n                            img: [ {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['passiveRight']},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: ['activeCenter']} ],\r\n                            choice: {randomize: true, options: [<Text text={\"They have a part whole relationship\"} \r\n                                        out={[{type: 'set', path:'temp.node', value: 'errPartWhole1'},\r\n                                    MCQ(vp.keys.acGameMCQ, '3-triangle-similar', 'partWhole', 0)]} />,\r\n                                    <Text text={\"They are congruent\"} out={[{type: 'set', path:'temp.node', value: 'errCongruent1'},\r\n                                    MCQ(vp.keys.acGameMCQ, '3-triangle-similar', 'congruent', 0)]} />,\r\n                                    <Text text={\"They are similar\"} out={[{type: 'set', path:'temp.node', value: 'similar-rule'},\r\n                                    MCQ(vp.keys.acGameMCQ, '3-triangle-similar', 'similar', 100)]} />]\r\n                            }}, getPar(settings, vp, makeChange, \"related\")\r\n                    )\r\n                    case 'err2tri': return Scene({text: [`Socrates: \"Perhaps it has created two new smaller triangles, but their parts add \r\n                        up to the original whole triangle.\"`,\r\n                        {text: 'Review this topic here', color: 'primary',className: 'block',leave: true, href: \"https://www.youtube.com/watch?v=8Ld8Csu4sEs\"}],\r\n                            img: [ {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: 'passiveRight'},\r\n                            {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l',  state: 'activeCenter'} ],\r\n                            choice:{options: [<Text text={\"I agree\"} out={{type: 'set', path:'temp.node', value: 'related'}} />]}\r\n                        }, getPar(settings, vp, makeChange, \"err2tri\")\r\n                    )\r\n                    case 'line': return Scene({text: [`Socrates: \"And what has that line BD been used to create?\"`],\r\n                            img: [ \r\n                             \r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: 'passiveRight'},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: 'activeCenter'},\r\n                            ],\r\n                            choice: {randomize: true, options: [ \r\n                                <Text text={\"2 triangles\"} out={[\r\n                                    {type: 'set', path:'temp.node', value: 'err2tri'}\r\n                                ]} />, \r\n                                <Text text={\"3 triangles\"} out={[\r\n                                    {type: 'set', path:'temp.node', value: 'related'}\r\n                                ]} />\r\n                            ]}\r\n                        }, getPar(settings, vp, makeChange, \"line\")\r\n                    )\r\n                    case 'bisect': return Scene({text: [`Socrates: \"There are many ways to prove this. I shall start you off with my favorite one, but you shall walk the path.`,\r\n                            `Imagine that I draw a line perpendicular to AC, such that it intersects with \r\n                            both lines AB and BC. What do I now have?\"`],\r\n                            img: [\r\n                              \r\n                                {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: 'passiveRight'},\r\n                                {id: 'triangle1', src: getImg(vp.meta, 'tri3'), size:'l', state: 'activeCenter'}, \r\n                            ],\r\n                            choice: {randomize: true, options: [<Text text={\"Another line\"} out={{type: 'set', path:'temp.node', value: 'line'}} />,\r\n                            <Text text={\"3 triangles\"} out={{type: 'set', path:'temp.node', value: 'related'}} />]}\r\n                        }, getPar(settings, vp, makeChange, \"bisect1\")\r\n\r\n                    )\r\n                    case 'figure': return Scene({text: [{text: `Socrates: \"By asking you a series of questions, to which you will answer. \r\n                        Let me start you off. So if we have a triange ABC, I am claiming that\r\n                        the length AC multiplied by AC is equal to the sum of AB multiplied by AB and BC multiplied by BC, or in other words.`},\r\n                        {latex: 'AB^2 + BC^2 = AC^2'}, ', the exact same relation as ', {latex: PYTHAG_EQ},' correct?\"'],\r\n                        img: [\r\n                            {id: 'soc', src: getImg(vp.meta, 'sochappy'), size: 'l', state: 'activeRight'},\r\n                            {id: 'triangle0', src: getImg(vp.meta, 'tri1'), size:'l', state: 'activeCenter'}\r\n                        ],\r\n                        choice: {options:[<Text text={\"yes\"} out={{type: 'set', path:'temp.node', value: 'bisect'}} />]}\r\n                    }, getPar(settings, vp, makeChange, 'figure')\r\n                    )\r\n                    case 'howProve': return Scene( {text: [`Socrates: \"And yet we must be able to disntiguish fact from fiction. I shall prove to you that \r\n                            YOU can prove my claim that`, {latex: PYTHAG_EQ}, ', is true.\"'],\r\n                            img: [ {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: 'activeRight'} ],\r\n                            choice: {options: [<Text text={\"how?\"} out={{type: 'set', path:'temp.node', value: 'figure'}} />]}\r\n                        }, getPar(settings, vp, makeChange, 'intro-howProve'))\r\n                    case 'believeYes':return Scene({text: [{text: `Socrates: \"But how can you be sure that I am not lying? Or that I am not wrong? What if the formla`},\r\n                        {latex: PYTHAG_EQ}, {text: 'wasnt true, but instead the truth was'},\r\n                        {latex: 'a^2 + b^2 + 1=c^2'}, {text: '? or'}, \r\n                        {latex: '(a^2 + b^2)/2=c^2'},'\"'],\r\n                        img: [ {id: 'soc', src: getImg(vp.meta, 'socsad'), size: 'l', state: 'activeRight'} ],\r\n                        choice: {options: [<Text text={\"I can't be sure it's true\"} out={{type: 'set', path:'temp.node', value: 'howProve'}} />,\r\n                        <Text text={\"It's a fact\"} out={{type: 'set', path:'temp.node', value: 'howProve'}} />]}\r\n                    }, {...getPar(settings, vp, makeChange, 'intro-believeYes')}\r\n                    )\r\n                    case 'believeNo': return Scene({text: [`Socrates: \"You are right to be skeptical. For I could just as easily say that`,\r\n                            {latex: 'a^2 + b^2 + 1=c^2'}, 'instead of', {latex: PYTHAG_EQ}, 'yet they cannot both be true.\"'],\r\n                            img: [ {id: 'soc', src: getImg(vp.meta, 'socfront'), size: 'l', state: ['activeRight']} ],\r\n                            choice: {options: [<Text text={\"true\"} out={{type: 'set', path:'temp.node', value: 'believeYes'}} />]}\r\n                        },\r\n                        {...getPar(settings, vp, makeChange, 'intro-believeNo')}\r\n                    )\r\n                    default: return Scene({text: [`Socrates: \"Let me tell you that the squared length of the longest line of a right angled triangle, can be given by the summed square \r\n                        of the other 2 sides of that triangle. Do you believe me?\"`],\r\n                        img: [ {id: 'soc', src: getImg(vp.meta, 'sochappy'), size: 'l', state: ['passiveRight']} ],\r\n                        choice: {options: [<Text id=\"intro111t1\" text={\"yes\"} out={[\r\n                            {type: 'set', path:'temp.node', value: 'believeYes'}\r\n                        ]} />,\r\n                        <Text id=\"intro111t2\" text={\"no\"} out={[\r\n                            {type: 'set', path:'temp.node', value: 'believeNo'}\r\n                        ]} />]}\r\n                        }, getPar(settings, vp, makeChange, 'intro-start'))\r\n                }\r\n            }\r\n        },\r\n    },\r\n    items:{}\r\n}\r\n\r\nconst output = o;\r\nexport default output;"],"sourceRoot":""}