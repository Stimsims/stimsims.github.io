{"version":3,"sources":["webpack:///./src/mycomponents/views/Form/views/MultipleChoice.js","webpack:///./src/mycomponents/views/Form/views/Email.js","webpack:///./src/mycomponents/views/Form/views/TextArea.js","webpack:///./src/mycomponents/views/Form/views/Scale.js","webpack:///./src/mycomponents/views/Form/index.js","webpack:///./src/mycomponents/views/SEO/Social/Profiles.js"],"names":["MultipleChoice","props","log","key","id","className","Text","text","options","map","e","i","name","type","value","checked","onChange","handleChange","EmailView","Email","styled","div","theme","Message","Box","placeholder","textarea","neutral","dummyObj","target","Scale","Slider","min","item","max","step","onInput","val","FormContainer","Subscribable","content","useState","error","setError","form","reduce","agg","answers","setAnswers","encode","object","encodedString","prop","hasOwnProperty","length","encodeURI","handleSubmit","valid","analytics","answer","filter","dimension","trackPersistent","isNaN","sendEvent","Event","category","onFormOver","netlify","doSubscribe","fetch","method","headers","body","sendError","title","tag","color","subtitle","TextArea","renderFormElement","data-netlify","data-netlify-honeypot","onSubmit","data-netlify-recaptcha","hidden","Button","glow","btnText","mediaL","spaceM","Profiles","href","icon","hover"],"mappings":"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","file":"views~component---src-pages-about-js-20c46fea601ac9c2412c.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\nimport Button from 'views/Button/v1/Button.js';\r\nimport './styles.css';\r\nimport {log} from 'utilities/Measure';\r\n\r\nconst MultipleChoice = (props) => {\r\n    log(`Form MultipleChoice props`, props);\r\n    return <div key={props.id} className=\"container form-element width-full\">\r\n        <Text className=\"text-center\">{props.text}</Text>\r\n        {props.options.map((e, i) => {\r\n            return <div className=\"radio\" key={i}><label key={props.id}>\r\n            <input name={props.id} key={e} type=\"checkbox\" value={e} checked={props.value === e} onChange={props.handleChange} />\r\n            <span className=\"checkmark\"></span>\r\n            <span className=\"radio-item\">{e}</span>\r\n          </label></div>\r\n        })}\r\n    </div>\r\n}\r\n\r\nexport default MultipleChoice;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\n\r\nconst EmailView = (props) => {\r\n\r\n    return <Email className=\"form-element\">\r\n        <Text className=\"text-center\">e-mail</Text>\r\n        <input className=\"email bg-grad-pp\" type=\"email\" name=\"email\" \r\n            onChange={props.handleChange} value={props.value || ''} \r\n        />\r\n    </Email>\r\n}\r\n\r\nexport default EmailView;\r\n\r\nconst Email = styled.div`\r\n    .email{\r\n        width:100%;\r\n        outline: 0;\r\n        border-left: none;\r\n        border-right: none;\r\n        color: ${props => props.theme.text};\r\n        text-align: center;\r\n        select: {\r\n            appearance: none; \r\n        }\r\n    }\r\n    input:-webkit-autofill{\r\n        -webkit-text-fill-color:${props => props.theme.text};\r\n        -webkit-box-shadow: 0 0 0px 1000px #000 inset;\r\n        width:100%;\r\n    }\r\n`","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\n\r\nconst Message = (props) => {\r\n\r\n    return <div className=\"form-element\">\r\n        <Text className=\"text-center\">{props.text}</Text>\r\n        <Box className=\"bg-grad-pp\"  key={props.id} name={props.id} id={props.id}\r\n            onChange={props.handleChange} value={props.value} placeholder={props.placeholder}  \r\n        />\r\n    </div>\r\n}\r\n//className=\"bg-grad-pp\" \r\nexport default Message;\r\n\r\nconst Box = styled.textarea`\r\n    width: 100%;\r\n    color: ${props => props.theme.text};\r\n    background-color: ${props => props.theme.neutral};\r\n    border: none;\r\n    outline: 0;\r\n    padding: 10px;\r\n`","import React from 'react';\r\nimport Slider from 'views/Slider/v1/Slider.js';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\n\r\nconst dummyObj = {target: {}};\r\nconst Scale = (props) => {\r\n    const handleChange = (id, val) => {\r\n        dummyObj.target.name = id;\r\n        dummyObj.target.value = val;\r\n        props.handleChange(dummyObj);\r\n    }\r\n    return <div  className=\"form-element\">\r\n        <Text className=\"text-center\">{props.text}</Text>\r\n        <Slider id={props.id} key={props.id} \r\n            min={props.item && props.item.min || 1} max={props.item && props.item.max || 5} step={props.item.step && props.item.step || 1} \r\n            value={props.value?props.value:3} onInput={handleChange} />\r\n    </div>\r\n}\r\n\r\nexport default Scale;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\nimport Button from 'views/Button/v1/Button.js';\r\nimport MC from './views/MultipleChoice';\r\nimport Email from './views/Email';\r\nimport TextArea from './views/TextArea';\r\nimport Scale from './views/Scale';\r\nimport {Event} from 'utilities/Create';\r\nimport {sendError, log, sendEvent, sendPageview, initializeAnalytic, trackPersistent, \r\n      clearPersistantValues, TRACKER_WEB, TRACKER_POSTS} from 'utilities/Measure.js';\r\nimport Subscribable from 'views/hoc/Subscribable';\r\n\r\nconst Form = (props) => {\r\n    const [error, setError] = useState(null);\r\n    const [answers, setAnswers] = useState(props.form.reduce((agg, e, i) => {\r\n      if(e.value){\r\n        agg[e.id] = e.value;\r\n      }\r\n      return agg;\r\n    }, {}));\r\n    const handleChange = e => {\r\n        setAnswers({...answers, [e.target.name]: e.target.value});\r\n    }\r\n    const encode = (object) => {\r\n        var encodedString = '';\r\n        for (var prop in object) {\r\n            if (object.hasOwnProperty(prop)) {\r\n                if (encodedString.length > 0) {\r\n                    encodedString += '&';\r\n                }\r\n                encodedString += encodeURI(prop + '=' + object[prop]);\r\n            }\r\n        }\r\n        return encodedString;\r\n    }\r\n  \r\n    const handleSubmit = (id, e) => {\r\n\r\n        let valid = true;\r\n        props.form.map(e => {\r\n          if(!answers.hasOwnProperty(e.id)){\r\n            setError('Please complete the form before submitting');\r\n            valid = false;\r\n          }\r\n        });\r\n        if(valid){\r\n            let value;\r\n            if(props.analytics){\r\n              for(let answer in answers){\r\n                let item = props.form.filter(e => e.id === answer)[0];\r\n                if(item.dimension){\r\n                  trackPersistent(item.dimension, answers[answer]);\r\n                }else{\r\n                  value = answers[answer] || item.value;\r\n                  if(value){\r\n                    if(isNaN(answers[answer])){\r\n                      sendEvent(new Event(item.category || 'report', answer, answers[answer] + \"\", null));\r\n                    }else{\r\n                      sendEvent(new Event(item.category || 'report', answer, null, answers[answer]));\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if(props.onFormOver){\r\n                  props.onFormOver();\r\n              }\r\n          }\r\n          if(props.netlify){\r\n            props.doSubscribe('form', ()=>{\r\n                  return fetch(`/`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n                    body: encode({\r\n                      'form-name': props.id,//form.getAttribute('name'),\r\n                      ...answers,\r\n                    }),\r\n                  }\r\n                )},\r\n                () =>{\r\n                    if(props.onFormOver){\r\n                        props.onFormOver();\r\n                    }\r\n                },\r\n                error => {\r\n                  sendError(`feedback form error: ${error}`, false);\r\n              }\r\n            )\r\n          }\r\n        }\r\n\r\n  \r\n\r\n    }\r\n    const renderFormElement = (e, i) => {\r\n        switch(e.type){\r\n            case 'email': return <Email id={e.id} key={e.id} value={answers[e.id]} handleChange={handleChange} />\r\n            case 'mc': return <MC id={e.id} key={e.id} options={e.options} text={e.text}\r\n                    value={answers[e.id]} handleChange={handleChange} />\r\n            case 'text': return <TextArea id={e.id} key={e.id} placeholder={e.placeholder}\r\n                text={e.text} value={answers[e.id]} handleChange={handleChange}/>\r\n            case 'scale': return <Scale id={e.id} key={e.id} text={e.text} item={e}\r\n                value={answers[e.id]} handleChange={handleChange} />\r\n            default: return <Text>Unknown for element {e.type}</Text>\r\n        }\r\n    }\r\n    const wrapFormContent = (content) => {\r\n      if(props.netlify){\r\n        return  <form\r\n                  //netlify\r\n                  name={props.id}\r\n                  method=\"post\"\r\n                  data-netlify=\"true\"\r\n                  data-netlify-honeypot=\"bot-field\"\r\n                  onSubmit={handleSubmit}\r\n                  className=\"text-center\"\r\n                  data-netlify-recaptcha=\"true\"\r\n                >\r\n                  {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\r\n                  <input type=\"hidden\" name=\"form-name\" value={props.id} />\r\n                  <div hidden>\r\n                    <label>\r\n                      Don’t fill this out:{' '}\r\n                      <input name=\"bot-field\" onChange={handleChange} />\r\n                    </label>\r\n                  </div>\r\n                  {content}\r\n                  <div data-netlify-recaptcha=\"true\"></div>\r\n                  <Button glow onInput={handleSubmit}>\r\n                      Send\r\n                    </Button>\r\n                </form>\r\n      }else{\r\n        return  <form\r\n                    name={props.id}\r\n                    method=\"post\"\r\n                    onSubmit={handleSubmit}\r\n                    className=\"text-center\"\r\n                  >\r\n                    {content}\r\n                    {error && <Text className=\"text-center\" color=\"error\">{error}</Text>}\r\n                    <Button glow onInput={handleSubmit}>\r\n                        {props.btnText || 'send'}\r\n                      </Button>\r\n                  </form>\r\n      }\r\n    }\r\n    return (\r\n      <FormContainer id={props.id} key={props.key}>\r\n        <section className=\"content\">\r\n\r\n              {props.title && <Text tag=\"h1\" color=\"primary\" className=\"text-xlarge text-center\">{props.title}</Text>}\r\n              {props.subtitle && <Text tag=\"h2\" className=\"text-center\" color={props.title?'text':'primary'}>{props.subtitle}</Text>}\r\n              {wrapFormContent(props.form.map((e, i) => {\r\n                      return renderFormElement(e, i)\r\n              }))}\r\n        </section>\r\n      </FormContainer>\r\n    )\r\n  }\r\n\r\nForm.propTypes = {\r\n    title: PropTypes.string,\r\n    subtitle: PropTypes.string,\r\n    form: PropTypes.array.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    netlify: PropTypes.bool,\r\n    analytics: PropTypes.bool,\r\n    onFormOver: PropTypes.func,\r\n    \r\n}\r\n\r\nexport default Subscribable(Form);\r\n\r\nconst FormContainer = styled.div`\r\n    ${props => props.hidden?`\r\n        position: absolute;\r\n        opacity:0;\r\n    `:``}\r\n    height: 100%;\r\n    width:100%;\r\n    max-width: ${props=>props.theme.mediaL};\r\n    margin: auto;\r\n    .form-element{\r\n        margin: ${props => props.theme.spaceM}% auto;\r\n    }\r\n    ::-webkit-scrollbar {\r\n        width: 12px;\r\n        margin-top: 57px;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: #271D29;\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #523957;\r\n        border-radius: 10px;\r\n    }\r\n`\r\n\r\n/**\r\n * \r\n *     \"form\":[\r\n        {\"type\": \"scale\", \"id\":\"scifi\", \"value\": 3, \"text\": \"How much do you like science fiction stories?\"},\r\n        {\"type\": \"text\", \"id\":\"machine\", \"text\": \"What is your favourite machine?\", \"placeholder\": \"my favorite machine is...\"},\r\n        {\"type\": \"mc\", \"id\":\"favchar\", \"text\": \"which was not a character in the story?\", \"options\": [\"Maya\", \"June\", \"Neptune\"], \"value\": null},\r\n        {\"type\": \"mc\", \"id\":\"favvar\", \"text\": \"which was your favorite variable?\", \"options\": [\"time\", \"speed\", \"energy\", \"weight\"], \"value\": null}\r\n    ],\r\n */","import React from 'react';\r\nimport IconButton from 'views/IconButton/v1/IconButton.js';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {log} from 'utilities/Measure.js';\r\nimport Text from 'views/Text/Text/v1/Text';\r\n\r\nconst Profiles = (props) => {\r\n    const renderTwitter = () => {\r\n        return <a href={`https://twitter.com/stimsims`} target=\"_blank\">\r\n            <IconButton icon=\"icon-twitter\" color=\"#00aced\" hover={\"white\"} /></a>\r\n    }\r\n    return (\r\n        <div className=\"text-center\">\r\n            {renderTwitter()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profiles;\r\n\r\n\r\n// /https://twitter.com/intent/user?screen_name=<twitter_screen_name>"],"sourceRoot":""}