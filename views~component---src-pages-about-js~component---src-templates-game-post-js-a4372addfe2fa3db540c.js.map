{"version":3,"sources":["webpack:///./src/mycomponents/views/Slider/v1/Slider.js"],"names":["createSliderWithTooltip","Slider","Range","Handle","wrapperStyle","width","margin","maxWidth","handle","props","value","dragging","index","restProps","overlay","visible","placement","key","tipProps","overlayStyle","fontSize","borderRadius","SliderView","isFloat","useState","step","includes","style","text","min","max","defaultValue","tipFormatter","onAfterChange","roundTo","dp","onInput","id","mergeInput","type","path","railStyle","backgroundColor","height","dotStyle","color","handleStyle","border","top","position","trackStyle"],"mappings":"4QAWcA,EADkBC,IAAOD,yBACDC,IAAOC,OAD7C,IAEMC,EAASF,IAAOE,OAEhBC,EAAe,CAAEC,MAAO,MAAOC,OAAQ,UAAWC,SAAS,UAE3DC,EAAS,SAACC,GAAW,IACjBC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,MAAUC,E,oIADX,CACyBJ,EADzB,8BAExB,OACE,kBAAC,IAAD,CAEEK,QAASJ,EACTK,QAASJ,EACTK,UAAU,MACVC,IAAKL,EACLM,SAAU,CAACH,SAAQ,GACnBI,aAAc,CAACC,SAAU,OAAQC,aAAc,QAG/C,kBAAClB,EAAD,eAAQO,MAAOA,GAAWG,MAmCjBS,IA5BI,SAACb,GAAW,IACtBc,EAAWC,oBAAU,GAAGf,EAAMgB,MAAQC,SAAS,MAD1B,GAc5B,OAAO,yBAAKC,MAAOvB,GAChBK,EAAMmB,MAAQ,kBAAC,IAAD,KAAOnB,EAAMmB,MAC5B,kBAAC,IAAD,CAAQC,IAAKpB,EAAMoB,KAAO,EAAGC,IAAKrB,EAAMqB,KAAO,EAAGC,aAActB,EAAMC,MAAOe,KAAMhB,EAAMgB,MAAQ,EAC9FO,aAAc,SAAAtB,GAAK,OAAOA,EAAP,KACpBF,OAAQA,EAAQyB,cAhBH,SAACvB,GACba,IAEAb,EAAQwB,kBAAQxB,EAAOD,EAAM0B,IAAM,IAElC1B,EAAM2B,QAEP3B,EAAM2B,QAAS3B,EAAM4B,GAAK3B,GAE1BD,EAAM6B,WAAW7B,EAAM4B,GAAI,CAACE,KAAM,MAAOC,KAAM/B,EAAM4B,GAAI3B,WAQ1D+B,UAAW,CAACC,gBAAiB,SAAUC,OAAQ,OAC/CC,SAAU,CAACC,MAAO,SAAUH,gBAAiB,MAAOC,OAAQ,QAC5DG,YAAa,CAACJ,gBAAiB,UAAWK,OAAQ,OAAQJ,OAAQ,OAAQtC,MAAO,OAAQ2C,IAAK,OAAQC,SAAU,YAChHC,WAAY,CAACR,gBAAiB,UAAWC,OAAQ","file":"views~component---src-pages-about-js~component---src-templates-game-post-js-a4372addfe2fa3db540c.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {roundTo} from 'utilities/Format';\r\nimport Text from 'views/Text/Text/v1/Text';\r\n\r\nimport 'rc-slider/assets/index.css';\r\nimport 'rc-tooltip/assets/bootstrap.css';\r\nimport Tooltip from 'rc-tooltip';\r\nimport Slider from 'rc-slider';\r\nimport {log} from 'utilities/Measure';\r\n\r\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\r\nconst Range = createSliderWithTooltip(Slider.Range);\r\nconst Handle = Slider.Handle;\r\n\r\nconst wrapperStyle = { width: '90%', margin: '5% auto', maxWidth:'1000px'};\r\n\r\nconst handle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <Tooltip\r\n     // prefixCls=\"rc-slider-tooltip\"\r\n      overlay={value}\r\n      visible={dragging}\r\n      placement=\"top\"\r\n      key={index}\r\n      tipProps={{visible:true}}\r\n      overlayStyle={{fontSize: '20px', borderRadius: '50%'}}\r\n    >\r\n      {/* //overlayStyle={{ fill: 'pink', stroke: 'purple'}} */}\r\n      <Handle value={value} {...restProps} >\r\n        {/* {`${value}`.length < 5 && <p style={{position: 'absolute',  top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white'}}>{value}</p>} */}\r\n      </Handle>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nconst SliderView = (props) => {\r\n  const [isFloat] = useState((`${props.step}`).includes('.'));\r\n  const onChange = (value) => {\r\n    if(isFloat){\r\n      // value = parseFloat(value.toFixed(props.dp?props.dp:1));\r\n       value = roundTo(value, props.dp || 1);\r\n     }\r\n     if(props.onInput){\r\n      // props.onInput(props.id, value, props, props.viewProps);\r\n       props.onInput( props.id,  value);\r\n     }else{\r\n       props.mergeInput(props.id, {type: 'set', path: props.id, value});\r\n     }\r\n  }\r\n  return <div style={wrapperStyle}>\r\n    {props.text && <Text>{props.text}</Text>}\r\n    <Slider min={props.min || 0} max={props.max || 1} defaultValue={props.value} step={props.step || 1} \r\n       tipFormatter={value => `${value}%`}\r\n      handle={handle} onAfterChange={onChange} \r\n      railStyle={{backgroundColor: 'purple', height: '8px'}}\r\n      dotStyle={{color: 'orange', backgroundColor: 'red', height: '30px'}}\r\n      handleStyle={{backgroundColor: 'hotpink', border: 'none', height: '25px', width: '25px', top: '-3px', position: 'relative'}}\r\n      trackStyle={{backgroundColor: 'hotpink', height: '8px'}}\r\n    \r\n      />\r\n  </div>\r\n}\r\n\r\nexport default SliderView;"],"sourceRoot":""}