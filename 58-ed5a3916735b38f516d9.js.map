{"version":3,"sources":["webpack:///./src/mycomponents/game/Views/Graph/Axis/index.js","webpack:///./src/mycomponents/game/Views/Graph/v1/GraphView.js","webpack:///./src/mycomponents/game/Views/Graph/Graph/index.js","webpack:///./src/mycomponents/game/Views/Graph/Regression/index.js","webpack:///./src/mycomponents/game/Views/Graph/Raw/index.js","webpack:///./src/mycomponents/game/Views/MathTools/LinearSystemSolver/index.js"],"names":["buildAxisOptions","keys","Array","isArray","map","k","label","value","pickDimension","dimensions","IV","DV","AxisHoc","View","props","useState","hashId","Math","random","dimension","setDimension","options","ivDomain","dvDomain","axis","setAxis","useEffect","ivLabel","dataset","labels","dvLabel","ivType","types","dvType","handleDimensionSelect","id","val","e","onAxisChange","renderSelect","text","Select","placeholder","onInput","className","Box","maxWidth","AXIS_RANGE","EMPTY","LAST_DOT","strokeWidth","stroke","CategoryColor","cx","cy","r","fill","colors","ev","lastVal","lastKey","DefaultDot","withTheme","datasets","setDatasets","legend","setLegend","Error","getLegend","sets","drawDatasets","plots","hash","chart","type","payload","Object","names","i","color","theme","getColor","verticalAlign","formatter","renderCategoryColorLegend","renderColorfulLegendText","views","key","draw","name","set","dataKey","custom","c","hello","getDot","yId","y2","push","data","xAxisId","yAxisId","dot","animationBegin","shape","barSize","datakey","connectNulls","entry","style","getAxisName","height","width","margin","top","right","left","bottom","strokeDasharray","viewBox","x","y","labelFormatter","v","n","p","tooltipFormatter","reversed","xReversed","allowDataOverflow","allowDataOverflowX","domain","xDomain","xType","position","yReversed","allowDataOverflowY","yDomain","yType","angle","axisY2","orientation","references","isFront","renderReferences","referenceAreas","a","y1","x1","x2","lFill","fontSize","size","ifOverflow","opacity","referenceDots","dots","d","renderReferenceDot","GraphView","drawDot","onClick","index","log","iv","allowDataOverflowIv","allowDataOverflowDv","dv","drawPlots","RegressionGraphView","reg","setReg","message","setMessage","equations","buildRegression","values","equation","calculateRegressionDataset","regs","eq","rhs","getEqSide","transformData","sort","b","filter","f","Graph","printMessages","Container","styled","div","Axis","simplifyValues","viewProps","LinearSystemSolver","coefficients","setError","eqs","counter","valid","length","latex","toLatex","generateEquations","lhs","setEquations","error","solutions","setSolutions","future","setFuture","substitute","setSubstitute","solve","setSolve","answers","hasAnswers","setHasAnswers","variables","coeffs","k2","getCoefficientVariables","checkAnswers","removeAnswer","toNum","isNaN","includes","nAnswers","roundTo","hasAllAnswers","doSolve","doSubstitute","addEquation","handleUndo","coeffKeys","slice","handleRedo","renderSolutions","list","s","listToEnglish","submitAnswers","handleEqSelectSub","item","handleEqSelectSolve","subbed","subMathEq","getVariables","handleSelectVar","solved","solveFor","handleSubstitution","getMathLogViews","LinearSystemWrapper","tag","icon","disabled","join","child","action","wrapEq","compact","out","renderViewState","mediaL"],"mappings":"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","file":"58-ed5a3916735b38f516d9.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {log} from 'utilities/Measure';\r\nimport Select from 'views/Select/v2/Select';\r\nimport Container from 'views/Container/Container.js';\r\nimport Box from 'views/Box/v1/Box';\r\n\r\n// export const buildAxisOptions = (keys, dataset) => {\r\n//     //for each key, build a label, value pair, check dataset fr labels\r\n//     return keys.map(k => {\r\n//         return {label: dataset.labels && dataset.labels[k] || k, value: k}\r\n//     })\r\n// }\r\nexport const buildAxisOptions = (keys) => {\r\n    //for each key, build a label, value pair, check dataset fr labels\r\n    if(keys && Array.isArray(keys)){\r\n        return keys.map(k => {\r\n            return {label: k, value: k}\r\n        })\r\n    }\r\n}\r\nconst pickDimension = (dimensions) => {\r\n    if(typeof dimensions === 'string'){\r\n        return dimensions;\r\n    }else{\r\n        return dimensions[0].value || dimensions[0];\r\n    }\r\n}\r\n//x, xType, y, yType, labels, domains, allowOverflow\r\nconst IV = 'iv', DV='dv';\r\nconst AxisHoc = (View) => (props) => {\r\n    const [dimension, setDimension] = useState({\r\n        [IV]: pickDimension(props[IV]),\r\n        [DV]: pickDimension(props[DV]),\r\n        hashId: Math.random() + \"\"\r\n    })\r\n    const [options, setOptions] = useState({\r\n        [IV]: buildAxisOptions(props[IV]),\r\n        [DV]: buildAxisOptions(props[DV]),\r\n    })\r\n    const [axis, setAxis] = useState({\r\n        ivDomain: props.ivDomain,\r\n            dvDomain: props.dvDomain\r\n    });\r\n    //if x and y are arrays, allows the selection of options\r\n    //builds an axis object\r\n  \r\n    useEffect(()=>{\r\n        setAxis({\r\n            [IV]: dimension[IV], [DV]: dimension[DV],\r\n            ivLabel: (props.dataset.labels && props.dataset.labels[dimension[IV]]) || dimension[IV],\r\n            dvLabel: (props.dataset.labels && props.dataset.labels[dimension[DV]]) || dimension[DV],\r\n            ivType: (props.dataset.types && props.dataset.types[dimension[IV]]) || 'number',\r\n            dvType: (props.dataset.types && props.dataset.types[dimension[DV]]) || 'number',\r\n            ivDomain: props.ivDomain,\r\n            dvDomain: props.dvDomain\r\n        })\r\n        //calculate domains?\r\n    }, [dimension])\r\n    const handleDimensionSelect = (id, val) => {\r\n        let e = {...dimension, [id]: val, hashId: Math.random() + \"\"};\r\n        // if(props.equation){\r\n        //     let regexp = new RegExp(dimension[id], 'g');\r\n        //     e.equation = `${props.equation}`.replace(regexp, val);\r\n        //     log(`axis replaced equation ${props.equation} keyword ${dimension[id]} with ${val} \r\n        //             to get ${e.equation} regexp`, regexp);\r\n        // }\r\n        if(props.onAxisChange){\r\n            props.onAxisChange(id, val);\r\n        }\r\n        setDimension(e)\r\n    }\r\n    const renderSelect = (id, options) => {\r\n        if(options && Array.isArray(options)){\r\n            let text = '';\r\n            if(id === IV){\r\n                text = 'select a value for the independent variable on the horizontal axis';\r\n            }else{\r\n                text = 'select a value for the dependent variable on the vertical axis';\r\n            }\r\n            return <Select id={id} options={options} placeholder={text}\r\n                        onInput={handleDimensionSelect} className=\"z-ui\"/>\r\n        }\r\n    }\r\n    \r\n    return <Box maxWidth=\"mediaL\">\r\n        {renderSelect(IV, options[IV])}\r\n            {renderSelect(DV, options[DV])}\r\n        {axis && <View {...props} axis={axis} id={`${props.id}-${dimension.hashId}`} {...dimension} />}\r\n    </Box>\r\n}\r\n\r\nexport default AxisHoc;","// import React, {useState, useEffect} from 'react';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {withTheme} from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {getTimeString} from 'utilities/Time';\r\nimport './styles.css';\r\nimport {log} from 'utilities/Measure';\r\n\r\nimport {\r\n    ResponsiveContainer, ComposedChart, Area, Bar,  Cell, Line, XAxis, YAxis, CartesianGrid, \r\n      ReferenceArea,ReferenceDot, Tooltip, Legend, Scatter, ReferenceLine\r\n  } from 'recharts';\r\n  const COLOR = 'yellow';\r\n  const AXIS_Y = 'y';\r\n  const AXIS_X = 'x', X_ID ='xId', Y_ID = 'yId', Y_ID2 = 'yId2';\r\n  const AXIS_RANGE = ['dataMin', 'dataMax'];\r\n  const EMPTY = {};\r\n  const LAST_DOT = {strokeWidth:\"1px\", stroke:\"white\"};\r\n  const DELAY = 1000;\r\n  const CategoryColor = (props) => {\r\n    return <circle cx={props.cx} cy={props.cy} r=\"4\" fill={props.colors[props.ev]}\r\n            {...(props.lastVal && props.lastVal === props[props.lastKey])?LAST_DOT:EMPTY}/>;\r\n  }\r\n  const DefaultDot = (props) => {\r\n    return <circle cx={props.cx} cy={props.cy} r=\"5\" fill={props.fill}  \r\n      {...(props.lastVal && props.lastVal === props[props.lastKey])?LAST_DOT:EMPTY} />\r\n   }\r\n  const GraphView = (props) => {\r\n       const [datasets, setDatasets] = useState(null);\r\n       const [legend, setLegend] = useState(null);\r\n       const [error, setError] = useState(null);\r\n      // const [hash, setHash] = useState(Math.rad)\r\n       if(!props.axis) throw Error(`Graph must have an axis in props`);\r\n\r\n       useEffect(()=>{\r\n          setLegend(getLegend());\r\n       }, [])\r\n       useEffect(()=>{\r\n        let sets = drawDatasets(props.axis, props.plots);\r\n        setDatasets(sets);\r\n        //props.plots, props.data, props.axis  have strange effects on animations and rerendering\r\n     }, [props.hash, props.plots, props.axis]);\r\n    const getLegend = () => {\r\n      //[{ value: 'item name', type: 'line', id: 'ID01' }]\r\n      if(props.legend){\r\n        switch(props.legend.type){\r\n          case 'CategoryColor':\r\n              let payload = Object.keys(props.legend.names).map((e, i) => {\r\n                return {value: props.legend.names?props.legend.names[e]:e, id: i, \r\n                    color: props.theme.getColor(props.theme, props.legend.colors[e], 'cyan')}\r\n              })\r\n              return <Legend verticalAlign=\"top\" formatter={renderCategoryColorLegend} payload={payload} />;\r\n        }\r\n      }\r\n      return  <Legend verticalAlign=\"top\" formatter={renderColorfulLegendText}  />;\r\n    }\r\n    const getDot = (key, color, custom) => { //k, color, e.custom\r\n        if(custom){\r\n          switch(custom.type){\r\n            case 'CategoryColor': \r\n              let colors = {};\r\n              for(let c in custom.colors){\r\n                colors[c] = props.theme.getColor(props.theme, custom.colors[c], 'cyan')\r\n              }\r\n              return <CategoryColor custom={custom} colors={colors}  hello=\"world\" \r\n                                          lastVal={props.lastVal} lastKey={props.lastKey} />; \r\n          }\r\n        }\r\n        return <DefaultDot fill={color} hello=\"world\" lastVal={props.lastVal} lastKey={props.lastKey} />;\r\n    }\r\n\r\n        const drawDatasets = (axis, plots) => {\r\n            if(plots){\r\n              let views = [];\r\n              plots.map(e => {\r\n                let k = e.key;\r\n                if(!k) throw Error(`all graph plots must have a key`);\r\n                let draw = e.draw?e.draw:'scatter';\r\n                let color = props.theme.getColor(props.theme, e.color, 'cyan');\r\n                let name = e.name?e.name:e.key;\r\n                let set = props.datasets && props.datasets[e.set]?props.datasets[e.set]:e.set; //regression nests its dataset\r\n                if(!set) throw Error(`all plots must point to a dataset, plot ${k} points to none`);\r\n                let dataKey = e.dataKey?e.dataKey:axis[AXIS_Y];\r\n                let custom = getDot(k, color, e.custom);\r\n                let yId = e.y2?Y_ID2:Y_ID;\r\n                switch(draw){\r\n                        case 'line':\r\n                            views.push(<Line key={k} name={name} // type=\"monotone\"\r\n                             data={set} dataKey={dataKey} \r\n                            stroke={color}  strokeWidth=\"5px\" xAxisId={X_ID} yAxisId={yId} dot={false} \r\n                            //type=\"monotoneX\" \r\n                            animationBegin={DELAY}\r\n                            />);\r\n                            break;\r\n                        case 'scatter':\r\n                            views.push(<Scatter key={k} name={name} data={set} dataKey={dataKey} \r\n                                      fill={color} shape={custom} xAxisId={X_ID} yAxisId={yId} \r\n                                      animationBegin={DELAY} \r\n                                      />)\r\n                              break;\r\n                        case 'bar':\r\n                            views.push(<Bar key={k} name={name} data={set} dataKey={dataKey} \r\n                               fill={color} //shape={custom} \r\n                                xAxisId={X_ID} yAxisId={yId} \r\n                                animationBegin={DELAY} barSize={100}\r\n                                />)\r\n                            break;\r\n                        case 'area':\r\n                          views.push(<Area key={k} name={name} data={set} dataKey={datakey} xAxisId={X_ID} yAxisId={yId} \r\n                                type=\"natural\" fill={color} stroke={color} connectNulls animationBegin={DELAY}\r\n                               />)\r\n                          break;\r\n                        default:\r\n                          return;\r\n                }\r\n              })\r\n              return views;\r\n            }\r\n            return null;\r\n        }\r\n        const renderColorfulLegendText = (value, entry) => {\r\n          let { color } = entry;\r\n          if(!color) color = props.color?props.color[value]:COLOR;\r\n          return <span style={{ color }}>{value}</span>;\r\n        }\r\n        const renderCategoryColorLegend = (value, entry) => {\r\n          return <span id={entry.id} key={entry.key} style={{color: entry.color }}>{entry.value}</span>\r\n        }\r\n        const renderTimeText = (value, entry) => {\r\n          //TODO possible optimization of storing date string in data, not in time form\r\n          return getTimeString(value);\r\n        }\r\n        const renderMessages = () => {\r\n          if(props.messages){\r\n            if(Array.isArray(props.messages)) return props.messages.map(e => {\r\n              return <p style={{color: 'cyan'}}>{e}</p>\r\n            })\r\n            return <p style={{color: 'cyan'}}>{props.messages}</p>\r\n          }\r\n        }\r\n        const renderReferences = (references) => {\r\n          if(references){\r\n            return references.map(r => {\r\n              if(r.x || r.x === 0){\r\n                return   <ReferenceLine yAxisId={Y_ID} xAxisId={X_ID} x={r.x} \r\n                label={{value: r.label,  angle: 270, fill: r.color?r.color:'red'}} \r\n                stroke={r.color?r.color:'red'} strokeDasharray=\"3 3\" isFront />\r\n              }else if(r.y || r.y === 0){\r\n                return   <ReferenceLine yAxisId={Y_ID} xAxisId={X_ID} y={r.y} \r\n                    label={{value: r.label,  angle: 270, fill: r.color?r.color:'red'}} \r\n                    stroke={r.color?r.color:'red'} strokeDasharray=\"3 3\" isFront />\r\n              }\r\n             \r\n            })\r\n          }\r\n        }\r\n        const formatLabel = (v, n, p) => {\r\n          //debugger;\r\n          //return props.axis.y + \": \" + v;\r\n          return null;\r\n        };\r\n        const renderReferenceDot = (dots) => {\r\n          if(dots) {\r\n            return dots.map(d => {\r\n              return <ReferenceDot x={d.x} y={d.y} r={d.r?d.r:10} fill={d.fill?d.fill:'red'} \r\n                        strokeWidth=\"5px\" stroke={d.stroke?d.stroke:'transparent'} strokeDasharray=\"3 3\"\r\n                        label={{position: d.p?d.p:'center', value: d.label, fill: d.lFill?d.lFill:'white', fontSize: d.size?d.size:'16px'}} \r\n                        yAxisId={Y_ID} xAxisId={X_ID} opacity={d.opacity?d.opacity:0.5} isFront />\r\n            });\r\n          }\r\n        }\r\n        const renderReferenceAreas = (areas) => {\r\n            return areas.map(a => {\r\n              //props.referenceAreas\r\n              return <ReferenceArea y1={a.y1} y2={a.y2} x1={a.x1} x2={a.x2} \r\n                      label={{position: a.p?a.p:'center', value: a.label, fill: a.lFill?a.lFill:'white', fontSize: a.size?a.size:'16px'}} \r\n                      ifOverflow=\"hidden\" fill={a.fill?a.fill:'pink'} opacity={a.opacity?a.opacity:0.1}\r\n                      yAxisId={Y_ID} xAxisId={X_ID} isFront/>\r\n            })\r\n        }\r\n        const getAxisName = (axis) => {\r\n          return props.axis[props.axis[axis]]?props.axis[props.axis[axis]]:props.axis[`${axis}Name`]?props.axis[`${axis}Name`]:props.axis[axis];\r\n        }\r\n        const makeResponsive = (chart) => {\r\n          return <ResponsiveContainer key={`${props.id}-container`}>\r\n            {chart}\r\n          </ResponsiveContainer>\r\n        }\r\n\r\n          return (\r\n            <div key={props.id} style={{height: '100%', width: '100%'}}>\r\n              {makeResponsive(<ComposedChart key={`${props.id}-chart`}\r\n                margin={{\r\n                  top: 20, right: 10, left:20, bottom: 35,\r\n                }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <Tooltip viewBox={{ x: 0, y: 0, width: 200, height: 200 }} labelFormatter={formatLabel}  \r\n                        formatter={props.tooltipFormatter} />\r\n                <XAxis dataKey={props.axis[AXIS_X]} \r\n                      xAxisId={X_ID} reversed={props.axis.xReversed}\r\n                      allowDataOverflow={props.axis.allowDataOverflowX?props.axis.allowDataOverflowX:false}\r\n                      domain={props.axis.xDomain?props.axis.xDomain:AXIS_RANGE}\r\n                      type={props.axis.xType?props.axis.xType:'category'}\r\n                      label={{value: getAxisName(AXIS_X), fill: 'white', position: 'bottom'}} \r\n                      //tickFormatter={props.axis.x === 'time'?renderTimeText:null} \r\n                      />\r\n                <YAxis yAxisId={Y_ID} reversed={props.axis.yReversed}\r\n                      allowDataOverflow={props.axis.allowDataOverflowY?props.axis.allowDataOverflowY:false}\r\n                      domain={props.axis.yDomain?props.axis.yDomain:AXIS_RANGE} \r\n                      type={props.axis.yType?props.axis.yType:'category'}\r\n                      label={{value: getAxisName(AXIS_Y), angle: -90, fill: 'white', position: 'right',\r\n                      }} />\r\n                {props.axisY2 && <YAxis yAxisId={Y_ID2}\r\n                  orientation=\"right\" //mirror\r\n                  dataKey={props.axisY2.dataKey}\r\n                  domain={props.axisY2.domain?props.axisY2.domain:AXIS_RANGE} \r\n                  type={props.axisY2.type?props.axisY2.type:'category'}\r\n                  label={{value: props.axisY2.label, angle: -90, fill: 'white', position: 'left'}}\r\n                />}\r\n                {legend && legend}\r\n                {datasets && datasets}\r\n                {props.references && renderReferences(props.references)}\r\n                {props.referenceAreas && renderReferenceAreas(props.referenceAreas)}\r\n                {props.referenceDots && renderReferenceDot(props.referenceDots)}\r\n              </ComposedChart>)}\r\n          </div>\r\n          );\r\n\r\n  }\r\n  \r\n  \r\n  export default withTheme(GraphView);\r\n//dont map datasets to x and y, they are designed to point to keys for the datanames\r\n  GraphView.propTypes = {\r\n    plots: PropTypes.array,\r\n    names: PropTypes.object, //the visible names of dataset points viewable in legend and tooltip\r\n    axis: PropTypes.shape({\r\n      x:PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.bool\r\n      ]),\r\n      y:PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.bool\r\n      ])\r\n    }).isRequired\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    ResponsiveContainer, ComposedChart, Area, Bar,  Cell, Dot, Line, XAxis, YAxis, CartesianGrid, \r\n      ReferenceArea,ReferenceDot, Tooltip, Legend, Scatter, ReferenceLine\r\n} from 'recharts';\r\nimport Axis from './../Axis/index';\r\nimport {log} from 'utilities/Measure';\r\n\r\nconst X_ID ='iv', Y_ID = 'dv';\r\nconst AXIS_RANGE = ['dataMin', 'dataMax'];\r\n\r\nconst GraphView =  (props) => {\r\n    const drawDot = (onClick) => (p, index) => {\r\n        //log(`graph drawDot index ${index} onClick ${onClick} point`, p);\r\n        if(onClick){\r\n            return <circle cx={p.x} cy={p.y} r=\"8\" fill={p.fill} stroke=\"white\" strokeWidth=\"3\" />\r\n        }else{\r\n            return <circle cx={p.x} cy={p.y} r=\"8\" fill={p.fill} />\r\n        }\r\n       \r\n    }\r\n    const drawPlots = (plots) => {\r\n        if(plots){\r\n            return plots.map(p => {\r\n                let {key, name, color, type, dataKey, custom, set, onClick} = p;\r\n                let y = dataKey || props.axis.dv;\r\n                if(!set) set = props.dataset.data;\r\n                switch(type){\r\n                    case 'line':\r\n                        return <Line key={key} name={name || key} data={set} dataKey={y} stroke={color || 'red'}  \r\n                                    strokeWidth=\"5px\" xAxisId={X_ID} yAxisId={Y_ID} dot={false} \r\n                                    onClick={onClick} //strokeDasharray=\"5 5\"\r\n                        />;\r\n                        break;\r\n                    case 'scatter':\r\n                        return <Scatter key={key} name={name || key} data={set} dataKey={y} \r\n                                  fill={color} shape={custom || drawDot(onClick)} \r\n                                  xAxisId={X_ID} yAxisId={Y_ID}\r\n                                  onClick={onClick} \r\n                                  />\r\n                          break;\r\n                    case 'bar':\r\n                        return <Bar key={key} name={name || key} data={set} dataKey={y} fill={color} //shape={custom} \r\n                                xAxisId={X_ID} yAxisId={Y_ID} barSize={100}\r\n                            />\r\n                        break;\r\n                    case 'area':\r\n                       return <Area key={key} name={name || key} data={set} dataKey={y} xAxisId={X_ID} yAxisId={Y_ID} \r\n                            type=\"natural\" fill={color} stroke={color} connectNulls \r\n                           />\r\n                      break;\r\n                    default:\r\n                      return;\r\n            }\r\n            })\r\n        }\r\n    }\r\n    // const getTooltip = (value, name, props) => {\r\n    //     log(`Graph getTooltip value`, value);\r\n    //     log(`Graph getTooltip name`, name);\r\n    //     log(`Graph getTooltip props`, props);\r\n    // }\r\n    const getLegend = () => {\r\n        return  <Legend verticalAlign=\"top\" formatter={renderColorfulLegendText}  />;\r\n      }\r\n      const renderColorfulLegendText = (value, entry) => {\r\n        let { color } = entry;\r\n        if(!color) color = props.color?props.color[value]:'red';\r\n        return <span style={{ color }}>{value}</span>;\r\n      }\r\n        const getAxisType = (key) => {\r\n            if(props.axis.types && props.axis.types[key]) return props.axis.types[key];\r\n        }\r\n        log(`graph view props`, props);\r\n        return (\r\n            <ResponsiveContainer key={`${props.id}-container`} id={`${props.id}-container`}>\r\n            <ComposedChart key={`${props.id}-chart`}\r\n                margin={{\r\n                    top: 20, right: 10, left:20, bottom: 35,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                {/* <Tooltip contentStyle={{backgroundColor: 'black'}} labelStyle={{color: 'white'}} /> */}\r\n                <XAxis xAxisId={X_ID}\r\n                        dataKey={props.axis.iv} \r\n                        allowDataOverflow={props.axis.allowDataOverflowIv || false}\r\n                        domain={props.axis.ivDomain || AXIS_RANGE}\r\n                        type={props.axis.ivType || 'number'}\r\n                        label={{value: props.axis.ivLabel || X_ID, fill: 'white', position: 'bottom'}} \r\n                    />\r\n                <YAxis yAxisId={Y_ID}\r\n                        //dataKey={props.axis.dv}  this forces dataset to use same datakey\r\n                        allowDataOverflow={props.axis.allowDataOverflowDv || false}\r\n                        domain={props.axis.dvDomain || AXIS_RANGE} \r\n                        type={props.axis.dvType || 'number'}\r\n                        label={{value: props.axis.dvLabel || Y_ID, angle: -90, fill: 'white', position: 'right'}} \r\n                    />\r\n                {getLegend()}\r\n                {drawPlots(props.plots)}\r\n            </ComposedChart>\r\n        </ResponsiveContainer>\r\n        )\r\n}\r\n\r\nexport default GraphView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport GraphView from 'game/Views/Graph/v1/GraphView.js';\r\nimport Graph from 'game/Views/Graph/Graph/index';\r\nimport Axis from 'game/Views/Graph/Axis/index';\r\nimport Loading from 'views/Loading/v1/Loading.js';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport {sendError} from 'utilities/Measure.js';\r\nimport {getEqSide} from 'utilities/Format.js';\r\nimport {log} from 'utilities/Measure.js';\r\nimport {transformData, saveMath, getRegressionSlope, evaluate, toLatex, executeNerdamer, \r\n    subMathEq, getVariables, solveFor, getTerms, getNumbers, operate} from 'utilities/Game/MathFun';\r\n//display DV variables\r\n//display dropdown with 2 submenus for IV and factors\r\n\r\nconst colors = [\r\n    {dataset: '#6729D9',  regression: 'purple'},\r\n    {dataset: '#FF5E3F', regression: '#EB557D'},\r\n    {dataset: '#39DADB',  regression: '#7FC4DB'},\r\n    {dataset: '#B0FFBF',  regression: '#FFFE81'},\r\n    {dataset: '#FFBD6C',  regression: '#FF9E33'},\r\n    {dataset: '#FEDFBA', regression: '#7FC4DB'},\r\n    {dataset: '#FF8D7C',  regression: '#FF5B43'},\r\n    {dataset: '#FF90C2',  regression: '#FF60AA'},\r\n]\r\nconst RegressionGraphView = (props) => {\r\n    const [reg, setReg] = useState(null);\r\n    const [message, setMessage] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        log(`math GetValue  regression useEffect regression equation ${props.equations}`, props);\r\n        setMessage(null);\r\n        if(props.equations){\r\n            buildRegression(Array.isArray(props.equations)?props.equations:[props.equations], props.axis, props.dataset, props.values);\r\n        }else if(!props.equations && reg){\r\n            setReg(null);\r\n        }\r\n       \r\n    }, [\r\n        props.axis,\r\n        props.equations,\r\n        props.dataset,\r\n        props.values\r\n    ]);\r\n    const shouldMakeRegression = (equation, axis) => {\r\n        log(`math GetValue  regression shouldMakeRegression? axis`, axis);\r\n        let valid = true;\r\n        if(!equation ||equation.length === 0) return false;\r\n        let iv = axis.iv;\r\n        let dv = axis.dv;\r\n        let lhs = getEqSide(eq, 0);\r\n        let rhs = getEqSide(eq, 1);\r\n        let bIv = rhs.indexOf(iv) > -1;\r\n        let bDv = dv === lhs;\r\n        let doMake = bDv && bIv;\r\n        log(`math GetValue  regression iv ${iv} lhs ${lhs} bIv ${bIv} dv ${dv} rhs ${rhs} bDv ${bDv} doMake ${doMake}`);\r\n        return doMake;\r\n    }\r\n    const buildRegression = async (equation, axis, dataset, values) => {\r\n        //determine if regression is suitable for this equation iv dv combo\r\n        //if so make a regression dataset \r\n        setMessage(null);\r\n        // if(shouldMakeRegression(equation, axis)){\r\n        //     let data = calculateRegressionDataset(equation, axis, dataset, values);\r\n        // }\r\n        calculateRegressionDataset(equation, axis, dataset, values);\r\n    }\r\n    const calculateRegressionDataset = (equation, axis, dataset, values) => {\r\n        let regs = equation.map((e, i) => {\r\n            log(`Math GetValue regression calculateRegressionDataset equation`, e);\r\n            let eq = e.eq;\r\n            let rhs = getEqSide(eq, 1);\r\n            let data = dataset.data;\r\n            \r\n            log(`Math GetValue regression calculateRegressionDataset dataset`, data);\r\n            try{\r\n                let reg = transformData(rhs, data, values);\r\n                log(`Math GetValue regression calculateRegressionDataset regression`, reg);\r\n                let set = reg.map((r, i) => {\r\n                    return {[axis.dv]: r, [axis.iv]: data[i][axis.iv]}\r\n                })\r\n                set.sort((a, b) => {\r\n                    return a[axis.iv] - b[axis.iv]\r\n                })\r\n                log(`Math GetValue regression calculateRegressionDataset set`, set);\r\n                return {type: 'line', key: e.name || `regression ${i}`, color: e.color || 'pink', set, name: e.name || `regression ${i}`};\r\n            }catch(e){\r\n                log(`Math GetValue regression calculateRegressionDataset error`, e);\r\n                return null;\r\n            }\r\n\r\n        })\r\n        setReg(regs.filter(f => f));\r\n    }\r\n\r\n    const printMessages = () => {\r\n        if(message){\r\n            return <Text text={message} color=\"red\" />\r\n        }\r\n    }\r\n    const getPlots = () => {\r\n        let plots = [];\r\n        if(props.plots) plots = [...props.plots];\r\n        if(reg){\r\n            plots = [...plots, ...reg];\r\n        }; //if equation is null, skip\r\n        log(`Math GetValue regression getPlots`, plots);\r\n        log(`Math GetValue regression reg`, reg);\r\n        return plots;\r\n    }\r\n    log(`axis replaced Math GetValue regression props`, props);\r\n    return (\r\n        <Container id={`${props.id}-reg`} className={`${props.className?props.className:''} maxWidth-large item-large`}>\r\n           \r\n            {/* {!reg &&  <div style={{...loadingStyles}}  >\r\n                            <Loading length={\"30px\"} height={HEIGHT} />\r\n             </div>}\r\n            {reg && <Graph \r\n                id=\"regression-graph\"\r\n                iv={props.iv}\r\n                dv={props.dv}\r\n                plots={getPlots()}\r\n                dataset={props.dataset}\r\n                axis={props.axis}\r\n            />} */}\r\n            <Graph \r\n                id={`${props.id}-graph`}\r\n                iv={props.iv}\r\n                dv={props.dv}\r\n                plots={getPlots()}\r\n                dataset={props.dataset}\r\n                axis={props.axis}\r\n            />\r\n             {printMessages()}\r\n        </Container>\r\n    )\r\n\r\n}\r\n//<RawGraph id=\"main-graph-test\" x={'lum'} y={buildAxisOptions(['lum', 'cth'], dataset)} plots={plots} dataset={dataset} />\r\n//<Graph {...props} />\r\nconst HEIGHT = '300px';\r\nconst WRAPPER_HEIGHT = '500px';\r\nconst loadingStyles = {position: 'relative', height: `330px`};\r\n\r\nRegressionGraphView.propTypes = {\r\n    //dataDefaults\r\n    //dataset\r\n    //equation\r\n\r\n    // axis: PropTypes.shape({\r\n    //     x: PropTypes.string.isRequired,\r\n    //     y: PropTypes.string.isRequired\r\n    // }).isRequired,\r\n    // dataset:PropTypes.array.isRequired,\r\n    // regressionId: PropTypes.string,\r\n    // regression: PropTypes.string,\r\n    // datasetKey: PropTypes.string,\r\n    // defaultData: PropTypes.object, //any default measurements the sim wants to pass in\r\n    // skipScatterPlot: PropTypes.bool\r\n    // iv: PropTypes.string.isRequired,\r\n    // dv: PropTypes.string.isRequired //what the equations are equal to\r\n}\r\n\r\nexport default RegressionGraphView;\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    max-width: 100%;\r\n    width:100%;\r\n    height:100%;\r\n`\r\n// height: ${props => props.height || '100%'};","import React, {useState, useEffect} from 'react';\r\nimport Axis from './../Axis/index';\r\n//import Graph from './../Graph/index';\r\nimport Graph from './../Regression/index';\r\nimport {getPar, simplifyValues} from 'utilities/Format.js';\r\nimport {log} from 'utilities/Measure';\r\n\r\nconst RawGraph =  (props) => {\r\n    const [values] = useState(simplifyValues(props.values));\r\n    return <div id={`${props.id}-raw-graph`} \r\n    style={{width:'100%', height: props.height || '300px'}} \r\n    className={`${props.className?props.className:''} maxWidth-full`}>\r\n        {/* <Graph {...props} /> */}\r\n        <Graph \r\n            id={`${props.id}-raw-graph-reg`} key={`raw-graph-reg`} \r\n            //id={`${props.id}-raw-graph-reg`} key={`${props.id}-raw-graph-reg`} \r\n            className='item-large z-mid' \r\n            axis={props.axis}\r\n            dv={props.dv}\r\n            iv={props.iv}\r\n            dataset={props.dataset}\r\n            viewProps={props.viewProps} \r\n            equations={props.equations} \r\n            plots={props.plots}\r\n            values={values}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default Axis(RawGraph);","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {solveFor, toLatex, getVariables, subMathEq, toNum, solveEquations} from 'utilities/Game/MathFun';\r\nimport {getMathLogViews} from 'utilities/Views';\r\nimport {log} from 'utilities/Measure';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport TextStr from 'views/Text/Text/v1/Text.js';\r\nimport Button from 'views/Button/v1/Button';\r\nimport Select from 'views/Select/v2/Select';\r\nimport {getEqSide, roundTo, listToEnglish} from 'utilities/Format';\r\nimport IconBtn from 'views/IconButton/v1/IconButton';\r\nimport {scoreDistance} from 'utilities/Game/Scoring';\r\nimport './styles.css';\r\n\r\nexport const TEST_COEFFS = [\r\n    [2, 1, 3],\r\n    [1, -1, -1],\r\n    [3, -2, 3]\r\n]\r\n\r\nexport const TEST_VAR = ['x', 'y', 'z'];\r\n\r\n//export const TEST_RHS = 0;\r\nexport const TEST_RHS = [-2, -3, -12];\r\n\r\n// const generateEquations = (coefficients, rhs) => {\r\n//     let eqs = [];\r\n//     let eq = '', counter = 0;\r\n//     coefficients.map((e, i) => {\r\n//         eq = rhs[i] + ' = ';\r\n//         counter = 0;\r\n//         for(let k in e){\r\n//             if(counter > 0) eq += ' + ';\r\n//             eq += `${e[k]}*${k}`;\r\n//             counter++;\r\n//         }\r\n//         eqs.push({equation: {eq, latex: toLatex(eq)}});\r\n//     });\r\n//     log(`tree solve LinearSystemSolve generateEquations eqs`, eqs);\r\n//     return eqs\r\n// }\r\nconst generateEquations = (coefficients, rhs, setError) => {\r\n    let eqs = [];\r\n    let eq = '', counter = 0, e;\r\n    let i = 0;\r\n    let valid = true;\r\n    if((rhs || rhs === 0) && valid){\r\n        for(let c in coefficients){\r\n            e = coefficients[c];\r\n            log(`tree solve LinearSystemSolve generateEquations coefficients ${c} e`, e);\r\n            if(Object.keys(e).length > 0){\r\n                eq = rhs[i] + ' = ';\r\n                counter = 0;\r\n                for(let k in e){\r\n                    if(counter > 0) eq += ' + ';\r\n                    eq += `${e[k]}*${k}`;\r\n                    counter++;\r\n                }\r\n                log(`tree solve LinearSystemSolve generateEquations eq`, eq);\r\n                eqs.push({equation: {eq, latex: toLatex(eq)}});\r\n                i++;\r\n            }else{\r\n                valid = false;\r\n                eqs = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    log(`tree solve LinearSystemSolve generateEquations eqs`, eqs);\r\n    return eqs;\r\n}\r\n//list isolated vars\r\n//list eqs\r\nconst getCoefficientVariables = (coeffs) => {\r\n    log(`tree solve LinearSystemSolve getCoefficientVariables coeffs`, coeffs);\r\n    let variables = {};\r\n    for(let key in coeffs){\r\n        for(let k2 in coeffs[key]){\r\n            variables[k2] = true;\r\n        }\r\n    }\r\n    return Object.keys(variables);\r\n}\r\n\r\nconst ID_SELECT_EQ = 'selectEq', ID_SELECT_VAR = 'selectVar', ID_SELECT_SUB = 'selectSub';\r\nconst LinearSystemSolver = (props) => {\r\n    log(`LinearSystemSolver props`, props);\r\n  \r\n    const [equations, setEquations] = useState(generateEquations(props.coefficients, props.lhs));\r\n    const [error, setError] = useState(equations.length === 0?`Cannot solve your equations in this state.\r\n    Try adding more variables and setting a value to the left hand side of the equation.`:null);\r\n    const [solutions, setSolutions] = useState(null);\r\n    const [future, setFuture] = useState([]);\r\n    const [substitute, setSubstitute] = useState(null);\r\n    const [solve, setSolve] = useState(null);\r\n  \r\n    const [answers, setAnswers] = useState({});\r\n    const [hasAnswers, setHasAnswers] = useState(false);\r\n    const [variables] = useState(getCoefficientVariables(props.coefficients));\r\n\r\n    useEffect(()=>{\r\n        log(`tree solve LinearSystemSolve props`, props);\r\n        log(`tree solve LinearSystemSolve equations`, equations);\r\n        log(`tree solve LinearSystemSolve variables`, variables);\r\n        // try{\r\n        //     let s = solveEquations([...equations.map(e => e.equation.eq)]);\r\n        //     log(`tree solve LinearSystemSolve auto solved`, s);\r\n        //     setSolutions(s);\r\n        // }catch(e){\r\n        //     log(`tree solve LinearSystemSolve error`, e);\r\n        //     setError('error auto solving');\r\n        // }\r\n\r\n    }, [])\r\n    const checkAnswers = (eq, removeAnswer) => {\r\n        let lhs = getEqSide(eq, 0);\r\n       try{\r\n            let rhs = toNum(getEqSide(eq, 1));\r\n            log(`tree solve LinearSystemSolvelhs ${lhs} rhs is Nan? ${isNaN(rhs)}`, rhs);\r\n            if(variables.includes(lhs) && !isNaN(rhs)){\r\n                //is a numerical answer for a variable\r\n                let nAnswers = {...solutions};\r\n                if(removeAnswer){\r\n                    delete nAnswers[lhs];\r\n                    //setAnswers(nAnswers);\r\n                }else{\r\n                    nAnswers[lhs] = roundTo(rhs, 4);\r\n                    let hasAllAnswers = true;\r\n                    variables.map(e => {\r\n                        if(!(nAnswers[e] || nAnswers[e] === 0)){\r\n                            hasAllAnswers = false;\r\n                        }\r\n                    });\r\n                    if(hasAllAnswers){\r\n                        setHasAnswers(true);\r\n                    }\r\n                }\r\n                //setAnswers(nAnswers);\r\n                setSolutions(nAnswers);\r\n                log(`tree solve LinearSystemSolve nAnswers`, nAnswers);\r\n            }\r\n       }catch(e){\r\n           log(`tree solve LinearSystemSolve checkAnswers is false, error`, e);\r\n       }\r\n    }\r\n    const doSolve = () => {\r\n       // setViewData({solve: true, substitute: false});\r\n        setSolve([]);\r\n        setSubstitute(null);\r\n    }\r\n    const doSubstitute = () => {\r\n       setSubstitute([])\r\n       setSolve(null);\r\n    }\r\n\r\n    const addEquation = (eq) => {\r\n        setEquations([\r\n            ...equations,\r\n            eq\r\n        ])\r\n    }\r\n    const renderViewState = () => {\r\n        if(solutions && hasAnswers){\r\n           return <div className=\"text-center\">\r\n                {solutions && renderSolutions()}\r\n                {solutions && <div className=\"text-center\">\r\n                    {/* <Button className=\"text-center\" onInput={handleAnswer} compact>yes</Button> */}\r\n                    <Button compact onInput={submitAnswers}>Use these solutions</Button>\r\n                    <Button className=\"text-center\" compact onInput={()=>{\r\n                        handleUndo();\r\n                        setHasAnswers(false);\r\n                    }}>no</Button>\r\n                </div>}\r\n           </div>\r\n        }else if(solve && solve.length === 1){ //an equation has been selected, select a var for it\r\n            let variables = getVariables(solve[0].eq);\r\n            return <div className=\"text-center\">\r\n                <TextStr className=\"text-center\">Select the variable to solve for</TextStr>\r\n                {variables.map(v => {\r\n                return <Button id={ID_SELECT_VAR} onInput={handleSelectVar} compact out={v}>{v}</Button>\r\n                })}\r\n            </div>\r\n        }else if(error){\r\n            return <div className=\"text-center\">\r\n                <TextStr color=\"red\" className=\"text-center block\">{error}</TextStr>\r\n                <Button onInput={()=>{\r\n                    setSolve(null);\r\n                    setSubstitute(null);\r\n                    setError(null);\r\n                    }} compact>Okay</Button>\r\n            </div>\r\n        }else if(substitute){\r\n            return <div className=\"text-center\">\r\n                {substitute.length === 0 && <TextStr className=\"text-center block\">Select the equation to substitute from</TextStr>}\r\n                {substitute.length === 1 && <TextStr className=\"text-center block\">Select the equation to substitute into</TextStr>}\r\n            </div>\r\n        }else{\r\n            //substitute.length\r\n            return <div className=\"text-center\">\r\n                <Button onInput={doSubstitute} compact>Substitute</Button>\r\n                <Button onInput={doSolve} compact>Solve</Button>\r\n            </div>\r\n        }\r\n    }\r\n    const renderAnswers = () => {\r\n        let str = 'answers: ';\r\n        let counter = 0;\r\n        // for(let k in answers){\r\n        //     if(counter > 0) str += \", \";\r\n        //     str += `${k}=${answers[k]}`;\r\n        //     counter++;\r\n        // }\r\n        for(let k in solutions){\r\n            if(counter > 0) str += \", \";\r\n            str += `${k}=${solutions[k]}`;\r\n            counter++;\r\n        }\r\n        return counter > 0?<TextStr className=\"text-center\">{str}</TextStr>:null;\r\n    }\r\n    const handleUndo = () => {\r\n        let coeffKeys = Object.keys(props.coefficients);\r\n        log(`tree solve linearsystemsolver handleUndo equations length ${equations.length} coeff length ${coeffKeys.length}`);\r\n        if(equations.length > coeffKeys.length){\r\n            let eq = equations[equations.length - 1];\r\n            checkAnswers(eq.equation.eq, true);\r\n            setFuture([eq, ...future])\r\n            setEquations(equations.slice(0, -1));\r\n        }\r\n    }\r\n    const handleRedo = () => {\r\n        if(future.length > 0){\r\n            let eq = future[0];\r\n            checkAnswers(eq.equation.eq, false);\r\n            setEquations([...equations, eq]);\r\n            setFuture(future.slice(1));\r\n        }\r\n    }\r\n    const renderUndoRedo = () => {\r\n        return <div className=\"text-center\">\r\n            <IconBtn id=\"btn-undo\" key=\"btn-undo\" icon=\"icon-undo2\" fontSize=\"s\"  onInput={handleUndo} \r\n                disabled={equations.length <= props.coefficients.length}/>\r\n            <IconBtn id=\"btn-redo\" key=\"btn-redo\" icon=\"icon-redo2\" fontSize=\"s\"  onInput={handleRedo} \r\n                    disabled={future.length === 0} />\r\n        </div>\r\n    }\r\n    const renderSolutions = ()=>{\r\n        log(`tree solve renderSolutions solutions`, solutions);\r\n        log(`tree solve renderSolutions answers`, answers);\r\n        let list = [];\r\n        for(let k in solutions){\r\n            list.push(`the ${k} to equal ${solutions[k]}`);\r\n        }\r\n        let s = 'So I need the ' + listToEnglish(list);\r\n        return <TextStr id=\"lss-auto-solutions\" className=\"text-center\">{s}</TextStr>\r\n    }\r\n    const handleAnswer = () => {\r\n        if(props.onInput){\r\n            props.onInput(props.id, solutions);\r\n        }\r\n    }\r\n    const submitAnswers = () => {\r\n        props.onInput(props.id, solutions);\r\n    }\r\n    const handleEqSelectSub = (id, val) => {\r\n        let item = equations[id].equation;\r\n        let lhs = getEqSide(item.eq, 0);\r\n        if(variables.includes(lhs)){\r\n           setSubstitute([item]);\r\n           setSolve(null);\r\n        }else{\r\n            setError('The equation you select must have only 1 variable on the left hand side')\r\n        }\r\n    }\r\n    const handleEqSelectSolve = (id, val) => {\r\n        let item = equations[id].equation;\r\n        if(substitute && substitute[0]){\r\n            //get lhs and rhs subMathEq = (eq, constants, useLatex)\r\n            let lhs = getEqSide(substitute[0].eq, 0);\r\n            let rhs = getEqSide(substitute[0].eq, 1);\r\n            if(item.eq.includes(lhs)){\r\n                let subbed = subMathEq(item.eq, {[lhs]: rhs}, true);\r\n                checkAnswers(subbed);\r\n                addEquation({equation: subbed, \r\n                text: [{text: `substituted ${lhs} for `}, {latex: getEqSide(substitute[0].latex, 1)},\r\n                            {text: `in equation ${item.index}`}]\r\n            })\r\n            }else{\r\n                //setViewData({err: `equation must have matching variable ${lhs} to be substituted into`});\r\n                setError(`equation must have matching variable ${lhs} to be substituted into`)\r\n            }\r\n        }else{\r\n            let v = getVariables(item.eq);\r\n            if(v.length === 0){\r\n                setError('no variables to choose in that equation');\r\n            }else{\r\n                setSolve([...solve, item])\r\n            }\r\n        }\r\n    }\r\n    const handleSelectVar = (id, val) => {\r\n       try{\r\n        let solved = solveFor(solve[0].eq, val);\r\n        log(`tree solve LinearSystemSolve onSelect solved`, solved);\r\n        checkAnswers(`${val}=${solved[0].eq}`);\r\n        addEquation({equation: {eq: `${val}=${solved[0].eq}`, latex: `${val}=${solved[0].latex}`}, \r\n        text: [{text:'solved for ' + val + ' in equation ', className: 'inline'}, {latex: solve[0].latex}, \r\n                {text: 'to get:', className: 'block'}]})\r\n        setSubstitute(null);\r\n        setSolve(null);\r\n       }catch(e){\r\n        setError('error trying to solve that')\r\n       }\r\n\r\n    }\r\n    const handleSubstitution = (id, val) => {\r\n        let item = equations[id].equation;\r\n        let lhs = getEqSide(substitute[0].eq, 0);\r\n        let rhs = getEqSide(substitute[0].eq, 1);\r\n        let rhsLatex = getEqSide(substitute[0].latex, 1);\r\n        if(item.eq.includes(lhs)){\r\n            let subbed = subMathEq(item.eq, {[lhs]: rhs}, true);\r\n            checkAnswers(subbed.eq);\r\n            addEquation({\r\n                    equation: subbed, \r\n                    text: [{text: `substituted ${lhs} for `, className:'inline'}, \r\n                            {latex: getEqSide(substitute[0].latex, 1)},\r\n                            {text: `in equation `, className:'inline'}, {latex: item.latex},\r\n                            {text: 'to get:', className: 'block'}\r\n                    ]\r\n                }\r\n            )\r\n            setSubstitute(null);\r\n            setSolve(null);\r\n        }else{\r\n           setError(`equation must have matching variable ${lhs} to be substituted into`)\r\n        }\r\n    }\r\n    const renderInstructions = () => {\r\n        {solve && <TextStr className=\"text-center\">Pick an equation to solve</TextStr>}\r\n        {substitute && substitute.length === 0 && <TextStr className=\"text-center\">Pick an variable you'd like to substitute in</TextStr>}\r\n        {substitute && substitute.length === 1  && <TextStr className=\"text-center\">Pick the equation you'd like to substitute the variable into</TextStr>}\r\n        return <TextStr  className=\"text-center\">Solve and substitute the linear equations to derive\r\n                    solutions for the variables {variables.join()}</TextStr>\r\n    }\r\n    const wrapEq = (e, child) => {\r\n        let action = null;\r\n        if(substitute && substitute.length === 1){\r\n            action= handleSubstitution;\r\n        }else if(substitute && substitute.length === 0){\r\n            action = handleEqSelectSub;\r\n        }else if(solve && solve.length === 0){\r\n            action = handleEqSelectSolve;\r\n        }\r\n        return <Button key={e.key} id={e.index} onInput={action} disabled={action?false:true} className=\"text-left\">\r\n                    {child}\r\n                </Button>\r\n    }\r\n    log(`LinearSystemSolver rendering equations`, equations);\r\n    if(!error && equations && equations.length > 0){\r\n        let v = getMathLogViews(equations, true, true, true);\r\n        return <LinearSystemWrapper>\r\n            <TextStr tag=\"h2\" className=\"text-center\">Solve the System of Equations</TextStr>\r\n    \r\n            {/* {hasAnswers && <TextStr color=\"yellow\" className=\"text-center\">has all answers</TextStr>} */}\r\n            {renderUndoRedo()}\r\n            {/* <Text id=\"linear-system-solver\" onInput={handleEqSelect} text={getMathLogViews(equations, true, true, true, 'bg-red avoid-clicks')} /> */}\r\n            {renderInstructions()}\r\n            <div>\r\n            \r\n             \r\n                {v.map((e, i) => {\r\n                    log(`tree solve rendering equation ${i}`, e);\r\n                    if(e.eq){\r\n                        return wrapEq(e, <Text id={`lss-eq-${i}`} text={[e]}  className=\"text-left block\"/>)\r\n                    }else{\r\n                        return <Text key={`lss-text-${i}`} id={`lss-text-${i}`} text={[e]}  className=\"text-left inline\"/>\r\n                    }\r\n                    \r\n                })}\r\n            </div>\r\n            {renderViewState()}\r\n            {/* {renderAnswers()} */}\r\n    \r\n        </LinearSystemWrapper>\r\n    }else{\r\n        return <LinearSystemWrapper>\r\n        <TextStr tag=\"p\" className=\"text-center\">{error}</TextStr>\r\n        </LinearSystemWrapper>\r\n    }\r\n\r\n    // if(false){\r\n    //     return <LinearSystemWrapper>\r\n    //         <TextStr tag=\"h2\" className=\"text-center\">Solve the System of Equations</TextStr>\r\n    //         {renderSolutions()}\r\n    //         {/* <TextStr className=\"text-center\">Linear System Solver</TextStr> */}\r\n    //         <div className=\"text-center\">\r\n    //             {/* <Button className=\"text-center\" onInput={handleAnswer} compact>yes</Button> */}\r\n    //             <Button compact onInput={submitAnswers}>Use these solutions</Button>\r\n    //             <Button className=\"text-center\" compact onClick={()=>{\r\n    //                 handleUndo();\r\n    //                 setHasAnswers(false);\r\n    //             }}>no</Button>\r\n    //         </div>\r\n    //     </LinearSystemWrapper>\r\n    // }else{\r\n    //     let v = getMathLogViews(equations, true, true, true);\r\n    //     return <LinearSystemWrapper>\r\n    //     <TextStr tag=\"h2\" className=\"text-center\">Solve the System of Equations</TextStr>\r\n\r\n    //     {/* {hasAnswers && <TextStr color=\"yellow\" className=\"text-center\">has all answers</TextStr>} */}\r\n    //     {renderUndoRedo()}\r\n    //     {/* <Text id=\"linear-system-solver\" onInput={handleEqSelect} text={getMathLogViews(equations, true, true, true, 'bg-red avoid-clicks')} /> */}\r\n    //     {renderInstructions()}\r\n    //     <div>\r\n        \r\n         \r\n    //         {v.map((e, i) => {\r\n    //             console.log(`tree solve rendering equation ${i}`, e);\r\n    //             if(e.eq){\r\n    //                 return wrapEq(e, <Text id={`lss-eq-${i}`} text={[e]}  className=\"text-left block\"/>)\r\n    //             }else{\r\n    //                 return <Text key={`lss-text-${i}`} id={`lss-text-${i}`} text={[e]}  className=\"text-left inline\"/>\r\n    //             }\r\n                \r\n    //         })}\r\n    //     </div>\r\n    //     {renderViewState()}\r\n    //     {/* {renderAnswers()} */}\r\n\r\n    // </LinearSystemWrapper>\r\n    // }\r\n\r\n}\r\n\r\nLinearSystemSolver.propTypes = {\r\n    coefficients: PropTypes.array,\r\n    rhs: PropTypes.array\r\n}\r\n\r\nexport default LinearSystemSolver;\r\n\r\nconst LinearSystemWrapper = styled.div`\r\n    max-width: ${props => props.theme.mediaL};\r\n    margin: auto;\r\n`"],"sourceRoot":""}