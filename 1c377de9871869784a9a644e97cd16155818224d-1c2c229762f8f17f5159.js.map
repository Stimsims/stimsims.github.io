{"version":3,"sources":["webpack:///./src/mycomponents/game/Views/Speech/index.js","webpack:///./src/mycomponents/game/Views/Scene/Scene.js","webpack:///./src/mycomponents/game/Views/Dialogue/Dialogue.js","webpack:///./src/mycomponents/views/Choices/v1/Choices.js"],"names":["exitAnimation","y","opacity","styleBubble","height","width","textAlign","padding","position","SpeechView","props","useState","current","setCurrent","previous","setPrevious","useEffect","speech","textId","renderNode","key","node","clip","imageId","init","a","Array","isArray","orientation","map","e","indexOf","getInitial","animate","initial","inputs","states","s","getBubbleOrientation","Staged","id","exit","override","transition","delay","duration","top","SpeechBubble","color","name","SpeechText","text","div","style","styled","span","theme","mediaL","primary","dialogueAnim","SceneView","views","animateView","classes","view","animation","ANIM_LAYOUT_OVERLAP","className","images","tid","input","out","texts","v","audio","viewProps","doPlay","img","push","src","Speech","convoId","drawSpeech","textid","dialogue","dialogueColor","Dialogue","Text","margin","fontSize","settings","mergeInput","makeChange","onInput","textClassName","extras","i","choice","options","randomize","fullWidth","bgColor","ChoiceWrapper","choices","renderChoice","renderScene","flex","zUi","EMPTY","temp","addons","setInputs","mergeInputs","setMergeInputs","time","Date","now","write","actions","log","hasOwnProperty","setViews","buildViews","read","vp","flags","ViewFactory","console","error","Error","message","merge","nTime","sendTime","end","nInput","showUI","get","field","type","path","value","onExit","move","location","addFlag","compact","Wrapper","minHeight","zMid","Choices","state","getShuffledChoices","bind","renderButton","componentWillUpdate","nextProps","nextState","this","shuffled","apply","length","Number","call","mod","c","rand","Math","floor","random","splice","a1","getId","index","getName","getIndex","split","renderChoices","render","Container","tag","center","React","PureComponent"],"mappings":"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","file":"1c377de9871869784a9a644e97cd16155818224d-1c2c229762f8f17f5159.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport {motion} from 'framer-motion';\r\nimport Staged from 'game/Views/Staged/index';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport {log} from 'utilities/Measure';\r\n\r\nconst exitAnimation = {\r\n    y: '-200px',\r\n    opacity: 0\r\n}\r\n\r\nconst BUBBLE_HEIGHT = '230px';\r\nconst OR_LEFT = 'L';\r\nconst OR_RIGHT = 'R';\r\nconst OR_CENTER = 'C';\r\nconst SpeechView = (props) => {\r\n    const [current, setCurrent] = useState(null);\r\n    const [previous, setPrevious] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        if(current && props.speech && props.speech.textId !== current.textId){\r\n            setPrevious(current);\r\n        }\r\n        setCurrent(props.speech);\r\n    }, [props.speech])\r\n    const getBubbleOrientation = (inputs) => {\r\n        let states = Array.isArray(inputs)?inputs:[inputs];\r\n        let orientation = OR_CENTER;\r\n        states.map(s => {\r\n            if(s.indexOf(OR_RIGHT) > -1){\r\n                orientation = OR_RIGHT;\r\n            }else if(s.indexOf(OR_LEFT) > -1){\r\n                orientation = OR_LEFT;\r\n            }\r\n        })\r\n        return orientation\r\n    }\r\n    const getInitial = (init) => {\r\n        let a = Array.isArray(init)?init:[init];\r\n        let orientation = OR_CENTER;\r\n        a.map(e => {\r\n            if(e.indexOf(OR_LEFT) > -1){\r\n                orientation = OR_LEFT;\r\n            }else if(e.indexOf(OR_RIGHT) > -1){\r\n                orientation = OR_RIGHT;\r\n            }\r\n        })\r\n        a = ['tC','iC' + orientation]\r\n        return a;\r\n    }\r\n    const renderNode = (key) => {\r\n        let node = key === 'current'?current:previous;\r\n        let clip = `ellipse(50% 50% at 50% 50%)`;\r\n        if(!node.imageId){\r\n               //is a general statement\r\n               clip = null;\r\n        }\r\n        let init = getInitial(node.animate || node.initial);\r\n        let orientation = getBubbleOrientation(node.animate || node.initial);\r\n        if(node){\r\n            return <Staged \r\n                        key={node.textId}  \r\n                        id={node.textId} \r\n                        initial={key === 'current'?init:null} \r\n                        animate={key === 'current'?'aC':'prevC'} \r\n                        exit={'eC'} \r\n                        override={previous === null?{transition: {delay: 2.1, duration: 0.5}}\r\n                                                    :null}\r\n                        top={`-5%`}\r\n                        width=\"100%\"\r\n                        >\r\n                      \r\n                        <SpeechBubble clip={clip} color={node.color} name={node.name} orientation={orientation}>\r\n                            <SpeechText>\r\n                                <Text key={node.textId}  id={node.textId}  text={node.text}  />\r\n                            </SpeechText>\r\n                        </SpeechBubble>\r\n                </Staged>\r\n        }\r\n    }\r\n    return <motion.div key={`${props.id}-convo`}  id={`${props.id}-convo`}\r\n        style={styleBubble}\r\n        exit={exitAnimation}\r\n        initial={exitAnimation}\r\n        animate={{opacity:1, y: 0}}\r\n    >\r\n         {previous && renderNode('previous')}\r\n         {current && renderNode('current')}\r\n    </motion.div>\r\n}\r\n\r\nconst styleBubble = {height:'100%', width: '100%', textAlign:'center', padding: '10px', position: 'absolute'}\r\n\r\nexport default SpeechView;\r\n\r\nconst SpeechText = styled.span`\r\n    text-align: center;\r\n    position: absolute;\r\n    top:50%;\r\n    left:50%;\r\n    transform: translate(-50%, -50%);\r\n    color: ${props => props.theme.text};\r\n    width:100%;\r\n   \r\n`\r\nconst SpeechBubble = styled.div`\r\n    display:inline-block;\r\n    position: relative;\r\n    margin: auto;\r\n    width:100%;\r\n    max-width: ${props => props.theme.mediaL};\r\n    min-height: ${BUBBLE_HEIGHT};\r\n    overflow-y: auto;\r\n    background-color: black;\r\n    border-top:1px solid ${props => props.color || props.theme.primary};\r\n    border-left:3px solid ${props => props.color || props.theme.primary};\r\n    border-right: 3px solid ${props => props.color || props.theme.primary};\r\n    border-bottom: 8px solid ${props => props.color || props.theme.primary};\r\n    text-align: ${props => {\r\n        if(props.orientation === OR_RIGHT){\r\n            return 'right';\r\n        }else if(props.orientation === OR_LEFT){\r\n            return 'left';\r\n        }else{\r\n            return 'center';\r\n        }\r\n    }};\r\n    ${props => {\r\n        if(props.clip) return `border-radius:30px;`;\r\n    }}\r\n    &:before{\r\n        content: '${props => props.name}';\r\n        color: ${props => props.color || props.theme.primary};\r\n        padding: 0px 20px;\r\n        font-size: 1em;\r\n        top: -5px;\r\n        position: relative;\r\n    }\r\n`\r\n","import React, {useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Speech from 'game/Views/Speech/index';\r\nimport Staged from 'game/Views/Staged/index';\r\nimport TextStr from 'views/Text/Text/v1/Text';\r\nimport Slider from 'views/Slider/v1/Slider.js';\r\nimport Choice from 'views/Choices/v1/Choices';\r\nimport SimpleImage from 'game/Views/Image/simple';\r\nimport { motion } from 'framer-motion';\r\nimport {SLIDE_UP, FADE, ANIM_LAYOUT_OVERLAP, animations, keys as animKeys} from 'animations';\r\nimport './Scene.css';\r\nimport {log} from 'utilities/Measure.js';\r\n\r\n\r\nconst DEFAULT_IMG_SIZE = 'm';\r\nconst SceneView = (id, views) => (props) => {\r\n\r\n    const drawImages = (images) => {\r\n        let imgs = Array.isArray(images)?images:[images];\r\n        return imgs.map(img => {\r\n            if(img.imageId){\r\n                return     <SimpleImage id={img.id} key={img.id} {...img}\r\n                src={views.viewProps.images}// state={img.state} \r\n            />\r\n            }\r\n\r\n        })\r\n    }\r\n    const drawSpeech = (images) => {\r\n        let imgs = Array.isArray(images)?images:[images];\r\n        return imgs.map(img => {\r\n            if(img.textId){\r\n                return <Speech key={`${img.convoId}-convo`} id={`${img.convoId}-convo`} speech={img} />\r\n            }\r\n        })\r\n    }\r\n    const animateView = (id, classes, view, animation = ANIM_LAYOUT_OVERLAP) => {\r\n    return <motion.div id={id} key={id}  className={`${classes?classes:''} item-large`}\r\n                {...animation} \r\n            >\r\n                {view}\r\n            </motion.div>\r\n    }\r\n\r\n    const renderText = (tid, text, input, out) => {\r\n        return <Text id={tid} text={text} onInput={input} out={out} \r\n            viewProps={views.viewProps} settings={views.settings} mergeInput={views.makeChange}\r\n            className={`inline-block bg-text ${views.textClassName || ''}`} />\r\n    }\r\n    const renderDialogue = (name, color, texts) => {\r\n        return animateView(id, null, <Dialogue color={color}>\r\n            <TextStr className=\"text-center\" color={color} margin=\"0\" padding=\"0\" fontSize=\"remM\">-{name}-</TextStr>\r\n            <Text text={texts} id={`${id}-dialogue`} color={color} className=\"text-center\" \r\n            fontSize=\"remM\"\r\n            viewProps={views.viewProps} settings={views.settings} mergeInput={views.makeChange}  />\r\n        </Dialogue>,dialogueAnim)\r\n    }\r\n    const renderChoice = (options, input, out, text, randomize, fullWidth, bgColor) => {\r\n        return animateView(`${id}-ch`, 'item-flex-end', \r\n            <ChoiceWrapper>\r\n                <Choice key={`${id}-choice`} id={`${id}-choice`} \r\n                choices={options} onInput={input} out={out} randomize={randomize} fullWidth={fullWidth}\r\n                bgColor={bgColor} text={text}\r\n                viewProps={views.viewProps} settings={views.settings}\r\n                mergeInput={views.makeChange} />\r\n            </ChoiceWrapper>)\r\n    }\r\n    const playAudio = () => {\r\n        if(views.audio){\r\n            views.viewProps.doPlay(views.audio);\r\n        }\r\n    }\r\n    const renderScene = () => {\r\n        let v = [];\r\n\r\n\r\n        playAudio();\r\n        if(views.img){\r\n            v.push(drawImages(views.img));\r\n            v.push(drawSpeech(views.img));\r\n        }\r\n        if(views.text){\r\n            let textid = views.textId || id;\r\n            if(views.dialogue){\r\n                v.push(renderDialogue(views.dialogue, views.dialogueColor, views.text));\r\n            }else{\r\n                v.push(animateView(`${textid}-te1`, ' text-center', renderText(textid, views.text, \r\n                    views.text.onInput, views.text.out)));\r\n            }\r\n            \r\n        }\r\n        if(views.extras){\r\n            views.extras.map((e, i) => {\r\n                if(e){\r\n                    v.push(animateView(e.id || `${id}-extra-${i}`, '', e))\r\n                }\r\n                \r\n            })\r\n           // v = [...v, ...views.extras];\r\n        }\r\n        if(views.choice && views.choice.options){\r\n            v.push(renderChoice(views.choice.options, views.choice.onInput, views.choice.out, views.choice.text,\r\n                    views.choice.randomize, views.choice.fullWidth, views.choice.bgColor));\r\n        }\r\n        return v;\r\n    }\r\n    return renderScene();\r\n}\r\n\r\nSceneView.propTypes = {\r\n    iterateText: PropTypes.bool,\r\n    textClassNames: PropTypes.string,\r\n    text: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array\r\n    ]).isRequired,\r\n    choices: PropTypes.array.isRequired,\r\n    images: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array\r\n    ]),\r\n    onInput: PropTypes.func, //if all choices can share one func, this will be used\r\n    out: PropTypes.object //if all choices can share an out this will be used\r\n}\r\n\r\nexport default SceneView;\r\n\r\n\r\nconst prevAnimation = {\r\n    y: '-100px',\r\n    opacity: 0.5\r\n}\r\nconst exitAnimation = {\r\n    y: '-200px',\r\n    opacity: 0\r\n}\r\n\r\nconst dialogueAnim = {\r\n    initial: {\r\n        opacity: 0, y: 100,  \r\n        flex: 1,\r\n        'maxHeight':'85%',\r\n        position: 'absolute', \r\n    },\r\n    animate: {\r\n        opacity: 1,  y: 0, \r\n        position: 'relative', \r\n        flex: 1,\r\n        'maxHeight':'85%',\r\n        transition: {delay: 0.5}\r\n    },\r\n    exit: {\r\n        opacity: 0, y: -100,  \r\n        position: 'relative', \r\n        'maxHeight':'85%',\r\n        flex: 1\r\n    },\r\n    transition: {duration: 0.3, delay:0}\r\n}\r\n\r\nconst ChoiceWrapper = styled.div`\r\n    z-index: ${props => props.theme.zUi};\r\n    position: relative;\r\n`\r\nconst Dialogue = styled.div`\r\n    background-color: rgba(0,0,0,0.8);\r\n    max-width: ${props => props.theme.mediaL};\r\n    width:100%;\r\n    max-height:100%;\r\n    border: 2px solid ${props => props.color || 'blue'};\r\n    border-bottom: 9px solid ${props => props.color || 'blue'};\r\n    z-index: ${props => props.theme.zUi};\r\n    position: relative;\r\n    overflow-y: auto;\r\n    overflow-x: auto;\r\n    box-sizing: border-box;\r\n`\r\n// const Dialogue = styled.div`\r\n//     background-color: rgba(0,0,0,0.8);\r\n//     padding: 10px;\r\n//     margin: 10px auto;\r\n//     max-width: ${props => props.theme.mediaL};\r\n//     width:95%;\r\n//     border: 2px solid ${props => props.color || 'blue'};\r\n//     border-bottom: 9px solid ${props => props.color || 'blue'};\r\n//     z-index: ${props => props.theme.zUi};\r\n//     position: relative;\r\n//     overflow-x: auto;\r\n//     flex: 1;\r\n// `\r\n/*\r\n \r\n    \r\n    box-shadow: 0 4px 8px 0 ${props => props.color};\r\n*/","import React, {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Layout from 'views/FlexContainer/v1/FlexContainer';\r\nimport ViewFactory from 'game/tree/ViewFactory.js';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport {makeChange} from 'utilities/Merge.js';\r\nimport {log, sendTime} from 'utilities/Measure';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport {addFlag} from 'utilities/Game/Flags';\r\n\r\nconst EMPTY = {temp: {}};\r\n\r\nconst Dialogue = (props) => {\r\n     const [inputs, setInputs] = useState({temp: props.addons || {}});\r\n     const [mergeInputs, setMergeInputs] = useState(null);\r\n     const [time] = useState({time: Date.now()})\r\n    const onInput = (write, actions)=>{\r\n        let v = actions;\r\n        log(`mygialogue onInput actions`, v);\r\n        if(v.hasOwnProperty('out')) v = v.out; //some views store actions as parameter out\r\n        if(!Array.isArray(v)) v = [v];\r\n        setMergeInputs(v);\r\n    }\r\n\r\n    const [views, setViews] = useState(null);\r\n    const buildViews = (id, node, read, write, makeChange, settings, vp, flags) => {\r\n        try{\r\n            setViews(ViewFactory(props.dialogue.dialogue(id, node || 'dgstart', read, write, makeChange, \r\n                settings, vp, flags))); //old view must be hidden before removal\r\n        }catch(e){\r\n            console.error(`Dialogue ${props.id} error at node ${node} `, e);\r\n            throw Error(`Dialogue ${props.id} error at node ${node} ` + e.message);\r\n        }\r\n    }\r\n    const measureTime = (node) => {\r\n        let nTime = Date.now();\r\n        //console.log(`dialogue time nTime ${nTime} difference ${nTime - time.time} time`, time);\r\n        sendTime('dialogue-timing', props.id, node, nTime - time.time, null); \r\n        time.time = nTime;\r\n    }\r\n    useEffect(()=>{\r\n        if(props.merge){\r\n            setMergeInputs(props.merge);\r\n        }\r\n    }, [props.merge])\r\n    useEffect(()=>{\r\n        if(mergeInputs){\r\n            log(`dialogue inputs`, inputs);\r\n            //MEASURE TIME\r\n            measureTime(inputs.temp.node || 'start');\r\n\r\n            let end = false;\r\n            mergeInputs.map(e => { //can be null to disable button actions conditionally\r\n                if(e && e.end === true) end = true;\r\n            });\r\n            let nInput = makeChange(inputs, inputs, mergeInputs, props.viewProps.showUI);\r\n            log(`mygialogue makeChange mergeInputs`, mergeInputs);\r\n            log(`bughunt mcq mygialogue makeChange nInput`, nInput);\r\n            if(end){\r\n                //allow any last minute simple  changes\r\n                if(props.out){\r\n                    nInput = makeChange(inputs, inputs, props.out, props.viewProps.showUI);\r\n                }\r\n                let actions = [];\r\n                let fields = get('meta.simFields', props.read, props.write, []); //get('temp.solveEq', read, write, null);\r\n                fields.map(field => {\r\n                    // if(nInput[field] || nInput.temp[field]){\r\n                    //     actions.push({type: 'merge', path: field, value: nInput[field] || nInput.temp[field]});\r\n                    // }\r\n                    actions.push({type: 'merge', path: field, value: nInput[field] || nInput.temp[field]});\r\n                })\r\n                //collect actions from interventions\r\n                if(props.dialogue.onExit){\r\n                    actions = [\r\n                        ...actions,\r\n                        ...props.dialogue.onExit(props.read, nInput, \r\n                            props.settings, props.viewProps)\r\n                    ]\r\n                }\r\n                if(props.onExit){\r\n                    actions = [\r\n                        ...actions,\r\n                        ...props.onExit(props.id, nInput)\r\n                    ]\r\n                }\r\n                delete nInput.temp;\r\n                if(props.move){\r\n                    actions = [\r\n                        ...actions,\r\n                        //{type: 'set', path: 'move', value: {location: props.move, merge: nInput}}\r\n                        {type: 'set', path: 'move', value: {location: props.move}}\r\n                    ]\r\n                }\r\n                log(`bughunt mcq dialogue id ${props.id} ending, merging actions`, actions)\r\n                props.mergeInput(props.id, actions)\r\n                setInputs(EMPTY);\r\n            }else{\r\n                //call parent makeChange with merge actions\r\n                setInputs(nInput);\r\n          \r\n                nInput.temp.flags = addFlag(nInput.temp.flags || {}, nInput.temp.node);\r\n               // props.write.temp.flags = addFlag(nInput.temp.flags || props.write.temp.flags, nInput.temp.node);\r\n                //let flags = addFlag(nInput.temp.flags || props.write.temp.flags, nInput.temp.node);\r\n                //setNode(nInput.temp.node);\r\n                //dialogue new node? ${nInput.temp.node}`, nInput.temp);\r\n\r\n                buildViews(props.id, nInput.temp.node, props.read, inputs, \r\n                    onInput, props.settings, props.viewProps, props.write.temp.flags);\r\n            }\r\n            setMergeInputs(null);\r\n        }else if(!views){\r\n            buildViews(props.id, inputs.temp.node, props.read, inputs, \r\n                    onInput, props.settings, props.viewProps);\r\n        }\r\n\r\n    }, [mergeInputs, inputs, props.write,  setMergeInputs, props.addons, onInput, \r\n            props.id, props.settings,  props.viewProps])\r\n\r\n    if(props.compact){\r\n        return   <Wrapper key={`dialogue-${props.id}`} id={`dialogue-${props.id}`} minHeight={props.minHeight}>\r\n            <AnimatePresence>\r\n        {views}\r\n    </AnimatePresence>\r\n        </Wrapper>\r\n    }else{\r\n        return  <Layout key={`dialogue-${props.id}`} id={`dialogue-${props.id}`} >\r\n            <AnimatePresence>\r\n            {views}\r\n            </AnimatePresence>\r\n        </Layout>;\r\n    }\r\n\r\n\r\n}\r\n\r\nDialogue.propTypes = {\r\n    id: PropTypes.string.isRequired, //for measurement category\r\n}\r\nexport default Dialogue;\r\n\r\nconst Wrapper = styled.div`\r\n    border-top: 2px solid red;\r\n    border-bottom: 2px solid red;\r\n    z-index: ${props => props.theme.zMid};\r\n    padding: 10px 0px;\r\n    ${props => {\r\n        if(props.minHeight){\r\n            return `min-height: ${props.minHeight}`;\r\n        }\r\n    }}\r\n`","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Btn from 'views/Button/v1/Button.js';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\nimport {log} from 'utilities/Measure';\r\n\r\nexport default class Choices extends React.PureComponent{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            ...props.randomize?this.getShuffledChoices(props.choices):{}\r\n        };\r\n        this.onInput = this.onInput.bind(this);\r\n        this.renderButton = this.renderButton.bind(this);\r\n    }\r\n    componentWillUpdate(nextProps, nextState){\r\n        if(nextProps.randomize && this.props.id !== nextProps.id &&  this.props.choices !== nextProps.choices){\r\n            nextState.shuffled = this.getShuffledChoices(nextProps.choices).shuffled;\r\n        }\r\n    }\r\n    getShuffledChoices(choices){\r\n        let shuffled = Array.apply(null, {length: choices.length}).map(Number.call, Number);\r\n        let mod = Array.apply(null, {length: choices.length}).map(Number.call, Number);\r\n        shuffled = shuffled.map((c, i) => {\r\n            let rand = Math.floor(Math.random()*mod.length);\r\n            let item = mod.splice(rand, 1)[0];\r\n            return item;\r\n        });\r\n        return {shuffled};\r\n    }\r\n    onInput(i, a1){\r\n      //  debugger;\r\n      let id = this.props.id;\r\n      //  let i = this.getIndex(a1.target.id);\r\n       // let i = id;\r\n        let choice = this.props.choices[this.props.randomize?this.state.shuffled[i]:i];\r\n        if(choice.view && choice.view.props && choice.view.props.onInput){\r\n            choice.view.props.onInput(choice.props.id || id, choice.view.props, this.props.viewProps, this.props.mergeInput);\r\n        }else if(choice.props && choice.props.onInput){\r\n            choice.props.onInput(choice.props.id || id, choice.props, this.props.viewProps, this.props.mergeInput);\r\n        }else if(choice.props && choice.props.out){\r\n            this.props.mergeInput(id, choice.props.out);\r\n        }else if(this.props.onInput){\r\n            if(this.props.out){\r\n                //same for all options\r\n                this.props.onInput(id, this.props, this.props.viewProps, this.props.mergeInput);\r\n            }else{\r\n                //unique to all options\r\n                if(choice.view){\r\n                    this.props.onInput(id, choice.view.props, this.props.viewProps, this.props.mergeInput);\r\n                }else{\r\n                    this.props.onInput(id, choice.props, this.props.viewProps, this.props.mergeInput);\r\n                }\r\n                \r\n            }\r\n            \r\n        }else{\r\n            if(this.props.out){\r\n                //same for all options\r\n                this.props.mergeInput(id, this.props);\r\n            }else{\r\n                //unique to all optionslet\r\n                let c =  this.props.choices[this.props.randomize?this.state.shuffled[i]:i];\r\n                if(c.view){\r\n                    this.props.mergeInput(id,c.view.props);\r\n                }else{\r\n                    this.props.mergeInput(id,c.props);\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    getId(index){\r\n        return `ch-${index}`;\r\n    }\r\n    getName(choice){\r\n        return choice.name?choice.name:this.props.id;\r\n    }\r\n    getIndex(id){\r\n        let i = id.split('-')[1];\r\n        return i;\r\n    }\r\n    renderButton(choice, index){\r\n        if(choice){ //some views pass null, just skip\r\n            return <Btn\r\n            //compact={this.props.compact} \r\n            bgColor={\"gChoice\"}\r\n           // color={this.props.color} \r\n           // color={\"primaryD\"} \r\n            //classNames={this.props.choices.length > 1?'multi':'solo'}\r\n            id={index} key={index} \r\n            onInput={this.onInput} //glow={this.props.noglow?false:true}\r\n            >\r\n            {/* {this.props.viewProps.getView(choice, this.props.inputs, this.props.settings, this.props.viewProps, this.props.mergeInput)} */}\r\n            {choice}\r\n            {/* <p className=\"choice-item\" style={{display: 'inline-block'}}>hello</p> */}\r\n            </Btn>\r\n        }\r\n\r\n    }\r\n    renderChoices(){\r\n        if(this.props.randomize){\r\n            //iterate through shuffled ids\r\n            return this.state.shuffled.map((s, i) => {\r\n                return this.renderButton(this.props.choices[s], i)\r\n            })\r\n        }else{\r\n            //just use choices directly\r\n            return this.props.choices.map((c, i) => {\r\n                return this.renderButton(c, i);\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        // id={this.props.index} key={this.props.index}   z-mid\r\n        return (\r\n            <Container key={this.props.id} id={this.props.id} \r\n                className={`${this.props.className?this.props.className:''} mcq-choice item-end choices maxWidth-large item-large`} \r\n                fullWidth={this.props.fullWidth} compact={this.props.compact}>\r\n                    {this.props.text && <Text tag=\"p\" fontSize={this.props.fontSize} center \r\n                        key={this.props.id} className=\"question fadeIn\" color=\"text\">{this.props.text}</Text>}\r\n                    {this.renderChoices()}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst fullBtn = {};\r\nconst compactBtn = {width: 'auto', margin: '5px'};\r\n\r\nChoices.propTypes = {\r\n    id: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]).isRequired,\r\n    fullWidth: PropTypes.bool,\r\n    compact: PropTypes.bool,\r\n    fontSize: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ])\r\n}\r\n\r\n\r\nconst Container = styled.div`\r\n    margin: auto;\r\n    text-align: center;\r\n    .solo, .multi{\r\n        box-sizing: border-box;\r\n        margin: 10px; \r\n    }\r\n   \r\n`\r\n\r\n/*\r\n  .solo, .multi{\r\n        box-sizing: border-box;\r\n        display: inline-block;\r\n        margin: 10px; \r\n        div{\r\n            width: auto !important;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ${props => {\r\n        if(props.compact){\r\n            return `\r\n                .solo, .multi{\r\n                    display: inline-block;\r\n                    margin: 10px;    \r\n                }\r\n            `;\r\n        }else{\r\n            return `\r\n            .multi{\r\n                width: 96%; \r\n                margin: 2%;    \r\n            }\r\n            \r\n            @media only screen and (min-width: ${props.theme.mediaM}) {\r\n                .solo, .multi{\r\n                    width: ${props.fullWidth?'96':'46'}%;\r\n                }\r\n            }\r\n            `\r\n        }\r\n    }}\r\n*/"],"sourceRoot":""}