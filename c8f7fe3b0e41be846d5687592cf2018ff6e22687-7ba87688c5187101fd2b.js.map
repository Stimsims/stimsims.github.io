{"version":3,"sources":["webpack:///./src/utilities/Game/MathExpression.js","webpack:///./src/utilities/Game/TreeMath.js","webpack:///./src/games/CleanWork/views.js","webpack:///./src/games/CleanWork/dialogues/dialogueWorkRatesCombine.js","webpack:///./src/games/CleanWork/texts.js","webpack:///./src/games/CleanWork/definitions.js","webpack:///./src/games/CleanWork/keys.js","webpack:///./src/utilities/Math/Algorithms.js"],"names":["Expression","eq","latex","text","log","Error","id","generator","getHash","toLatex","math","maxIndex","index","transforms","equation","future","nerdamer","set","RANDOMIZE","isDevelopment","MULT","POW","doOperation","eqs","operation","args","alts","eqSide","sides","sideResults","eqGroup","equations","Array","isArray","altValues","getAlternates","eqsResult","map","indexOf","getEqSide","v","side","multiply","power","mathToText","length","result","i","eqr","push","r","num","nAlt","Math","floor","random","alt","multiplier","toString","pow","getConversionFormula","fromValue","fromUnit","toUnit","variable","a","getMultiple","getFraction","evaluate","values","keys","require","partialEmployeeView","employee","viewProps","name","description","getEmployeeDescription","tag","fontSize","className","listToEnglish","specs","nSt","roundTo","pPwr","dp","img","imageId","getImg","pose","initial","animate","exit","getCategory","flags","combinedWorkRate","key","pull","read","write","request","get","category","workRates","sistersWorkRates","eqCombine","lcm","getLcm","lcmOptions","multipliers","multiplyByOptions","lcmOption","reduce","agg","e","m","mi","variants","out","type","path","value","MCQ","qCWRFracMultiplier","lcmFracOption","inverseOption","changeOption","combinedVar","dialogue","node","makeChange","settings","temp","multiplyByKey","colortext","Scene","getSis","textId","audio","choice","options","end","addFlag","solutionVariants","multiplyByOptionsEqVariants","randomize","qCWRSolved","onInput","solution","toNum","solveFor","console","qCWRFracMultiplierResult","subtree","getCombinedWorkRateAddSemantics","getCombinedWorkRateTechniqueScene","getCombinedWorkRateIntro","next","color","qCWRAddDiffFracVal","href","leave","qCWRHowSumFrac","sumDenSuccess4Options","qCWRexSumFrac","qCWRHowDenomEqual2","fractionValues","fractionValuesOptions","qCWRFracVal","qCWRReadFracPerHour","qCWRReadFrac","qCWRNumGTDen","qCWRHowDenomEqual","qCWRCrossMultMeaning","fracAdditionOptions","qCWRSumFracFormula","nJo","nSh","nRh","nBe","nNe","DefaultKeys","uGr","uKi","uSe","uMi","uHo","unitJobTime","uDollar","vWorkRate","steadyStellaWorkRate","roundTime","roundWeight","roundSec","mainTheme","pWe","pWer","workMin","workMax","pWorkTotal","minReviews","workerFee","eqVarWorker","violationWr","fineWr","fineIe","violationIe","reviewThreshold","sis0","sis1","sis2","sisMc","custToxFu","cliCorrosion","cliParanormal","cliPlantDisease","cliMagicMold","cliFratBoys","cliTempFlux","fWorkRate","qWrtSpeed","qWrtSum","qMistSWRCorrEq","qMistSWRVarLhsCorrEq","qMistSWRVarLhsEmpTotRel","qMistNegTimeSemantics","qMistNegEqTTDirect","qMistNegEqTTOperation","qMistNegEqTTValue","qSoloWorkRateEq","qSoleWorkRateXSol","qSoleCommonMult","qSoleEqMultFrac","qTotalEq","qTotalLcm","qTotalMultLcm","qTotalTime","qSFCoefficientSemantics","qSFLargerFraction","qSFDenominatorMeaning","qUCproportionEq","qUCsToHEq","qUCgToKgEq","qUCSolveForH","qGtoKgUnit","qMetricBase","qTokg","qGinKg","qIntroWorkRateEq","k","getSisterImg","getPose","module","exports","max","hits","multiple"],"mappings":"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","file":"c8f7fe3b0e41be846d5687592cf2018ff6e22687-7ba87688c5187101fd2b.js","sourcesContent":["import {DELETED} from './../Merge';\r\nimport {getMean, transformData, saveMath, getRegressionSlope, evaluate, toLatex, executeNerdamer, \r\n    subMathEq, getVariables, solveFor, getTerms, getNumbers, operate} from './MathFun';\r\nimport generator from './../Generator';\r\nimport {log} from 'utilities/Measure';\r\n\r\nfunction MyMathUpdate(eqId, math, vp){\r\n    if(!eqId) throw Error(`MyMathUpdate requires eqId and math`);\r\n    if(math){\r\n        log(`MyMathUpdate getvalue redo mathupdate math present`, math);\r\n        return [\r\n            {type: 'add', collection: 'math', id: math.id, value: math},\r\n                {type: 'add', collection: 'mathMap', id: eqId, value: math.id}\r\n        ]\r\n    }else{\r\n        log(`MyMathUpdate getvalue redo mathupdate math absent`, math);\r\n        return [\r\n            //{type: 'add', collection: 'math', id: math.id, value: math},\r\n            {type: 'add', collection: 'mathMap', id: eqId, value: DELETED}\r\n        ]\r\n    }\r\n    \r\n}\r\nexport const MathUpdate = MyMathUpdate;\r\nfunction MyExpression(eq, latex, text){\r\n    log(`MyExpression eq`, eq);\r\n    if(!eq) throw Error(`Math requires eq to create`);\r\n    let id = generator.getHash();\r\n    if(!latex) latex = toLatex(eq);\r\n    let math = {id, maxIndex: 10, index: 0, transforms: [{equation: {eq, latex}, text}], future: []}\r\n    log(`MyExpression returns math`, math);\r\n    return math;\r\n}\r\nexport const Expression = MyExpression;\r\n\r\nexport const getEq = (expression) =>{\r\n    log(`Expression getExp expression`, expression);\r\n    // let keys = Object.keys(expression.transforms);\r\n    // let item = expression.transforms[keys.length - 1];\r\n    let item = expression.transforms[expression.transforms.length - 1];\r\n    log(`Expression getExp item`, item);\r\n    return item;\r\n}\r\n\r\nexport const addOperation = (math, equation) => {\r\n    log(`Expression addOperation math`, math);\r\n    log(`Expression addOperation equation`, equation);\r\n    // let transformKeys = Object.keys(math.transforms);\r\n    // //TODO: need UI to show limit of math ops\r\n    // if(equation && transformKeys.length < 10){\r\n    //     let index = transformKeys.length;\r\n    //     math.transforms[index] = equation;\r\n    //     math.index += 1;\r\n    //     return math;\r\n    // }\r\n   // return false;\r\n    if(math.transforms.length < math.maxIndex){\r\n        math.transforms = [...math.transforms, equation];\r\n        return math;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const undo = (mergeInput, write, equation) => {\r\n    log(`getvalue merge undo props`, equation);\r\n    let eq = {...equation};\r\n    if(eq.transforms.length <= 1){ //transforms must have at least 1, or is deleted\r\n        //deleteEq();\r\n        mergeInput('undodelete', new MathUpdate(eq.id, null));\r\n    }else{\r\n        eq.future = [...eq.future];\r\n        eq.transforms= [...eq.transforms];\r\n        eq.future = [eq.transforms[eq.transforms.length - 1], ...eq.future];\r\n        eq.transforms = eq.transforms.slice(0, -1);\r\n        // let index = eq.index;\r\n        // eq.index = index - 1;\r\n        // eq.future[index] = eq.transforms[index];\r\n        // log(`getvalue merge undo index ${index} eq index ${eq.index} future`, eq.future);\r\n        // delete eq.transforms[index];\r\n        // log(`getvalue merge undo index ${index} index ${eq.index} transforms`, eq.transforms);\r\n        // log(`getvalue merge undo eq`, eq);\r\n        //not sure if this is the right call, doing for convenience atm\r\n       // eq.incorrect = false;\r\n        //props.viewProps.methods.math.saveMath(id, value, props.dataset, props.dv, props.viewProps);\r\n        mergeInput(write, \r\n            new MathUpdate(eq.id, eq)\r\n        );\r\n    }\r\n}\r\nexport const redo = (mergeInput, write, equation) => {\r\n    log(`getvalue merge redo  eq`, equation)\r\n    let eq = {...equation};\r\n    //analyse to see if should be saved?\r\n    if(eq.future.length > 0){ //future can be length 0\r\n        // eq.future = {...eq.future};\r\n        // eq.transforms= {...eq.transforms};\r\n        // let index = eq.index;\r\n        // eq.index = index + 1;\r\n        // eq.transforms[index + 1] = eq.future[index + 1];\r\n        // log(`getvalue merge redo index ${index} index ${eq.index} transforms`, eq.transforms);\r\n        // delete eq.future[index + 1];\r\n        // log(`getvalue merge redo index ${index} index ${eq.index} future`, eq.future);\r\n        // log(`getvalue merge undo eq`, eq);\r\n        eq.transforms = [...eq.transforms, eq.future[0]];\r\n        eq.future = eq.future.slice(1, eq.future.length);\r\n        log(`getvalue merge redo  eq post update`, eq);\r\n        let actions =  new MathUpdate(eq.id, eq);\r\n        //let actions = new methods.create.MathUpdate(write.temp.eqId, nMath);\r\n        mergeInput(write, \r\n            actions\r\n        );\r\n    }\r\n}","\r\nimport nerdamer from 'nerdamer/all';\r\nimport {getEqSide, roundTo, uniqueRay} from './../Format';\r\nimport {log} from './../Measure';\r\nimport {mathToText, toLatex, toNum} from './MathFun';\r\nimport {getFraction, getMultiple} from 'utilities/Game/Latex';\r\nimport {isDevelopment} from 'utilities/Validation';\r\n\r\nnerdamer.set('SOLUTIONS_AS_OBJECT', true);\r\n\r\nexport const RANDOMIZE = isDevelopment()?true:false;\r\n\r\nexport const EQLR = 2, EQL = 0, EQR = 1;\r\nexport const MULT = 'mult', POW= 'pow',DIV = 'div', DIFF = 'diff';\r\nexport const doOperation = (eqs, operation, args, alts = 1, eqSide = EQLR) => {\r\n    //seperate equations, handle which sides the operation is applied to\r\n    let equations = Array.isArray(eqs)?eqs:[eqs];\r\n    let sides, \r\n    altValues =  Array.isArray(alts)?alts:getAlternates(alts), //client can pass in a premade array of alts\r\n    sideResults; \r\n    let eqsResult = equations.map(equation => {\r\n        sides = [equation];\r\n        if(equation.indexOf('=')>-1){\r\n            sides = [getEqSide(equation, 0), getEqSide(equation, 1)];\r\n        }\r\n        return altValues.map(v => {\r\n            sideResults = sides.map(side =>{\r\n                switch(operation){\r\n                    case MULT: return multiply(side, args, v);\r\n                    case POW: return power(side, args, v);\r\n                    default: return {\r\n                        eq: side,\r\n                        latex: mathToText(side, true, operation === DIV || operation === DIFF)\r\n                    }\r\n                }\r\n            })\r\n            return {\r\n                eq: `${sideResults[0]}${sides.length>1?'=':''}${sides.length>1?sideResults[1]:''}`,\r\n                latex: toLatex(`${sideResults[0]}${sides.length>1?'=':''}${sides.length>1?sideResults[1]:''}`),\r\n            }\r\n        })\r\n    });\r\n    //for each alt, iterate over eqsResult, grabbing that altIndex and remerging into an alt array\r\n    let result = [];\r\n    let eqGroup;\r\n    for(let i = 0; i<altValues.length; i++){\r\n        eqGroup = [];\r\n        eqsResult.map(eqr => {\r\n            eqGroup.push(eqr[i]);\r\n        });\r\n        result.push(eqGroup);\r\n    };\r\n    if(!Array.isArray(eqs) || eqs.length === 1){\r\n        result = result.map(r => {\r\n            return r[0];\r\n        })\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const getAlternates = (num) => {\r\n    let alts = [1];\r\n    let nAlt = null;\r\n    while(alts.length < num){\r\n        nAlt = Math.floor(Math.random()*10) + 2;\r\n        if(Math.random()>0.7){\r\n            nAlt = nAlt*-1;\r\n        }\r\n        if(alts.indexOf(nAlt) === -1){\r\n            alts.push(nAlt);\r\n        }\r\n    }\r\n    return alts;\r\n}\r\n\r\nconst multiply = (eq, args, alt) => {\r\n    let multiplier = nerdamer(args[0]).multiply(alt).toString();\r\n    return nerdamer(eq).multiply(multiplier).toString();\r\n}\r\n\r\nconst power = (eq, args, alt) => {\r\n    let multiplier = nerdamer(args[0]).multiply(alt).toString();\r\n    return nerdamer(eq).pow(multiplier).toString();\r\n}\r\n\r\n\r\n\r\nexport const getConversionFormula = (fromValue, fromUnit, toUnit, alts = 4, variable = 'x') => {\r\n    let  altValues =  Array.isArray(alts)?alts:getAlternates(alts);\r\n    let equations = altValues.map(a => {\r\n        switch(fromUnit){\r\n            case 'grams':\r\n                if(toUnit === 'kilograms'){\r\n                    return {\r\n                        //eq: `${getMultiple(getMultiple(`${fromValue}*${fromUnit}`, 1),`(${0.01*a}*${toUnit}/${fromUnit})`)}`,\r\n                        eq: `((${fromValue}*${fromUnit})/1)*((${0.001*a}*${toUnit})/${fromUnit})`,\r\n                        latex: `${getMultiple(getFraction(getMultiple(fromValue, fromUnit), 1), getFraction(getMultiple(0.01*a, toUnit), fromUnit))}`\r\n                    };\r\n                }\r\n            case 'kilograms':\r\n                if(toUnit === 'grams'){\r\n                    return  {\r\n                        eq: `((${fromValue}*${fromUnit})/1)*(${1000*a}*${toUnit}/${fromUnit})`,\r\n                       // eq: getMultiple(getMultiple(`${fromValue}*${fromUnit}`, 1), getFraction(`${1000*a}*${toUnit}`, fromUnit)),\r\n                        latex: getMultiple(getFraction(getMultiple(fromValue,fromUnit), 1), getFraction(getMultiple(1000*a, toUnit), fromUnit))\r\n                    };\r\n                }\r\n            case 'litres':\r\n            case 'millilitres':\r\n            default: throw Error(`TreeMath getConversionFormula doesn't have equations for ${fromUnit} and ${toUnit}`);\r\n        }\r\n    })\r\n    return equations;\r\n}\r\n\r\nexport const interpret = (eq) => {\r\n    return mathToText(nerdamer(eq));\r\n}\r\nexport const evaluate = (eq, values) => {\r\n  //  return toNum(mathToText(nerdamer(eq)));\r\n    return mathToText(nerdamer(eq).evaluate({...values}));\r\n}\r\nexport const substitute = (eq, values, fraction = false) => {\r\n    let eqs = [];\r\n    if(eq.indexOf('=') > -1){\r\n        eqs.push(getEqSide(eq, 0));\r\n        eqs.push(getEqSide(eq, 1));\r\n    }else{\r\n        eqs.push(eq);\r\n    }\r\n\r\n    for(let k in values){\r\n        eqs  = eqs.map(e => {\r\n            return nerdamer(e).sub(k, values[k])\r\n        })\r\n    }\r\n    let neq = `${eqs[0].toString()}${eqs.length>1?'=':''}${eqs.length>1?eqs[1].toString():''}`;\r\n    return {\r\n        eq: mathToText(neq),\r\n        latex: mathToText(neq, true, fraction)\r\n    }\r\n}\r\n// export const getRatioFormula = (amount1, per1, amount2, per2) => {\r\n\r\n// }","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation} from 'utilities/Create.js';\r\nimport {getEqSide, roundTo, listToEnglish, getImg} from 'utilities/Format.js';\r\nimport {getEmployeeDescription} from './texts';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate} from 'utilities/Game/MathFun';\r\n\r\nvar keys = require('./keys');\r\n\r\n/*\r\n//lhs = 0, rhs = 1\r\nexport const getEqSide = (eq, side)\r\n*/\r\n\r\nexport const partialEmployeeView = (employee, viewProps) => {\r\n    let name = employee.name;\r\n    let description = getEmployeeDescription(name);\r\n    return {\r\n        text: [\r\n            {text:  name, tag:\"h2\", fontSize: 'remXL', className: 'text-center block'},\r\n            {text:  `Cleaning Specializations`, tag: 'h4', className: 'text-center block'},\r\n            {text:  `${listToEnglish(employee.specs)}`, className: 'text-center block'},\r\n            description?{text:  `Description`, tag: 'h4', className: 'text-center block'}:null,\r\n            description?{text:  description, className: 'text-center block'}:null,\r\n            {text:  `Cleaning Work Rate`, tag: 'h4', className: 'text-center block'},\r\n            name !== keys.nSt?{text:  `${name} can do 1 job in ${roundTo(employee[keys.pPwr], keys.dp)} hour(s)`, className: 'block'}\r\n            :{text:  `Known work rate of 1 job in ${roundTo(employee[keys.pPwr], keys.dp)} hours`, className: 'text-center block'},\r\n            // name !== keys.nSt?{ text: `re-calculate`, className: \"text-underline  text-center block\", color: 'secondary', \r\n            // out: [\r\n            //     {type: 'set', path: 'temp.retry', value: name},\r\n            //     {end:true},\r\n            // ]}:null\r\n        ],\r\n        img: [\r\n            //    {id:  'kara', imageId: keys['nMc-img'], pose: 'neutral', initial: ['iL'], animate: ['pL']},\r\n            {id: `${name}-img`, imageId: keys.getImg(name), pose: 'neutral',\r\n            initial: ['iL'], animate: ['aL'], exit: ['eL']},\r\n        ],\r\n    }\r\n}\r\n\r\nexport const solveWorkRate = (employeeName, read, write, makeChange, settings, viewProps) => {\r\n    let employee = get('employees', read, write, null, true).filter(f => f.name === employeeName)[0];\r\n    //let commonDenominator = get('temp.cd', read, write, null);\r\n    //does it have temp.eqFractionsRemoved?\r\n    let eqFractionsRemoved = get('temp.eqFractionsRemoved', read, write, null);\r\n    let eqResults = get('temp.eqResults', read, write, null);\r\n    let eqSolved = get('temp.solved', read, write, null);\r\n    let eqCommonDenominator = get('temp.commonDenominator', read, write, null);\r\n    if(eqSolved){\r\n        return Scene('solveWorkRate-eqSolved',{\r\n            settings, viewProps, makeChange,\r\n            text: [\r\n                `Equation solution x = ${eqSolved.eq}`,\r\n                {latex: eqSolved.latex}\r\n            ],\r\n            choice: {\r\n                options: [<Text text=\"next\" />]\r\n            }\r\n        })\r\n    }else if(eqResults){\r\n        return Scene('solveWorkRate-eqResults',{\r\n            settings, viewProps, makeChange,\r\n            text: [\r\n                `Which equation is correct for cd ${eqCommonDenominator}?`,\r\n            ],\r\n            choice: {\r\n                onInput: (id, val) => {\r\n                    //solve for the equation\r\n                    let eq = val.eq;\r\n                    //t solveFor = (eq, v)\r\n                    let solved = solveFor(eq, 'x');\r\n                    makeChange(id, [\r\n                        MCQ(keys.acGameMCQ, keys.qWorkRateEq, \r\n                                `${val.i === 0?100:0}`, val.i === 0?100:0),\r\n                        {type: 'set', path: 'temp.solved', value: solved[0]},\r\n                    ])\r\n                },\r\n                options: eqResults.map((e, i) => {\r\n                    return <Text latex={e.latex} eq={e.eq} i={i} />\r\n                })\r\n            }\r\n        })\r\n    }else{\r\n        //ask the solution question\r\n        //ask the common denominator question\r\n        let cd = employee.workTotal*keys.steadyStellaWorkRate;\r\n        let cdOptions = [cd+'x', cd*2+'x', cd*0.5+'x', cd*-1+'x'];\r\n        return Scene('solveWorkRate-cd',{\r\n            settings, viewProps, makeChange,\r\n            text: `Whats the common denominator of ${employee.eq}`,\r\n            choice: {\r\n                onInput:(id, val) => {\r\n                    let cdVal = val.text;\r\n                    let operation = Operation('multiply', [cdVal]);\r\n                    let results = operate(operation, employee.eq, 4, EQLR);\r\n                    results = results.map(e => {\r\n                        //return e.equation;\r\n                        return expand(e.equation.eq);\r\n                    })\r\n                    makeChange(id, [\r\n                        MCQ(keys.acGameMCQ, keys.qWorkRateCommonDenominator, \r\n                                `${val.i === 0?100:0}`, val.i === 0?100:0),\r\n                        {type: 'set', path: 'temp.eqFractionsRemoved', value: val},\r\n                        {type: 'set', path: 'temp.eqResults', value: results},\r\n                        {type: 'set', path: 'temp.commonDenominator', value: cdVal},\r\n                    ])\r\n                },\r\n                options: cdOptions.map((e, i) => {\r\n                            return <Text i={i} text={e} />\r\n                        })\r\n         }\r\n        })\r\n    }\r\n    \r\n}\r\n/**\r\n * \r\n * return Scene('newEmployee',{\r\n        settings, viewProps, makeChange,\r\n        text: `Find the new employees work rate employeeName ${employeeName} eq ${employee.eq}`,\r\n        choice: {options: [\r\n            <Text text={\"back\"} out={[\r\n                {type: 'set', path:'move', value: {location: 'employees'}},\r\n            ]} />\r\n        ]}\r\n    })\r\n */","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent, Dialogue} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation, getConversionFormula, evaluate, \r\n        interpret, substitute, RANDOMIZE} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction, getMultiple} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport {getLcm} from 'utilities/Math/Algorithms';\r\nimport keys from './../keys';\r\nimport {addFlag} from 'utilities/Game/Flags';\r\nimport { sendEvent } from '../../../utilities/Measure.js';\r\n//GaEvent(category, id, label, score, isPersistent)\r\nconst getCategory = (flags) => {\r\n    return `fraction-${flags.combinedWorkRate || 0}`;\r\n}\r\n\r\nexport const combinedWorkRate = {\r\n    key: 'combinedWorkRate',\r\n    pull: (read, write, request) => {\r\n        let flags = get('flags', read, write, {});\r\n   \r\n        let category = getCategory(flags);\r\n        let workRates = request.sistersWorkRates;\r\n        let combinedVar = 'x';\r\n        let eqCombine = {\r\n            eq: `1/${combinedVar}=1/${workRates[0]}+1/${workRates[1]}+1/${workRates[2]}`,\r\n            latex: `${getFraction(1, combinedVar)}=${getFraction(1, roundTo(workRates[0], 2))}\r\n                        +${getFraction(1, roundTo(workRates[1], 2))}\r\n                        +${getFraction(1, roundTo(workRates[2], 2))}`\r\n        }\r\n        //let lcm = workRates[0]*workRates[1]*workRates[2];\r\n        let lcm = getLcm(workRates);\r\n        let lcmOptions = [lcm,lcm*10, lcm*0.5, lcm*-1];\r\n      \r\n        // let combinedWorkRate = getTotalWork(workRates);\r\n        // let combinedWorkRateOptions = [combinedWorkRate, combinedWorkRate*10, combinedWorkRate*0.5, combinedWorkRate*-1];\r\n        //one by lcm -> 1\r\n        //one by fraction to equal lcm -> 1\r\n        //one by fraction inverse -> 1\r\n        //one by 1/lcm -> 0\r\n        let multipliers = [1, 10, 0.5, -1];\r\n        let multiplyByOptions = [];\r\n        let lcmOption = workRates.reduce((agg, e, i) => {\r\n            agg.eq = `${agg.eq}${i===0?'':'+'}(1/${e}*${lcm}*${combinedVar}})`;\r\n            agg.latex = `${agg.latex}${i===0?'':'+'}${getMultiple([getFraction(1, e), lcm, combinedVar])}`;\r\n            multipliers.map((m, mi) => {\r\n                agg.variants[mi] ={\r\n                    eq: `${agg.variants[mi].eq}${i===0?'':'+'}(${evaluate(`(1/${e})*${lcm}*${combinedVar}*${m}`)})`,\r\n                    latex: `${agg.variants[mi].latex}${i===0?'':'+'}(${toLatex(evaluate(`(1/${e})*${lcm}*${combinedVar}*${m}`))})`,\r\n                };\r\n            })\r\n            return agg;\r\n        }, {eq: `(1/x)*${lcm}=`, latex: `${getMultiple(getFraction(1, 'x'), lcm)}=`, \r\n            variants: multipliers.map(m => {\r\n                return {eq: `${evaluate(`((1/${combinedVar})*${lcm}*${combinedVar})*${m}`)}=`, \r\n                        latex: toLatex(`${evaluate(`((1/${combinedVar})*${lcm}*${combinedVar})*${m}`)}`) + \"=\"}\r\n            }),\r\n         out: [\r\n           // {type: 'set', path: 'temp.node', value: 'multiplyByCorrect'},\r\n            {type: 'set', path: 'temp.multiplyByKey', value: 0},\r\n        ]})\r\n        lcmOption.out.push(MCQ(category, keys.qCWRFracMultiplier, 'lcmOption', 1, [\r\n            {text: `Player had to sum together the right hand side of the equation`},\r\n            {latex: eqCombine.latex},\r\n            {text: `and they correctly answered with`},\r\n            {latex: lcmOption.latex}\r\n        ], true))\r\n        multiplyByOptions.push(lcmOption);\r\n        //doOperation = (eqs, operation, args, alts = 1, eqSide = EQLR)\r\n       // let variants = doOperation([lcmOption.result], MULT, [1], [1, 10, 0.5, -1]);\r\n       \r\n\r\n        let lcmFracOption = workRates.reduce((agg, e, i) => {\r\n            agg.eq = `${agg.eq}${i===0?'':'+'}(1/${e}*${lcm/e}/${lcm/e})`;\r\n            agg.latex = `${agg.latex}${i===0?'':'+'}(${getMultiple(getFraction(1, e), \r\n                                getFraction(lcm/e, lcm/e))})`;\r\n            multipliers.map((m, mi) => {\r\n                agg.variants[mi] ={\r\n                    eq: `${agg.variants[mi].eq}${i===0?'':'+'}(${evaluate(`(1/${e}*${lcm/e}/${lcm/e})*${m}`)})`,\r\n                    latex: `${agg.variants[mi].latex}${i===0?'':'+'}(${getFraction(`${1*(lcm/e)*m}`,`${e*(lcm/e)*m}`)})`,\r\n                };\r\n            })\r\n            return agg;\r\n        }, {eq: `1/x=`, latex: `${getFraction(1, 'x')}=`,\r\n            variants: multipliers.map(m => {\r\n                return {eq: `1/x=`, latex: `1/x=`}\r\n            }),\r\n         out: [\r\n           // {type: 'set', path: 'temp.node', value: 'multiplyByCorrect'},\r\n            {type: 'set', path: 'temp.multiplyByKey', value: 1},\r\n        ]})\r\n        lcmFracOption.out.push(MCQ(category, keys.qCWRFracMultiplier, 'lcmFracOption', 1, [\r\n            {text: `Player had to sum together the right hand side of the equation`},\r\n            {latex: eqCombine.latex},\r\n            {text: `and they correctly answered with`},\r\n            {latex: lcmFracOption.latex}\r\n        ], true))\r\n        multiplyByOptions.push(lcmFracOption);\r\n\r\n        let inverseOption = workRates.reduce((agg, e, i) => {\r\n            agg.eq = `${agg.eq}${i===0?'':'+'}(1/${e}*${1/e}/${1/e})`;\r\n            agg.latex = `${agg.latex}${i===0?'':'+'}(${getMultiple(getFraction(1, e), \r\n                                getFraction(getFraction(1, e),getFraction(1, e)))})`;\r\n            multipliers.map((m, mi) => {\r\n                agg.variants[mi] ={\r\n                    eq: `${agg.variants[mi].eq}${i===0?'':'+'}(${evaluate(`(1/${e}*${1/e}/${1/e})*${m}`)})`,\r\n                    latex: `${agg.variants[mi].latex}${i===0?'':'+'}(${getFraction(roundTo(m/e, 3),`${e*(1/e)*m}`)})`,\r\n                };\r\n            })\r\n\r\n            return agg;\r\n        }, {eq: `1/x=`, latex: `${getFraction(1, 'x')}=`, \r\n            variants: multipliers.map(m => {\r\n                return {eq: `1/x=`, latex: `1/x=`}\r\n            }),\r\n        out: [\r\n            {type: 'set', path: 'temp.node', value: 'multiplyByCorrect'},\r\n            {type: 'set', path: 'temp.multiplyByKey', value: 2},\r\n        ]})\r\n        inverseOption.out.push(MCQ(category, keys.qCWRFracMultiplier, 'inverseOption', 1, [\r\n            {text: `Player had to sum together the right hand side of the equation`},\r\n            {latex: eqCombine.latex},\r\n            {text: `and they correctly answered with`},\r\n            {latex: inverseOption.latex}\r\n        ], true))\r\n        multiplyByOptions.push(inverseOption);\r\n\r\n        let changeOption = workRates.reduce((agg, e, i) => {\r\n            agg.eq = `${agg.eq}${i===0?'':'+'}(1/${e}*${1/lcm})`;\r\n            agg.latex = `${agg.latex}${i===0?'':'+'}(${getMultiple(getFraction(1, e), getFraction(1, lcm))})`;\r\n            multipliers.map((m, mi) => {\r\n                agg.variants[mi] ={\r\n                    eq: `${agg.variants[mi].eq}${i===0?'':'+'}(1/${e}*${1/(lcm*m)})`,\r\n                    latex: `${agg.variants[mi].latex}${i===0?'':'+'}(${getMultiple(getFraction(1, e), getFraction(1, (lcm*m)))})`,\r\n                };\r\n            })\r\n            return agg;\r\n        }, {eq: `1/x=`, latex: `${getFraction(1, 'x')}=`, \r\n            variants: multipliers.map(m => {\r\n                return {eq: `1/x=`, latex: `1/x=`}\r\n            }),\r\n        out: [\r\n            //{type: 'set', path: 'temp.node', value: 'multiplyByCorrect'},\r\n            {type: 'set', path: 'temp.multiplyByKey', value: 3},\r\n        ]})\r\n        changeOption.out.push(MCQ(category, keys.qCWRFracMultiplier, 'changeOption', 0, [\r\n            {text: `Player had to sum together the right hand side of the equation`},\r\n            {latex: eqCombine.latex},\r\n            {text: `but they incorrectly answered with`},\r\n            {latex: changeOption.latex}\r\n        ], true))\r\n        multiplyByOptions.push(changeOption);\r\n        return {eqCombine, request, lcmOptions, multiplyByOptions, combinedVar, flags, workRates}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let flags= write.temp.flags;\r\n        let category = getCategory(flags);\r\n\r\n        let request = write.temp.request;\r\n        let eqCombine = write.temp.eqCombine;\r\n        let multiplyByOptions = write.temp.multiplyByOptions;\r\n        let multiplyByKey = write.temp.multiplyByKey;\r\n        let combinedWorkRate = write.temp.combinedWorkRate;\r\n        let combinedVar = write.temp.combinedVar;\r\n        let color = settings.colortext === 1?'primary':'text';\r\n        switch(node){\r\n            case 'checkAnswer': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                        {text: `So from the equation`},\r\n                        {latex: eqCombine.latex},\r\n                        {text: `they should take`}, \r\n                        {latex: combinedWorkRate.latex},\r\n                        {text: `seconds`},\r\n                        {text: ` to break down 1 sample. Does that sound right?`},\r\n                    ]},\r\n                ],\r\n                audio: [\r\n                    {id: 'f1-gasp'}\r\n                ],\r\n                choice: {\r\n                    options: [\r\n                        <Text text=\"Yes\" out={[\r\n                            {end:true}\r\n                        ]} />,\r\n                        <Text text=\"No. I'll try again\" out={[\r\n                            {type: 'set', path: 'temp.node', value: 'combinedWorkRate-start'},\r\n                            {type: 'set', path: 'temp.flags', value: addFlag(flags, 'combinedWorkRate')},\r\n                        ]} />,\r\n                    ]\r\n                }\r\n            })\r\n            case 'multiplyByAnswer':\r\n                let solutionVariants = write.temp.solutionVariants;\r\n                let multiplyByOptionsEqVariants = write.temp.multiplyByOptionsEqVariants;\r\n                return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                        {text: `So the value of x in `},\r\n                        {latex: multiplyByOptionsEqVariants.latex},\r\n                        {text: `is?`}\r\n                    ]},\r\n                ],\r\n                choice: {randomize:{RANDOMIZE},\r\n                    options: solutionVariants.map((e, i) => {\r\n                        return <Text {...e} out={[\r\n                            {type:'set', path:'temp.combinedWorkRate', value: e},\r\n                            {type: 'set', path: 'temp.node', value: 'checkAnswer'},\r\n                            MCQ('fraction', keys.qCWRSolved, null, i===0, [\r\n                                {text: `Player had to identify the solution of their selected equation`},\r\n                                {latex: multiplyByOptionsEqVariants.latex},\r\n                                {text: `They ${i === 0?'correctly':'incorrectly'} answered with ${roundTo(e, 2)}`},\r\n                                i > 0?{text: `when the answer was`}:null,\r\n                                i > 0?{latex: solutionVariants[0].latex}:null\r\n                            ])\r\n                        ]} />\r\n                    })\r\n                }\r\n            })\r\n            case 'multiplyByCorrect':\r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                        {text: `What would the result of`},\r\n                        {latex: multiplyByOptions[multiplyByKey].latex},\r\n                        {text: `be?`}\r\n                    ]},\r\n                ],\r\n                choice: {randomize:{RANDOMIZE},\r\n                    onInput: (id, v) => {\r\n                        /*\r\ncalculations multiplyByCorrect v.eq 1/x=(1/5*-0.00202020202020202)+(1/9*-0.00202020202020202)+(1/11*-0.00202020202020202) solution NaN NaN\r\ncalculations multiplyByCorrect v.eq 1/x=(0-0.2)+(0-0.111111111111111111)+(0-0.090909090909090909) solution NaN NaN\r\ncalculations multiplyByCorrect v.eq 1/x=(1/5*0.00202020202020202)+(1/9*0.00202020202020202)+(1/11*0.00202020202020202) solution 1231.2814070351758                     \r\n*/\r\n                        let multiples = [1, 10, 0.1, -1];\r\n                        let solution = toNum(solveFor(v.eq, combinedVar)[0].eq);\r\n                        console.log(`calculations multiplyByCorrect v.eq ${v.eq} solution ${solution}`, solution);\r\n                        let options = multiples.map(m => {\r\n                            console.log(`calculations multiplyByCorrect multiples ${m} solution ${solution}`, m);\r\n                            return {eq: solution*m, latex: toLatex(solution*m)};\r\n                        })\r\n                        console.log(`calculations multiplyByCorrect options`,options);\r\n                        makeChange(id, [\r\n                            {type: 'set', path: 'temp.node', value: 'multiplyByAnswer'},\r\n                            {type: 'set', path: 'temp.solutionVariants', value: options},\r\n                            {type: 'set', path: 'temp.multiplyByOptionsEqVariants', value: {eq: v.eq, latex: v.latex}},\r\n                            MCQ(category, keys.qCWRFracMultiplierResult, v.i, v.i === 0, [\r\n                                {text: `Player had to identify what the result of their selected operation`},\r\n                                {latex: multiplyByOptions[multiplyByKey].latex},\r\n                                {text: `would be.`},\r\n                                {text: v.i === 0?'they correctly selected':'they incorrectly selected'},\r\n                                {latex: v.latex},\r\n                                v.i > 0?{text: `when the answer was`}:null,\r\n                                v.i > 0?{latex: multiplyByOptions[multiplyByKey].variants[0].latex}:null,\r\n                            ])\r\n                        ])\r\n                    },\r\n                    options: multiplyByOptions[multiplyByKey].variants.map((v, i) => {\r\n                        return <Text {...v} i={i} />\r\n                    })\r\n                }\r\n            })\r\n            case 'sumFracDen':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                        {latex: eqCombine.latex},\r\n                        {text: `Which operation could get the right result?`}\r\n                    ]},\r\n                ],\r\n                choice: {randomize:{RANDOMIZE},\r\n                    options:  multiplyByOptions.map((e, i) => {\r\n                        return <Text {...e} out={[\r\n                            {type: 'set', path: 'temp.node', value: 'multiplyByCorrect'},\r\n                            {type: 'set', path: 'temp.multiplyByKey', value: i}\r\n                        ]} />\r\n                    })\r\n                }\r\n            })\r\n            default: \r\n                let subtree = getCombinedWorkRateAddSemantics('sumFracTechnique',  id, node, read, write, makeChange, settings, viewProps);\r\n                if(!subtree) subtree = getCombinedWorkRateTechniqueScene('sumFracDen', id, node, read, write, makeChange, settings, viewProps);\r\n                if(!subtree) subtree = getCombinedWorkRateIntro('sumFrac', id, node, read, write, makeChange, settings, viewProps);\r\n                return subtree;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//0 neutral, 1: sigh, 2: annoyed, 3: shocked\r\nconst getCombinedWorkRateIntro = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'individualProblem':return Scene('combinedWorkRate-' + node, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'), textId: node, text: [\r\n                    {text: `from how long they`},\r\n                    {text: `individually`, color},\r\n                    {text: `took to break`},\r\n                    {text: ` the material down`},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [//combinedWorkRate\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: next},\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        default: return Scene('combinedWorkRate-start', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'), textId: 'tdef1', text: [\r\n                    {text: `I need to find out how long they'll take to break down this material`},\r\n                    {text: `together,`, color},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [//combinedWorkRate\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'individualProblem'},\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst getCombinedWorkRateAddSemantics = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let eqCombine = write.temp.eqCombine;\r\n    let flags= write.temp.flags;\r\n    let category = getCategory(flags);\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'sumFracErrDenRatio2':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `While the fractions `},\r\n                    {latex: getFraction(1, 4)},\r\n                    {text: `or 0.25, and`},\r\n                    {latex: getFraction(2, 8)},\r\n                    {text: `also 0.25, have the same value, but`},\r\n                    {text: `can't be added`, color},\r\n                    {text: `together because the`},\r\n                    {text: `denominators are different`, color}\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-sigh'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={{type: 'set', path: 'temp.node', value: 'sumFrac3'}} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFracErrDenRatioErr':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `When the  `},\r\n                    {text: `denominators`, color},\r\n                    {text: `are the`},\r\n                    {text: `same size,`, color},\r\n                    {text: `the`},\r\n                    {text:`numerators`, color},\r\n                    {text:`can just be added together.`},\r\n                    {text:`So 1 + 2 = 3`},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={{type: 'set', path: 'temp.node', value: 'sumFracErrNum2'}} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFracErrDenRatio':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `It is possible to add fractions with`},\r\n                    {text: `different values.`, color},\r\n                    {text: `So `},\r\n                    {latex: getFraction(1, 5)},\r\n                    {text: `or 0.2, and`},\r\n                    {latex: getFraction(2, 5)},\r\n                    {text: `or 0.4, can be added together to get?`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text latex={getFraction(3, 5)} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sumFracErrDenRatio2'},\r\n                        MCQ(category, keys.qCWRAddDiffFracVal, null, 1, [\r\n                            {text: `Player incorrectly believes only fractions of equal value can be added together. When asked what the sum of `},\r\n                            {latex: getFraction(1, 5)},\r\n                            {text: `and`},\r\n                            {latex: getFraction(2, 5)},\r\n                            {text: `is, they correctly answered `},\r\n                            {latex: getFraction(3, 5)}\r\n                        ])\r\n                    ]} />,\r\n                    <Text latex={getFraction(6, 5)} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sumFracErrDenRatioErr'},\r\n                        MCQ(category, keys.qCWRAddDiffFracVal, '6/5', 0, [\r\n                            {text: `Player incorrectly believes only fractions of equal value can be added together. When asked what the sum of `},\r\n                            {latex: getFraction(1, 5)},\r\n                            {text: `and`},\r\n                            {latex: getFraction(2, 5)},\r\n                            {text: `is, they incorrectly answered `},\r\n                            {latex: getFraction(6, 5)}\r\n                        ])\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFracErrNum2':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `You can review how to add fractions at this Khan Academy youtube video (this tab will remain open):`},\r\n                    {text: `Khan Academy on adding fractions`, href: 'https://www.youtube.com/watch?v=52ZlXsFJULI', leave: true},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"I'd rather keep solving the problem\" out={{type: 'set', path: 'temp.node', value: 'sumFrac3'}} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFracErrNum':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL'), textId: node, text: [\r\n                    {text: `The parts do need to be cut to the`},\r\n                    {text: `same size`, color},\r\n                    {text: `but it's the`},\r\n                    {text: `denominator`, color},\r\n                    {text: `that determines the size of the parts.`},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-why'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={{type: 'set', path: 'temp.node', value: 'sumFracErrNum2'}} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFrac3': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `I must`},\r\n                    {text: `add`, color},\r\n                    {text: `all the right hand side`},\r\n                    {text: `fractions`, color},\r\n                    {text: `together.`},\r\n                    {latex: eqCombine.latex, color},\r\n                    {text: `To add two fractions together...`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text=\"the denominators have to be equal, because you can only add parts cut to the same size\" \r\n                        out={[\r\n                            {type: 'set', path: 'temp.node', value: next},\r\n                            MCQ(category, keys.qCWRHowSumFrac, write.temp[`${keys.qCWRHowSumFrac}Wrong`]?'2nd':'1st', 1, [\r\n                                {text: `When asked what conditions were necessary for fractions to be summed together, \r\n                                the player answered correctly that: \r\n                                \"the denominators have to be equal, because you can only add parts cut to the same size\"`}\r\n                            ], true)\r\n                        ]} \r\n                    />,\r\n                    <Text text=\"the numerators have to be equal, because you can only add parts cut to the same size\" \r\n                        out={[\r\n                            {type: 'set', path: 'temp.node', value: 'sumFracErrNum'},\r\n                            {type: 'set', path: `temp.${keys.qCWRHowSumFrac}Wrong`, value: true},\r\n                            MCQ(category, keys.qCWRHowSumFrac, `sumFracErrNum`, 0, [\r\n                                {text: `When asked what conditions were necessary for fractions to be summed together, \r\n                                the player answered incorrectly that: \r\n                                \"the numerators have to be equal, because you can only add parts cut to the same size\"`}\r\n                            ], true)\r\n                        ]} />,\r\n                    \r\n                    <Text text=\"the denominators have to be equal, because you can only add \r\n                        fractions that have the same numeric value\" \r\n                        out={[\r\n                            {type: 'set', path: 'temp.node', value: 'sumFracErrDenRatio'},\r\n                            {type: 'set', path: `temp.${keys.qCWRHowSumFrac}Wrong`, value: true},\r\n                            MCQ(category, keys.qCWRHowSumFrac, `denomSameRatio`, 0, [\r\n                                {text: `When asked what conditions were necessary for fractions to be summed together, \r\n                                the player answered incorrectly that: \r\n                                \"the denominators have to be equal, because you can only add fractions that have the same numeric value\"`}\r\n                            ], true)\r\n                        ]} />,\r\n                    <Text text=\"the numerators have to be equal, because you can only add \r\n                        fractions that have the same numeric value\" \r\n                        out={[\r\n                            {type: 'set', path: 'temp.node', value: 'sumFracErrNum'},\r\n                            {type: 'set', path: `temp.${keys.qCWRHowSumFrac}Wrong`, value: true},\r\n                            MCQ(category, keys.qCWRHowSumFrac, `numSameRatio`, 0, [\r\n                                {text: `When asked what conditions were necessary for fractions to be summed together, \r\n                                the player answered incorrectly that: \r\n                                \"the numerators have to be equal, because you can only add fractions that have the same numeric value\"`}\r\n                            ], true)\r\n                        ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFrac2':return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `To`},\r\n                    {text: `solve`, color},\r\n                    {text: `for x, which stands for the`},\r\n                    {text: `combined work time,`, color}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={{type: 'set', path: 'temp.node', value: 'sumFrac3'}} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFrac1':\r\n            let workRates = write.temp.workRates;\r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Since the fairies individual work rates are`},\r\n                    {text: `${listToEnglish(workRates)} hours`, color},\r\n                    {text: `each, the work rate equation should look like this...`},\r\n                    {latex: eqCombine.latex, color},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-okay'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={{type: 'set', path: 'temp.node', value: 'sumFrac2'}} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFrac':\r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `The`},\r\n                    {text: `work rate`, color},\r\n                    {text: `equation allows me to add their individual work time together, \r\n                    calculating how long it'll take the fairies to finish this job together.`}\r\n                ]},\r\n            ],\r\n            \r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={{type: 'set', path: 'temp.node', value: 'sumFrac1'}} />,\r\n                ]\r\n            }\r\n        })\r\n        default: return null;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst getCombinedWorkRateTechniqueScene = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let eqCombine = write.temp.eqCombine;\r\n    let flags= write.temp.flags;\r\n    let category = getCategory(flags);\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'techniqueSumDenSuccess5': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Right! so back to what I was working on...`}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sumFracTechnique'}\r\n                    ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDenSuccess4Err': \r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL'), textId: node, text: [\r\n                    {text: `Wait... now that they're equal`},\r\n                    {text: `pieces of 0.08333~, I can just `},\r\n                    {text: `add`, color},\r\n                    {text: `the numerators together. So...`},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-laugh'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess4'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDenSuccess4': \r\n            let sumDenSuccess4Options = [getFraction(9, 12), getFraction(1, 12), getFraction(8, 12), getFraction(18, 12)]\r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Which results in the fractions`},\r\n                    {latex: `${getFraction(8, 12)}`},\r\n                    {text: `and`},\r\n                    {latex: `${getFraction(1, 12)}`},\r\n                    {text: `which can then be added to get?`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: sumDenSuccess4Options.map((e, i)=> {\r\n                    return <Text text={[{latex: e}]} out={[\r\n                        {type: 'set', path: 'temp.node', value: i===0?'techniqueSumDenSuccess5':'techniqueSumDenSuccess4Err'},\r\n                        MCQ(category, keys.qCWRexSumFrac, null, i===0, [\r\n                            {text: `Player ${i === 0?'correctly':'incorrectly'} answered that`},\r\n                            {latex: `${getFraction(8, 12)}`},\r\n                            {text: `+`},\r\n                            {latex: `${getFraction(1, 12)}`},\r\n                            {text: `equals`},\r\n                            {latex: e},\r\n                            i !== 0?{text: 'when the answer was'}:null,\r\n                            i !== 0?{latex: sumDenSuccess4Options[0]}:null\r\n                        ]) \r\n                    ]} />\r\n                })\r\n            }\r\n        })\r\n        case 'techniqueSumDenSuccess3ErrChangeVal3': \r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `The whole point of adding these fractions is to figure out how much work each fairy has done. If I`},\r\n                    {text: `change the fraction value`, color},\r\n                    {text: `from 0.25 to 0.08333, then`},\r\n                    {text: `I don't know how much work has really been done.`, color}\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-okay'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess3'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDenSuccess3ErrChangeVal2': \r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {latex: `${getFraction(1, 4)}`},\r\n                    {text: `equals 0.25 kilograms per hour, but when multiplied by`},\r\n                    {latex: `${getFraction(1, 3)}`},\r\n                    {text: `the fraction becomes`},\r\n                    {latex: `${getFraction(1, 12)}`},\r\n                    {text: `which equals 0.08333~ kilograms per hour.`},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [ <Text text=\"next\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess3ErrChangeVal3'} ]} /> ]\r\n            }\r\n        })\r\n        case 'techniqueSumDenSuccess3ErrChangeVal': \r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `But that can't be right...`},\r\n                    {latex: `${getFraction(2, 3)}`},\r\n                    {text: `multiplied by`},\r\n                    {latex: `${getFraction(1, 4)}`},\r\n                    {text: `and`},\r\n                    {latex: `${getFraction(1, 4)}`},\r\n                    {text: `multiplied by`},\r\n                    {latex: `${getFraction(1, 3)}`},\r\n                    {text: `changes the value`, color},\r\n                    {text: `of the fractions.`},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-what'}\r\n            ],\r\n            choice: {\r\n                options: [<Text text=\"next\" out={[{type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess3ErrChangeVal2'} ]} />]\r\n            }\r\n        })\r\n        case 'techniqueSumDenSuccess3': \r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `For the fractions`},\r\n                    {latex: getFraction(`2`, `3`)},\r\n                    {text: `and`},\r\n                    {latex: getFraction(`1`, `4`)},\r\n                    {text: `Which operation would make it possible to`},\r\n                    {text: `add`, color},\r\n                    {text: `the resulting fractions together?`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text={[\r\n                        {latex: `${getMultiple(getFraction(2, 3), getFraction(4, 4))}`},\r\n                        {text: `and`},\r\n                        {latex: `${getMultiple(getFraction(1, 4), getFraction(3, 3))}`}\r\n                    ]} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess4'},\r\n                        MCQ(category, keys.qCWRHowDenomEqual2, null, 1, [\r\n                            {text: `Player correctly answered that the operation`},\r\n                            {latex: `${getMultiple(getFraction(2, 3), getFraction(4, 4))}`},\r\n                            {text: `and`},\r\n                            {latex: `${getMultiple(getFraction(1, 4), getFraction(3, 3))}`},\r\n                            {text: `would make the resulting fractions summable.\"`},\r\n                        ]) \r\n                    ]} />,\r\n                    <Text text={[\r\n                            {latex: `${getMultiple(getFraction(2, 3), getFraction(1, 4))}`},\r\n                            {text: `and`},\r\n                            {latex: `${getMultiple(getFraction(1, 4), getFraction(1, 3))}`}\r\n                        ]} out={[\r\n                            {type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess3ErrChangeVal'},\r\n                            MCQ(category, keys.qCWRHowDenomEqual2, null, 0, [\r\n                                {text: `Player incorrectly answered that the operation`},\r\n                                {latex: `${getMultiple(getFraction(2, 3), getFraction(1, 4))}`},\r\n                                {text: `and`},\r\n                                {latex: `${getMultiple(getFraction(1, 4), getFraction(1, 3))}`},\r\n                                {text: `would make the resulting fractions summable.\"`},\r\n                                {text: `The answer was `},\r\n                                {latex: `${getMultiple(getFraction(2, 3), getFraction(4, 4))}`},\r\n                                {text: `and`},\r\n                                {latex: `${getMultiple(getFraction(1, 4), getFraction(3, 3))}`},\r\n                            ])\r\n                        ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDen5': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `I want to figure out how much`},\r\n                    {text: `work they do together, over the`},\r\n                    {text: `same period of time.`, color},\r\n                    {text: `So their work rate`},\r\n                    {text: `fractions need to have the`},\r\n                    {text: `same denominator`, color},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [ <Text text=\"next\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDenSuccess3'} ]} /> ]\r\n            }\r\n        })\r\n        case 'techniqueSumDen4': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL'), textId: node, text: [\r\n                    {text: `So for the fractions`},\r\n                    {latex: getFraction(`2 kilograms`, `3 hours`)},\r\n                    {text: `and`},\r\n                    {latex: getFraction(`1 kilograms`, `4 hours`)},\r\n                    {text: `, it's not right to say we have 3 parts of 0.666~ `},\r\n                    {text: `or 3 parts of 0.25, because they're`},\r\n                    {text: `different quantities`, color}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDen5'} ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDen3Err': \r\n            let fractionValues = [0.25, 0.5, 1, 4];\r\n            let fractionValuesOptions = fractionValues.map((e, i) => {\r\n                return <Text text={`${e} kilograms per hour`}\r\n                    out={[ \r\n                        {type: 'set', path: 'temp.node', value: 'techniqueSumDen3'},\r\n                        MCQ(category, keys.qCWRFracVal, null, i===0?100:0, [\r\n                            {text: `Player ${i===0?'correctly':'incorrectly'} answers that the fractions`},\r\n                            {latex: getFraction(`1`, `4`)},\r\n                            {text: `represented the value ${e}\"`},\r\n                            i > 0?{text: `when the answer was ${fractionValues[0]}`}:null\r\n                        ])  \r\n                    ]} />\r\n            });\r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `A fraction like`},\r\n                    {latex: getFraction(`1`, `4`)},\r\n                    {text: `says the numerator 1, is being cut into`},\r\n                    {text: `4 equal pieces.`, color},\r\n                    {text: `Which equals...?`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: fractionValuesOptions\r\n            }\r\n        })\r\n        case 'techniqueSumDen3': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `If fairy A does`},\r\n                    {latex: getFraction(`2 kilograms`, `3 hours`)},\r\n                    {text: `and fairy B does`},\r\n                    {latex: getFraction(`1 kilograms`, `4 hours`)},\r\n                    {text: `how much work is each doing per hour?`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text=\"0.666~ and 0.25 kilograms per hour\" \r\n                        out={[ \r\n                            {type: 'set', path: 'temp.node', value: 'techniqueSumDen4'},\r\n                            MCQ(category, keys.qCWRReadFracPerHour, null, 1, [\r\n                                {text: `Player correctly answers that the fractions`},\r\n                                {latex: getFraction(`2 kilograms`, `3 hours`)},\r\n                                {text: `and `},\r\n                                {latex: getFraction(`1 kilograms`, `4 hours`)},\r\n                                {text: `represented 0.666~ and 0.25 kilograms per hour`},\r\n                            ]) \r\n                        ]} />,\r\n                    <Text text=\"2 and 1 kilogram per hour\" \r\n                        out={[ \r\n                            {type: 'set', path: 'temp.node', value: 'techniqueSumDen3Err'},\r\n                            MCQ(category, keys.qCWRReadFracPerHour, null, 0, [\r\n                                {text: `Player incorrectly answers that the fractions`},\r\n                                {latex: getFraction(`2 kilograms`, `3 hours`)},\r\n                                {text: `and `},\r\n                                {latex: getFraction(`1 kilograms`, `4 hours`)},\r\n                                {text: `represented 2 and 1 kilogram per hour`},\r\n                                {text: `when the answer was 0.666~ and 0.25 kilograms per hour\"`},\r\n                            ])  \r\n                        ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDen25': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `we'll say...`},\r\n                    {latex: getFraction(`2 kilograms`, `3 hours`)},\r\n                    {text: `and`},\r\n                    {latex: getFraction(`1 kilograms`, `5 hours`)}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDen3'} ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDen2': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Right, and if I have`},\r\n                    {text: `several fairies each cleaning`},\r\n                    {text: `different amounts`, color},\r\n                    {text: `of toxic waste per hour,`}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDen25'} ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDenErr2': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `You can review fractions here with this Khan academy youtube video (this tab will remain open): `},\r\n                    {href: `https://www.youtube.com/watch?v=kZzoVCmUyKg`, \r\n                    text: \"Go to Khan's video on fractions\", leave: true},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-how'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"I'd rather just solve the problem\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDen'} ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDenErr': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL'), textId: node, text: [\r\n                    {text: `Actually, the fraction`},\r\n                    {latex: getFraction(2, 3)},\r\n                    {text: `says`},\r\n                    {text: '2 parts of something cut into thirds.', color},\r\n                    {text: `Like cutting a cake into three parts, and only\r\n                     keeping two of those parts for yourself.`},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-how'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[ {type: 'set', path: 'temp.node', value: 'techniqueSumDenErr2'} ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueSumDen': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `Different denominators`, color},\r\n                    {text: `represent`},\r\n                    {text: `different sized pieces.`, color},\r\n                    {text: `So`},\r\n                    {latex: getFraction(2, 3)},\r\n                    {text: `represents...`}\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text=\"2 parts of something cut into thirds\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueSumDen2'},\r\n                        MCQ(category, keys.qCWRReadFrac, null, 1, [\r\n                            {text: `Player correctly understood that`},\r\n                            {latex: getFraction(2, 3)},\r\n                            {text: `reads as \"2 parts of something cut into thirds\"`},\r\n                        ], true)\r\n                    ]} />,\r\n                    <Text text=\"3 parts of something cut into halves\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueSumDenErr'},\r\n                        MCQ(category, keys.qCWRReadFrac, null, 0, [\r\n                            {text: `Player incorrectly understood that`},\r\n                            {latex: getFraction(2, 3)},\r\n                            {text: `reads as \"3 parts of something cut into halves\"`},\r\n                            {text: `when the answer was \"2 parts of something cut into thirds\"`},\r\n                        ], true)\r\n                    ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum8': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Now, back to figuring out how to add the work rate fractions together.`},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[  {type: 'set', path: 'temp.node', value: 'sumFracTechnique'} ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum7Err2': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {latex: getFraction(5, 8)},\r\n                    {text: ','},\r\n                    {latex: getFraction(7, 12)},\r\n                    {text: `In this case`},\r\n                    {latex: getFraction(29, 24)},\r\n                    {text: `or 1.2 of a cake`}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[  {type: 'set', path: 'temp.node', value: 'techniqueMultNum6Success'} ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum7Err': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Because I am adding`},\r\n                    {latex: getFraction(5, 8)},\r\n                    {text: 'and'},\r\n                    {latex: getFraction(7, 12)},\r\n                    {text: `together, both of which are`},\r\n                    {text: `more than half,`, color},\r\n                    {text: `you'd expect to have`},\r\n                    {text: `more than one cake`, color},\r\n                    {text: `in total. `},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[  {type: 'set', path: 'temp.node', value: 'techniqueMultNum7Err2'} ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum6Success2': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {latex: getFraction(15, 24)},\r\n                    {text: `and`},\r\n                    {latex: getFraction(14, 24)},\r\n                    {text: `Because`},\r\n                    {text: `each piece is a 24th`, color},\r\n                    {text: `of the cakes, they are`},\r\n                    {text: `equal in size`, color},\r\n                    {text: `and can be`},\r\n                    {text: `added together`, color},\r\n                    {text: `, giving me 29 pieces`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text=\"Because you were adding two cakes, the numerator can be larger than the denominator\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum8'},\r\n                        MCQ(category, keys.qCWRNumGTDen, null, 1, [\r\n                            {text: `Player correctly answered that when adding two fractions together,`},\r\n                            {latex: getFraction(15, 24)},\r\n                            {text: `and`},\r\n                            {latex: getFraction(14, 24)},\r\n                            {text: `the numerator could become larger than the denominator.`},\r\n                        ])\r\n                    ]} />,\r\n                    <Text text=\"The numerator cannot be larger than the denominator\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum7Err'},\r\n                        MCQ(category, keys.qCWRNumGTDen, null, 0, [\r\n                            {text: `Player incorrectly answered that even after adding fractions together,`},\r\n                            {latex: getFraction(15, 24)},\r\n                            {text: `and`},\r\n                            {latex: getFraction(14, 24)},\r\n                            {text: `that the numerator could not be larger than the denominator`},\r\n                        ])\r\n                    ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum6Success': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `Right, so`},\r\n                    {latex: getMultiple(getFraction(5, 8), getFraction(3, 3))},\r\n                    {text: `and`},\r\n                    {latex: getMultiple(getFraction(7, 12), getFraction(2, 2))},\r\n                    {text: `gives me`},\r\n                    {latex: getFraction(15, 24)},\r\n                    {text: `and`},\r\n                    {latex: getFraction(14, 24)},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6Success2'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum6Err3': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `I won't get the right answer if I change the value of the fractions. I must multiply \r\n                    them in a way that`},\r\n                    {text: `makes their denominators equal`, color},\r\n                    {text: `while keeping the`},\r\n                    {text: `fraction value the same.`, color},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-gasp'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum6Err2': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 2, null, 'aL'), textId: node, text: [\r\n                    {latex: getMultiple(getFraction(5, 8), getFraction(7, 12))},\r\n                    {text: `,`},\r\n                    {latex: getMultiple(getFraction(7, 12), getFraction(5, 8))},\r\n                    {text: `=`},\r\n                    {latex: getFraction(35, 96)},\r\n                    {text: `each fraction`},\r\n                    {text: `value changed`, color},\r\n                    {text: `from 0.625 and 0.583 to 0.365`},\r\n                ]},\r\n            ],\r\n            \r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6Err3'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum6Err': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {latex: getMultiple(getFraction(5, 8), getFraction(7, 12))},\r\n                    {text: `and`},\r\n                    {latex: getMultiple(getFraction(7, 12), getFraction(5, 8))},\r\n                    {text: `gives me the same fraction`},\r\n                    {latex: getFraction(35, 96)},\r\n                    {text: `Because I`},\r\n                    {text: `multiplied`, color},\r\n                    {text: `the`},\r\n                    {text: `numerators`, color},\r\n                    {text: `and the`},\r\n                    {text: `denominators`, color},\r\n                    {text: `by`},\r\n                    {text: `different values`, color},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6Err2'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum62': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {latex: getFraction(5, 8)},\r\n                    {text: `+`},\r\n                    {latex: getFraction(7, 12)},\r\n                    {text: `How can I change these fractions so my cake can be cut equally?`}\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text={[\r\n                        {latex: getMultiple(getFraction(5, 8), getFraction(3, 3))},\r\n                        {text: `and`},\r\n                        {latex: getMultiple(getFraction(7, 12), getFraction(2, 2))},\r\n                    ]} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6Success'},\r\n                        MCQ(category, keys.qCWRHowDenomEqual, null, 1, [\r\n                            {text: `Player correctly answered that `},\r\n                            {latex: getMultiple(getFraction(5, 8), getFraction(3, 3))},\r\n                            {text: `and`},\r\n                            {latex: getMultiple(getFraction(7, 12), getFraction(2, 2))},\r\n                            {text: `would make it possible to add the resulting fractions`}\r\n                        ])\r\n                    ]} />,\r\n                    <Text text={[\r\n                        {latex: getMultiple(getFraction(5, 8), getFraction(7, 12))},\r\n                        {text: `and`},\r\n                        {latex: getMultiple(getFraction(7, 12), getFraction(5, 8))},\r\n                    ]} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6Err'},\r\n                        MCQ(category, keys.qCWRHowDenomEqual, null, 0, [\r\n                            {text: `Player incorrectly answered that `},\r\n                            {latex: getMultiple(getFraction(5, 8), getFraction(7, 12))},\r\n                            {text: `and`},\r\n                            {latex: getMultiple(getFraction(7, 12), getFraction(5, 8))},\r\n                            {text: `would make it possible to add the resulting fractions`},\r\n                            {text: `the answer was`},\r\n                            {latex: getMultiple(getFraction(5, 8), getFraction(3, 3))},\r\n                            {text: `and`},\r\n                            {latex: getMultiple(getFraction(7, 12), getFraction(2, 2))},\r\n                        ])\r\n                    ]} />\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum6': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `So I cannot have two cakes cut into`},\r\n                    {latex: getFraction(5, 8)},\r\n                    {text: `and`},\r\n                    {latex: getFraction(7, 12)},\r\n                    {text: `each. They must both be cut into`},\r\n                    {text: `equally small slices`, color}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text={[ {text: `next`} ]} out={[ {type: 'set', path: 'temp.node', value: 'techniqueMultNum62'} ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum5': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 2, null, 'aL'), textId: node, text: [\r\n                    {text: `We do not multiply our cake slices together, we must add them. For the statement, \r\n                    'I have four fifths of a cake' to have any meaning,`},\r\n                    {text: `the slices must be of the same size.`, color}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum6'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum43': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 2, null, 'aL'), textId: node, text: [\r\n                    {text: `Which doesn't make any sense,`},\r\n                    {text: ` as somehow adding`},\r\n                    {text: `more than half`, color},\r\n                    {text: `of two cakes, 0.625 and 0.583, has given us a`},\r\n                    {text: `less than half`, color},\r\n                    {text: `of a cake, 0.365`},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-why'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum5'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum42': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {latex: getFraction(5, 8)},\r\n                    {text: `equals 0.625,`},\r\n                    {latex: getFraction(7, 12)},\r\n                    {text: `equals 0.583, and `},\r\n                    {latex: getFraction(35, 96)},\r\n                    {text: `equals 0.365`},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum43'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum4': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `That sounds like a lot of...`},\r\n                    {text: `we'll say slices of cake. `},\r\n                    {text: `Until one remembers that these are`},\r\n                    {text: `fractions, so`, color},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum42'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'techniqueMultNum': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `If that were true then`},\r\n                    {latex: getFraction(5, 8)},\r\n                    {text: `+`},\r\n                    {latex: getFraction(7, 12)},\r\n                    {text: `together with the rule `},\r\n                    {latex: toLatex(`a/b+c/d=(a*c)/(b*d)`)},\r\n                    {text: `I'd get`},\r\n                    {latex: getFraction(35, 96)},\r\n                ]},\r\n            ],\r\n            audio: [\r\n                {id: 'f1-laugh'}\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'techniqueMultNum4'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'crossMultErr': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 2, null, 'aL'), textId: node, text: [\r\n                    {text: `No, nothing. It tells me nothing.`},\r\n                    {text: `Fractions represent a value`, color},\r\n                    {text: `like the individual work rate.\r\n                    Changing a fractions overall value makes the fraction meaningless`}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"Okay\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sumFracTechnique'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'crossMult3': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), textId: node, text: [\r\n                    {text: `That changes the fractions`},\r\n                    {latex: getFraction(2, 3)},\r\n                    {text: `or 0.666~ and `},\r\n                    {latex: getFraction(4, 5)},\r\n                    {text: `or 0.8, to a value of 0.8333~...what does that tell me?`},\r\n                ]},\r\n            ],\r\n            choice: {randomize:{RANDOMIZE},\r\n                options: [\r\n                    <Text text=\"Nothing, changing the fraction value makes it wrong\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sumFracTechnique'},\r\n                        MCQ(category, keys.qCWRCrossMultMeaning, null, 1, [\r\n                            {text: `When asked what changing the value of a fraction means, \r\n                            the player correctly answered \"Nothing, changing the fraction value makes it wrong\"`}\r\n                        ], false)\r\n                    ]} />,\r\n                    <Text text=\"That the fractions have a value of 0.8333~\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'crossMultErr'},\r\n                        MCQ(category, keys.qCWRCrossMultMeaning, null, 0, [\r\n                            {text: `When asked what changing the value of a fraction means, \r\n                            the player correctly answered \"That the fractions have a value of 0.8333~\"\r\n                            when the answer was \"Nothing, changing the fraction value makes it wrong\"`}\r\n                        ], false)\r\n                    ]} />,\r\n                    \r\n                ]\r\n            }\r\n        })\r\n        case 'crossMult2': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                    {text: `If I added`},\r\n                    {latex: getFraction(2, 3)},\r\n                    {text: `+`},\r\n                    {latex: getFraction(4, 5)},\r\n                    {text: `with the rule `},\r\n                    {latex: toLatex(`a/b+c/d=(a*d)/(b*c)`)},\r\n                    {text: `I'd get`},\r\n                    {latex: getFraction(10, 12)},\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'crossMult3'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'crossMult': return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL'), textId: node, text: [\r\n                    {text: `Cross multiplying the fractions could change the value of the fractions, \r\n                    because I might be multiplying the numerator and denominator by`},\r\n                    {text:`different numbers.`, color}\r\n                ]},\r\n            ],\r\n            choice: {\r\n                options: [\r\n                    <Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: 'crossMult2'}\r\n                    ]} />,\r\n                ]\r\n            }\r\n        })\r\n        case 'sumFracTechnique': \r\n            let fracAdditionOptions = [\r\n                {eq: `a/b+c/d=(a*d+c*b)/(b*d)`, latex: toLatex(`a/b+c/d=(a*d+c*b)/(b*d)`), out: [\r\n                    {type: 'set', path: 'temp.node', value: next},\r\n                    MCQ(category, keys.qCWRSumFracFormula, `a/b+c/d=(a*d+c*b)/(b*d)`, 1, [\r\n                        {text: `Player correctly identified the general rule for adding fractions together as`},\r\n                        {latex: toLatex(`a/b+c/d=(a*d+c*b)/(b*d)`)}\r\n                    ], true)\r\n                ]},\r\n                {eq: `a/b+c/d=(a*c)/(b*d)`, latex: toLatex(`a/b+c/d=(a*c)/(b*d)`), out: [\r\n                    {type: 'set',path: 'temp.node', value: 'techniqueMultNum'},\r\n                    MCQ(category, keys.qCWRSumFracFormula, `a/b+c/d=(a*c)/(b*d)`, 0, [\r\n                        {text: `Player incorrectly identified the general rule for adding fractions together as`},\r\n                        {latex: toLatex(`a/b+c/d=(a*c)/(b*d)`)},\r\n                        {text: `when the answer was`},\r\n                        {latex: toLatex(`a/b+c/d=(a*d+c*b)/(b*d)`)}\r\n                    ], true)\r\n                ]},\r\n                {eq: `a/b+c/d=(a*d)/(b*c)`, latex: toLatex(`a/b+c/d=(a*d)/(b*c)`), out: [\r\n                    {type: 'set', path: 'temp.node', value: 'crossMult'},\r\n                    MCQ(category, keys.qCWRSumFracFormula, `a/b+c/d=(a*d)/(b*c)`, 0, [\r\n                        {text: `Player incorrectly identified the general rule for adding fractions together as`},\r\n                        {latex:toLatex(`a/b+c/d=(a*d)/(b*c)`)},\r\n                        {text: `when the answer was`},\r\n                        {latex: toLatex(`a/b+c/d=(a*d+c*b)/(b*d)`)}\r\n                    ], true)\r\n                ]},\r\n                {eq: `a/b+c/d=(a+d)/(c+b)`, latex: toLatex(`a/b+c/d=(a+d)/(c+b)`), out: [\r\n                    {type: 'set', path: 'temp.node', value: 'techniqueSumDen'},\r\n                    MCQ(category, keys.qCWRSumFracFormula, `a/b+c/d=(a+d)/(c+b)`, 0, [\r\n                        {text: `Player incorrectly identified the general rule for adding fractions together as`},\r\n                        {latex: toLatex(`a/b+c/d=(a+d)/(c+b)`)},\r\n                        {text: `when the answer was`},\r\n                        {latex: toLatex(`a/b+c/d=(a*d+c*b)/(b*d)`)}\r\n                    ], true)\r\n                ]},\r\n            ]\r\n            return Scene(`combinedWorkRate-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, null, 'aL'), textId: node, text: [\r\n                        {latex: eqCombine.latex},\r\n                        {text: `I need to add the right hand side fractions together. \r\n                        The correct technique to`},\r\n                        {text: `add`, color},\r\n                        {text: ` two fractions together is?`}\r\n                    ]},\r\n                ],\r\n                choice: {randomize:{RANDOMIZE},\r\n                    options: fracAdditionOptions.map(e => {\r\n                        return <Text {...e}  />\r\n                    })\r\n                }\r\n            })\r\n        default: return null;\r\n    }\r\n}\r\n\r\n\r\n","import {get, DELETED} from 'utilities/Merge';\r\nimport keys from './keys';\r\nimport {log} from 'utilities/Measure';\r\nimport {getEqSide, getImg, roundTo, listToEnglish} from 'utilities/Format.js';\r\n\r\nexport const getReviewJobText = (review) => {\r\n    let texts = [`The clients candid review of your work`];\r\n    \r\n    return texts;\r\n}\r\nexport const getReviewAggregateText = (reviewAggregate) => {\r\n    let texts = [];\r\n    if(reviewAggregate.total <= 0){\r\n        texts.push(`There are no reviews, yet.`)\r\n    }else if(reviewAggregate.total === 1){\r\n        texts.push(`There is 1 review, with a score of ${reviewAggregate.avg}`);\r\n    }else if(reviewAggregate.total < 5){\r\n        texts.push(`There are ${reviewAggregate.total} reviews, with an average score of ${reviewAggregate.avg}. \r\n            You'll wait untill you have at least 5 reviews before you decide anything.`);\r\n    }else{\r\n        texts.push(`You have an average score of ${reviewAggregate.avg}, based on ${reviewAggregate.total} reviews`);\r\n    }\r\n    return texts;\r\n}\r\n\r\nexport const getMoneyText = (read, write) => {\r\n    let money = get(`values.money.value`, read, write, 0, true);\r\n    let avg = get(`values.reviewAvg`, read, write, {}, true);\r\n    let reviewCount = get(`values.reviewCount.value`, read, write, null, true);\r\n    return [\r\n        {text: `Date: 1st of March 2020`, className: 'inlineblock item-medium '},\r\n        {text: `Account Balance: $${money}`, className: 'inlineblock item-medium'},\r\n        avg.hasOwnProperty('value')?\r\n        {text: `Average review score ${avg.value} of ${reviewCount} reviews`, className: 'block'}\r\n        :null,\r\n        {text: `${reviewCount < 5?`I'll need at least 5 reviews to decide how the business is going.`:''}\r\n        If the review score drops below 2, I'll stop the business.`}\r\n    ]\r\n}\r\n\r\n\r\n\r\n\r\nexport const getJobsText = (read, write) => {\r\n    let clients = get('clients', read, write, {}, true);\r\n    let clientIds = Object.keys(clients);\r\n    let texts = [\r\n        {text: 'New Job', tag: 'h3', className:'block text-center'},\r\n    ], e, assignedNames;\r\n    if(clients && clientIds.length > 0){\r\n        clientIds.map(k => {\r\n            e = clients[k];\r\n            texts.push({text: `Skills required: ${listToEnglish(e.specs)}`, className: 'text-center block'});\r\n            texts.push({text: `Price: $${e.invoice}`, className: 'text-center block'});\r\n            // if(e.assigned){\r\n            //     assignedNames = Object.keys(e.assigned);\r\n            //     texts.push({text: `assigned ${assignedNames}, finished in ${e.workEnd}`, className: 'block'});\r\n            // }else{\r\n            //     texts.push({text: `assign employees`, className: 'text-underline text-center secondary block', out: [\r\n            //         {type: 'set', path:'meta.jobId', value: e.id},\r\n            //         {type: 'set', path:'move', value: {location: 'assignJob'}},\r\n            //     ]});\r\n            // }\r\n            texts.push({text: `assign employees`, className: 'text-underline text-center secondary block', out: [\r\n                {type: 'set', path:'meta.jobId', value: e.id},\r\n                {type: 'set', path:'move', value: {location: 'assignJob'}},\r\n            ]});\r\n            texts.push({divide: true})\r\n        })\r\n    }else{\r\n        texts.push({text: `no new jobs`});\r\n    }\r\n    return texts;\r\n}\r\n\r\n\r\nexport const getEmployeeDescription = (name) => {\r\n    let description = '';\r\n    switch(name){\r\n        case keys.nJo: description = 'Smart, but can be very lazy'; break;\r\n        case keys.nSh: description = 'Distracting to the other workers at times'; break;\r\n        case keys.nRh: description = 'Sweet and reliable'; break;\r\n        case keys.nBe: description = 'Tough and durable, but irritable'; break;\r\n        case keys.nSt: description = 'Steady Stella is always reliable, if a bit slow'; break;\r\n        case keys.nNe: description = 'A good all rounder, usually reliable'; break;\r\n    }\r\n    return description;\r\n}\r\n\r\nexport const getNewEmployeeText = (read, write) => {\r\n    let employees = get('employees', read, write, null, true);\r\n    let employeeNames = Object.keys(employees);\r\n    employeeNames = employeeNames.filter(f => !employees[f].hasOwnProperty('playerWorkRate'));\r\n    let texts = [\r\n        {text: `New Applicants`, tag:\"h3\",  className: 'block text-center'},\r\n        //{text: `I'll need to find their work rate so I can tell that auditor when to show up.`, className: 'block'},\r\n    ];\r\n    if(employeeNames.length === 0){\r\n        texts.push({text: `No new applicants`});\r\n    }else{\r\n        let person;\r\n        employeeNames.map((e, i) => {\r\n            person = employees[e];\r\n            texts.push({text: `Name: ${person.name}, specializations: ${listToEnglish(person.specs)}`, \r\n            className: 'text-underline block', out:[\r\n                {type: 'set', path: 'meta.newEmployee', value: person.name},\r\n                {type: 'set', path:'move', value: {location: 'newEmployee'}},\r\n            ]})\r\n        })\r\n    }\r\n\r\n    return texts;\r\n}\r\n\r\nexport const getKnownEmployeeText = (read, write) => {\r\n    let employees = get('employees', read, write, null, true);\r\n    let employeeNames = Object.keys(employees);\r\n    employeeNames = employeeNames.filter(f => employees[f].hasOwnProperty('playerWorkRate'));\r\n    let texts = [];\r\n    let person;\r\n    if(employeeNames.length > 0){\r\n        employeeNames.map(e => {\r\n            person = employees[e];\r\n            texts.push({ text: `Name: ${person.name}, workrate: ${person.playerWorkRate}, \r\n                                specs ${person.specs}`, className: 'inlineblock text-left'})\r\n            if(person.eq){ //they were worked out by the player\r\n                texts.push({ text: `retry`, className: \"text-underline inlineblock\", color: 'secondary', out: [\r\n                    {type: 'set', path: 'meta.newEmployee', value: person.name},\r\n                    {type: 'set', path:'move', value: {location: 'newEmployee'}},\r\n                ]})\r\n            }\r\n            texts.push({space: true})\r\n        });\r\n    }else{\r\n        texts.push({text: `No employees...`})\r\n    }\r\n\r\n    return texts;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/** CLIENT REVIEWS */\r\nexport const getReviewMessage = (clientId, score) => {\r\n    switch(clientId){\r\n        case keys.cliFratBoys:\r\n            if(score > 0.8){\r\n                return {\r\n                    name: `Annonymous`,\r\n                    message: `Great job, yo!`\r\n                };\r\n            }else{\r\n                return {\r\n                    name: `Annonymous`,\r\n                    message: `Fail at figuring out when you'd be done.`\r\n                };\r\n            }\r\n    }\r\n    \r\n}\r\nconst getReviewString = (score) => {\r\n    let counter = 0;\r\n    let str = ``;\r\n    while(counter < score){\r\n        counter += 1;\r\n        str+=`\\u2605`;\r\n    }\r\n    while(counter < 5){\r\n        counter += 1;\r\n        str+= `\\u2606`;\r\n    }\r\n    return str;\r\n}\r\n\r\n","import keys from './keys.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\n\r\n// const employee = {name, [keys.pWorkTotal]: workTotal, //steadyStellaWorkRate: keys.steadyStellaWorkRate, \r\n//     eq,\r\n//     specs: [], \r\n//     [keys.pPwr]: workRate\r\n// };\r\n\r\n\r\nexport const getWorkRateEqs = (workTotal, stella, worker) => {\r\n    let equations = [\r\n        {\r\n            eq: `1/${workTotal}=1/${stella}+1/${worker}`,\r\n            latex: `${getFraction(1, roundTo(workTotal, 2))}\r\n            =${getFraction(1, stella)}\r\n            +${getFraction(1, worker)}`,\r\n        },\r\n        {\r\n            eq:`1/${worker}=1/${stella}+1/${stella*2}`,\r\n            latex: `${getFraction(1, worker)}=\r\n                ${getFraction(1, stella)}\r\n                +${getFraction(1, stella*2)}`,\r\n        },\r\n        {\r\n            eq: `1/x=1/${stella}+1/y`,\r\n            latex: `${getFraction(1, worker)}=\r\n                    ${getFraction(1, stella)}\r\n                    +${getFraction(1, 'y')}`,\r\n        },\r\n       \r\n        {\r\n            eq: `1/${workTotal}=1/y+1/${worker}`,\r\n            latex: `${getFraction(1, roundTo(workTotal, 2))}\r\n            =${getFraction(1, 'y')}\r\n            +${getFraction(1, worker)}`,\r\n        }\r\n    ]\r\n    return equations;\r\n}","\r\n\r\nconst DefaultKeys = require('./../keys');\r\n\r\n\r\n\r\nconst keys =  {...DefaultKeys, \r\n    uGr: 'grams',\r\n    uKi: 'kilograms',\r\n    uSe: 'seconds',\r\n    uMi: 'minutes',\r\n    uHo:'hours',\r\n    unitJobTime:'hours',\r\n    uDollar: 'dollars',\r\n    vWorkRate: 'workRate',\r\n    steadyStellaWorkRate: 5,\r\n    roundTime: 5,\r\n    roundWeight: 5, \r\n    roundSec: 2, \r\n\r\n    mainTheme: \"strangeShop\",\r\n\r\n    pPwr: 'playerWorkRate',\r\n    pWe:'workEnd',\r\n    pWer:'workEndReal',\r\n    workMin: 6,\r\n    workMax: 12,\r\n    pWorkTotal: 'workTotal',\r\n    minReviews: 5,\r\n    workerFee:100,\r\n    eqVarWorker: 'x',\r\n    violationWr: 'workerRights',\r\n    fineWr: 200,\r\n    fineIe: 50,\r\n    violationIe: 'inefficient',\r\n\r\n    reviewThreshold: 4,\r\n\r\n    sis0: 'Abigail',\r\n    sis1: 'Bridget',\r\n    sis2: 'Anode',\r\n    sisMc: 'Nelly',\r\n    'sis0-img': 'sweet',\r\n    'sis1-img': 'goddess',\r\n    'sis2-img': 'ari',\r\n    'sisMc-img': 'kara',\r\n    'sisMcImg': 'kara',\r\n    'sis0Col': '#008B8B',\r\n    'sis1Col': '#9400D3',\r\n    'sis2Col': '#DCDCDC',\r\n    'sisMcCol': '#FF7F50',\r\n\r\n    custToxFu: 'customerToxicFumes',\r\n\r\n    cliCorrosion: 'cliCorrosion',\r\n    cliParanormal: 'cliParanormal',\r\n    cliPlantDisease: 'cliPlantDisease',\r\n    cliMagicMold: 'cliMagicMold',\r\n    cliFratBoys: 'cliFratBoys',\r\n    cliTempFlux: 'cliTempFlux',\r\n    fWorkRate: `1/workTotal=1/workRateA+1/workRateB`,\r\n\r\n    qWrtSpeed: 'wrt-speed',\r\n    qWrtSum: 'wrt-sum',\r\n\r\n    qMistSWRCorrEq: 'mistSWRCorrEq',\r\n    qMistSWRVarLhsCorrEq: 'mistSWRVarLhsCorrEq',\r\n    qMistSWRVarLhsEmpTotRel: 'mistSWRVarLhsEmpTotRel',\r\n\r\n    qMistNegTimeSemantics: 'mistNegTimeSemantics',\r\n    qMistNegEqTTDirect: 'mistNegTimeEqTTDirect',\r\n    qMistNegEqTTOperation: 'mistNegTimeEqTTOperation',\r\n    qMistNegEqTTValue: 'mistNegTimeEqTTValue',\r\n    \r\n    qSoloWorkRateEq:'soloWorkRateEq',\r\n    qSoleWorkRateXSol:'soleWorkRateXSol',\r\n    qSoleCommonMult: 'soleCommonMult',\r\n    qSoleEqMultFrac: 'soleEqMultFrac',\r\n\r\n    qTotalEq: 'totalEq',\r\n    qTotalLcm: 'totalLcm',\r\n    qTotalMultLcm: 'totalMultLcm',\r\n    qTotalTime: 'totalTime',\r\n\r\n    qSFCoefficientSemantics: 'sfCoefficientSemantics',\r\n    qSFLargerFraction: 'sfLargerFraction',\r\n    qSFDenominatorMeaning: 'sfDenominatorMeaning',\r\n\r\n    qCWRSolved: 'CWRfracSolved',\r\n    qCWRHowSumFrac: 'CWRhowSumFrac',\r\n    qCWRAddDiffFracVal: 'CWRaddDiffFracVal',\r\n    qCWRSumFracFormula: 'CWRsumFracFormula',\r\n    qCWRCrossMultMeaning: 'CWRCrossMultMeaning',\r\n    qCWRHowDenomEqual: 'CWRhowDenomEqual',\r\n    qCWRHowDenomEqual2: 'CWRhowDenomEqual2',\r\n    qCWRNumGTDen: 'CWRnumGTDen',\r\n    qCWRReadFrac: 'CWRreadFrac',\r\n    qCWRReadFracPerHour: 'CWRreadFracPerHour',\r\n    qCWRFracVal: 'CWRFracVal',\r\n    qCWRexSumFrac: 'CWRexSumFrac',\r\n    qCWRFracMultiplier: 'CWRFracMultiplier',\r\n    qCWRFracMultiplierResult: 'CWRFracMultiplierResult',\r\n\r\n    //proportion mistake dialogue\r\n    //keys.qProportionEq\r\n    // keys.qProportionRel\r\n    //keys.qProportionRateEq\r\n    //keys.qProportionRatio\r\n    \r\n    //unitConversion Dialogue\r\n    qUCproportionEq: 'qUCproportionEq',\r\n    qUCsToHEq: 'qUCsToHEq',\r\n    qUCgToKgEq: 'qUCgToKgEq',\r\n    qUCSolveForH: 'qUCSolveForH',\r\n\r\n    qGtoKgUnit: 'qGtoKgUnit',\r\n    qMetricBase: 'qMetricBase',\r\n    qTokg: 'qTokg',\r\n    qGinKg: 'qGinKg',\r\n    qGinKg: 'qGinKg',\r\n\r\n    qIntroWorkRateEq: 'introWorkRateEq',\r\n    getImg: getImg,\r\n    getSisterImg: getSisterImg,\r\n    getSis\r\n};\r\nfunction getSisterImg(k){\r\n    // return keys[`${keys[k]}-img`];\r\n    return keys[`sis${k}-img`];\r\n }\r\n function getPose(imageId, i){\r\n     switch(imageId){\r\n        case 'sweet': \r\n            if(i === 0) return 'neutral';\r\n            if(i === 1) return 'happy';\r\n            if(i === 2) return 'sad';\r\n        case 'goddess':\r\n            if(i === 0) return 'neutral';\r\n            if(i === 1) return 'shy';\r\n            if(i === 2) return 'shocked';\r\n            if(i === 3) return 'doubt';\r\n        case 'kara':\r\n            if(i === 0) return 'neutral';\r\n            if(i === 1) return 'annoyed';\r\n            if(i === 2) return 'angry';\r\n            if(i === 3) return 'shocked';\r\n        case 'ari':\r\n            if(i === 0) return 'neutral';\r\n            if(i === 1) return 'shocked';\r\n            if(i === 2) return 'sad';\r\n     }\r\n }\r\n function getSis(id, i, pose, initial, animate){\r\n     return {id, color: keys[`sis${i}Col`], name: keys[`sis${i}`], \r\n     imageId: keys[`sis${i}-img`], \r\n     pose: getPose(keys[`sis${i}-img`], pose),\r\n     initial, animate\r\n    }\r\n }\r\nfunction getImg(k){\r\n   // return keys[`${keys[k]}-img`];\r\n   if(keys[k]){\r\n    return keys[`${keys[k]}-img`];\r\n   }\r\n   return keys[`${k}-img`];\r\n}\r\n\r\nmodule.exports = keys;\r\n\r\n/**\r\n * \r\n *                     {id: `${keys.nRh}-img`, src: getImg(viewProps.meta, 'lala'),\r\n                    state: [name === keys.nRh?'activeLeft':'exitLeft']},\r\n                    {id: `${keys.nBe}-img`, src: getImg(viewProps.meta, 'neptune'),\r\n                    state: [name === keys.nBe?'activeLeft':'exitLeft']},\r\n                    {id: `${keys.Jo}-img`, src: getImg(viewProps.meta, 'kara-neutral'),\r\n                    state: [name === keys.nJo?'activeLeft':'exitLeft']},\r\n                    {id: `${keys.nSt}-img`, src: getImg(viewProps.meta, 'sweet'),\r\n                    state: [name === keys.nSt?'activeLeft':'exitLeft']},\r\n                    {id: `${keys.nSh}-img`, src: getImg(viewProps.meta, 'kamidere'),\r\n                    state: [name === keys.nSh?'activeLeft':'exitLeft']},\r\n                    {id: `${keys.nNe}-img`, src: getImg(viewProps.meta, 'arisuit-neutral'),\r\n                    state: [name === keys.nNe?'activeLeft':'exitLeft']},\r\n */","\r\nimport {log} from 'utilities/Measure';\r\n\r\nexport const getLcm = (values) => {\r\n    if(!Array.isArray(values)) throw Error(`getLcm requires an array of numbers`);\r\n    values.map(v => {\r\n        if(typeof v !== 'number'){\r\n            throw Error(`getLcm requires all elements to be numbers`);\r\n        }\r\n        if(v < 0){\r\n            throw Error(`getLcm requires all numbers to be positive`);\r\n        }\r\n    })\r\n    let max = values.reduce((agg, e, i) => {\r\n        return agg*e;\r\n    }, 1);\r\n    let hits = {};\r\n    let multiple = 1;\r\n    values.map(v => {\r\n        multiple = 1;\r\n        while(v*multiple < max){\r\n            if(hits[`${v*multiple}`]){\r\n                hits[`${v*multiple}`] = hits[`${v*multiple}`] + 1;\r\n            }else{\r\n                hits[`${v*multiple}`] = 1;\r\n            }\r\n            multiple++;\r\n        }\r\n    })\r\n    let lcm = max;\r\n    for(let i = 0; i<max; i++){\r\n        if(hits[i] === values.length && i < lcm){\r\n            lcm = i;\r\n            break;\r\n        }\r\n    }\r\n    return lcm;  \r\n}"],"sourceRoot":""}