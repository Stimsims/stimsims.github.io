{"version":3,"sources":["webpack:///./src/games/FractionsExperiment/keys.js","webpack:///./src/games/FractionsExperiment/dialogues/intro.js","webpack:///./src/games/FractionsExperiment/dialogues/index.js","webpack:///./src/games/FractionsExperiment/index.js","webpack:///./src/games/FractionsExperiment/sim.js"],"names":["keys","require","mainTheme","module","exports","dgIntro","key","pull","r","w","dialogue","id","node","read","write","makeChange","settings","viewProps","Scene","img","getSis","text","textId","audio","choice","options","map","c","out","end","GaEvent","type","path","value","loop","getDialogue","log","combinedWorkRate","output","sim","simulation","k","start","label","aclocStory","view","Dialogue","getPar","move","addons","sistersWorkRates","get","onExit","v","temp","eq","location","sentHash","recievedHash","simInit","create","randomize","format","math","score","iterators","latex","state","GameInstance","game","meta","simFields","individualWorkRates","Math","floor","random","measurements","Event","join","ray","sum","reduce","a","e","i","pow","model","Model"],"mappings":"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","file":"59-25ade82e4c9895e420ae.js","sourcesContent":["const keys = require('./../CleanWork/keys.js');\r\n\r\nkeys.mainTheme = \"strangeShop\",\r\n\r\nmodule.exports = keys;","\r\n\r\nimport React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport keys from './../keys';\r\n\r\nexport const dgIntro = {\r\n    key: 'dgIntro',\r\n    pull: (r, w) => {\r\n        return {}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            case 'color': \r\n            let colors = [\"blue\", \"green\", \"magenta\"];\r\n            return Scene(`dgIntro-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('stella', 0, 0, null, 'aL'),\r\n                    text: `As such, what is your favorite color?`, textId: node},\r\n                ],\r\n                audio: [\r\n                    {id: \"f1-laugh\"}\r\n                ],\r\n                choice: {options: colors.map(c => {\r\n                    return  <Text text={c} out={[\r\n                        {end: true},\r\n                        GaEvent('open-question', 'favorite-color', c, 0, true)\r\n                    ]} />\r\n                })\r\n            }});\r\n            case 'correlation': return Scene(`dgIntro-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('stella', 0, 1, null, 'aL'),\r\n                    text: `I am curious to see if color preference has correlation \r\n                    with people's knowledge of fractions`, textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'color'}} />\r\n                ]\r\n            }});\r\n            case 'data': return Scene(`dgIntro-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('stella', 0, 2, null, 'aL'),\r\n                    text: `By using this excerpt about fractions from a game I am currently working on.`, textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'correlation'}} />\r\n                ]\r\n            }});\r\n            default: return Scene('dgIntro-default', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('stella', 0, 1, 'iL', 'aL'),\r\n                    text: `I am testing the kinds of questions this game can answer!`, textId: 'start' },\r\n                ],\r\n                audio: [\r\n                    {id: keys.mainTheme, loop: true}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'data'}} />\r\n                ]\r\n            }});\r\n        }\r\n    }\r\n}\r\n","\r\nimport {log} from 'utilities/Measure';\r\nimport {combinedWorkRate} from './../../CleanWork/dialogues/dialogueWorkRatesCombine';\r\nimport {dgIntro} from './intro.js';\r\n\r\nexport const getDialogue = (key) => {\r\n    log(`getDialouge key ${key}`);\r\n    switch(key){\r\n        case 'dgIntro': return dgIntro;\r\n        case 'dgCombinedWorkRate': return combinedWorkRate;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Dialogue from 'game/Views/Dialogue/Dialogue.js';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport Choice from 'views/Choices/v1/Choices.js';\r\nimport keys from './keys';\r\nimport simulation from './sim.js';\r\nimport {getImg, getPar, roundTo} from 'utilities/Format.js';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport {getDialogue} from './dialogues/index';\r\nimport {log} from 'utilities/Measure';\r\n\r\n\r\nvar o = {\r\n    //n keys must match k values\r\n    sim: simulation,\r\n    k: keys,\r\n    start: 'intro',\r\n    ['trees']: { //dgWorkRateTheory\r\n        ['intro']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue('dgIntro');\r\n            return {node: 'intro', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, `dgIntro`)}\r\n                            dialogue={dialogue} \r\n                            move='combinedWorkRate'\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write)}\r\n                        />\r\n                }\r\n            }\r\n        },\r\n        ['combinedWorkRate']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue('dgCombinedWorkRate');\r\n            return {node: 'combinedWorkRate', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    let sistersWorkRates = get('individualWorkRates', read, write, []);\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, `dgCombinedWorkRate`)}\r\n                            dialogue={dialogue} \r\n                            move=\"endgame\"\r\n                            onExit={(id, v) => {\r\n                                //write.temp.combinedWorkRate\r\n                                return [\r\n                                    {type: 'set', path:'values.combinedWorkRate', \r\n                                    value: {value: v.temp.combinedWorkRate.eq}},\r\n                                    {type: 'set', path:`move`, value: {location: 'endgame'}},\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, \r\n                                {sistersWorkRates}\r\n                                )}\r\n                        />\r\n                }\r\n            }\r\n        },\r\n        ['endgame']: function(read, settings, viewProps){\r\n            return {node: 'endgame', label: keys.aclocStory,\r\n               // out: () => {return {gameover:true}},\r\n                view: (write, makeChange) => {\r\n                    //read.sentHash !== read.recievedHash\r\n                   log(`treeHash endgame node set sent ${read.sentHash} recieved ${read.recievedHash}`, read);\r\n                  \r\n                    if(read.sentHash !== read.recievedHash){\r\n                        return Scene('endgameWait', {\r\n                            settings, viewProps, makeChange, \r\n                            text: 'Waiting for server...'\r\n                        })\r\n                    }else{\r\n                        return Scene(`endgame`, {settings, viewProps, makeChange,\r\n                            // img: [\r\n                            //     {...keys.getSis(keys.nMc, 0, 1, null, 'aL'), textId: 'hello', text: [\r\n                            //         {text: `End game`}\r\n                            //     ]},\r\n                            // ],\r\n                            text: [\r\n                                {text: `End game`}\r\n                            ],\r\n                            choice: {options: [\r\n                                <Text text={\"end game\"}  out={[ {type: 'set', path: 'meta.gameover', value: true} ]} />,\r\n                                <Text text={\"retry\"}  out={[ {type: 'set', path: 'move', value: {location:'combinedWorkRate'}} ]} />\r\n                            ]}\r\n                        })\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\nconst output = o;\r\nexport default output;","\r\nvar keys = require('./keys');\r\n\r\nconst getTotalWork = (ray) => {\r\n    let sum = ray.reduce((a, e, i) => {\r\n        return a + 1/e;\r\n    }, 0);\r\n    return Math.pow(sum, -1)\r\n}\r\n\r\nvar sim =  {\r\n    //(settings, create, generate, format, math)\r\n    simInit: (settings, create, randomize, format, math, score, iterators, latex) => {\r\n \r\n        let state = new create.GameInstance('intro');\r\n        state.game.meta.simFields = ['values', 'flags', 'mcq'];\r\n        state.game.individualWorkRates = [\r\n            Math.floor(Math.random()*4)+3, \r\n            Math.floor(Math.random()*5)+7,\r\n            Math.floor(Math.random()*5)+10, \r\n        ];\r\n        state.game.meta.measurements = [\r\n            create.Event('sim','individualWorkRates', `-${state.game.individualWorkRates.join('-')}`, null, true)\r\n        ]\r\n        let combinedWorkRate = getTotalWork(state.game.individualWorkRates);\r\n        state.sim.model.combinedWorkRate = create.Model('combinedWorkRate', 'Combined Work Rate',\r\n         'Your calculation of the combined work rate from individual work rate fractions', 3, combinedWorkRate);\r\n        //Model = (key, name, description, range, value)\r\n        return state;\r\n    },\r\n}\r\nmodule.exports = sim;\r\n\r\n\r\n"],"sourceRoot":""}