{"version":3,"sources":["webpack:///./src/mycomponents/views/Time/index.js","webpack:///./src/mycomponents/views/Input/v1/Input.js","webpack:///./src/mycomponents/views/CourseWorkView/index.js"],"names":["getDigits","n","r","length","getDate","nd","getFullYear","getMonth","Time","props","time","useState","Date","current","date","setDate","hour","setHour","key","type","id","name","onChange","ev","value","target","min","required","onInput","datestring","icon","styleRequired","outline","styleNotRequired","InputView","increment","invalid","setValue","placeholder","validate","inp","isInvalid","Simple","style","inputWidth","valid","label","tag","center","clip","Array","isArray","left","color","join","className","e","v","convertToNum","autoUpdate","viewProps","showUI","getHash","text","styled","div","theme","primary","getColor","glow","CourseWorkView","log","CourseWorkWrapper","meta","title","snippet","listToEnglish","topics","mediaM","g4","secondary"],"mappings":"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","file":"views~component---src-templates-teachers-js-5ac6d648086928ab9e9d.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport IconButton from 'views/IconButton/v1/IconButton';\r\nimport {log} from 'utilities/Measure';\r\n\r\nconst getDigits = (n) => {\r\n    let r = n + \"\";\r\n    if(r.length <= 1) r = `0${r}`;\r\n    return r;\r\n}\r\nconst getDate = (nd) => {\r\n    let d = `${nd.getFullYear()}-${getDigits(nd.getMonth()+ 1)}-${getDigits(nd.getDate())}`;\r\n    return d;\r\n}\r\nconst Time = (props) => {\r\n\r\n    const [time] = useState(new Date());\r\n    const [current] = useState(getDate(time));\r\n    const [date, setDate] = useState(getDate(time));\r\n    const [hour, setHour] = useState(\"17:00\");\r\n    const handleDate = (ev) => {\r\n        let value = ev.target.value\r\n        if(value){\r\n            setDate(value);\r\n        }\r\n        \r\n    }\r\n    const handleTime = (ev) => {\r\n        let value = ev.target.value\r\n        if(value){\r\n            setHour(value);\r\n        }\r\n    }\r\n\r\n    const submit = () => {\r\n        let datestring = `${date}T${hour}`;\r\n        props.onInput(props.id, new Date(datestring))\r\n    }\r\n    return <div key=\"datetime\">\r\n        <input type=\"date\" id=\"time-date\" name=\"time-date\" onChange={handleDate} value={date} min={current} required/>\r\n        <input type=\"time\" id=\"time-hour\" name=\"time-hour\" value={hour} required onChange={handleTime} />\r\n        <IconButton \r\n            id=\"time-btn\"\r\n            onInput={submit}\r\n            icon=\"icon-checkmark\"\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default Time;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {convertToNum, roundTo, isInvalid} from 'utilities/Format.js';\r\nimport Text from 'views/Text/Text/v1/Text.js';\r\nimport IconButton from 'views/IconButton/v1/IconButton.js';\r\nimport Button from 'views/Button/v1/Button';\r\nimport {log} from 'utilities/Measure';\r\nimport {getHash} from 'utilities/Format';\r\n\r\nconst onlyNumbers = /^(-?[0-9]+(?:\\.[0-9]+)?)$/;\r\nconst InputView = (props) => {\r\n    const [value, setValue] = useState({value: props.value?props.value:props.increment?0:'', invalid: false});\r\n    const placeholder = props.placeholder || 'type a number in';\r\n\r\n    const handleChange = (e) => {\r\n       let v= convertToNum(e.target.value);\r\n        let invalid = validate(v);\r\n\r\n        setValue({value: v, invalid});\r\n        if(!invalid && props.autoUpdate){\r\n            props.onInput(props.id, v);\r\n        }\r\n    }\r\n    const handleSubmit = () => {\r\n        if(!value.invalid){\r\n            props.onInput(props.id, value.value);\r\n        }else{\r\n            if(props.viewProps){\r\n                props.viewProps.showUI('toasttool', {id: getHash(), text: \r\n                    `value ${value.value} is invalid, ${value.invalid}`});\r\n            }\r\n        }\r\n        \r\n    }\r\n  \r\n    const validate = (inp) => {\r\n        let value =  inp;\r\n        let invalid = false;\r\n        if(props.validate){\r\n            //single value validation: {numericality: true} validate.single(\"foo\", {presence: true, email: true});\r\n            invalid =  isInvalid(props.validate, value);\r\n        }\r\n        return invalid;\r\n    }\r\n\r\n    const increment = () => {\r\n        let v = roundTo(convertToNum(value.value) + props.increment, 1);\r\n        setValue({value: v, invalid: validate(v)});\r\n    }\r\n    const decrement = () => {\r\n        let v = roundTo(convertToNum(value.value) - props.increment, 1);\r\n        setValue({value: v, invalid: validate(v)});\r\n    }\r\n    const renderButtons = () => {\r\n        if(props.increment){\r\n            return <Increment>\r\n                {/* <button onClick={decrement}>-</button>\r\n                <button onClick={increment}>+</button> */}\r\n                 <IconButton icon=\"icon-minus\" fontSize=\"1.2rem\"  onInput={decrement} />\r\n                 <IconButton icon=\"icon-plus\" fontSize=\"1.2rem\"  onInput={increment} />\r\n            </Increment>\r\n        }\r\n    }\r\n    const displayValidationError = () => {\r\n        if(value.invalid){\r\n            if(Array.isArray(value.invalid)){\r\n                return <Text tag=\"p\" left clip color=\"red\">{value.invalid.join()}</Text>\r\n            }else{\r\n                return <Text tag=\"p\" left clip color=\"red\">{value.invalid}</Text>\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return <Simple key={props.id} id={props.id} style={props.required?styleRequired:styleNotRequired}\r\n            inputWidth={props.inputWidth} valid={!value.invalid}  >\r\n        {/* <p>{value.valid?'is valid':'aint valid'}</p> */}\r\n        {props.label && <Text tag=\"p\" center clip>{props.label}</Text>}\r\n        {displayValidationError()}\r\n    \r\n        <div className=\"input-wrapper\">\r\n            <input value={value.value} onChange={handleChange} placeholder={placeholder} />\r\n            {!props.autoUpdate && <IconButton onInput={handleSubmit} icon=\"icon-checkmark\" color=\"primary\" />}\r\n        </div>\r\n    </Simple>\r\n}\r\n\r\nconst styleRequired = {outline: '2px solid orange'};\r\nconst styleNotRequired = {};\r\nconst styleNotValid = {backgroundColor: 'red'};\r\nconst styleValid = {backgroundColor: 'white'};\r\n\r\nInputView.propTypes = {\r\n    inputWidth: PropTypes.string,\r\n    label: PropTypes.string,\r\n    increment: PropTypes.number,\r\n    required: PropTypes.bool,\r\n    id: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string,\r\n    value: PropTypes.number,\r\n    validate: PropTypes.object, \r\n    onInput:PropTypes.func,\r\n    autoUpdate: PropTypes.bool\r\n}\r\n\r\nexport default InputView;\r\n\r\nconst Simple = styled.div`\r\n    position: relative;\r\n    overflow: hidden;\r\n    display: inline;\r\n    padding: 5px;\r\n    p{\r\n        max-width: 200px; margin: auto;\r\n    }\r\n    .input-wrapper{\r\n        display: inline;\r\n        input{\r\n            background-color: transparent;\r\n            margin-top:5px;\r\n            color:${props => {\r\n                if(props.valid){\r\n                    return props.theme.primary;\r\n                }else{\r\n                    return 'red';\r\n                }\r\n            }};\r\n            border:none;\r\n            border-bottom: 2px solid ${props => {\r\n                if(props.valid){\r\n                    return props.theme.primary;\r\n                }else{\r\n                    return 'red';\r\n                }\r\n            }};\r\n            text-align:center;\r\n            ${props => {\r\n                if(props.inputWidth){\r\n                    return `width: ${props.inputWidth};`\r\n                }\r\n            }}\r\n        }\r\n    }\r\n`\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    overflow: hidden;\r\n    padding: 20px;\r\n    p{\r\n        max-width: 200px; margin: auto;\r\n        padding-bottom: 10px;\r\n    }\r\n    .input-wrapper{\r\n        display: inline;\r\n        height: 30px;\r\n        box-shadow: 0 0 2px #fff, 0 0 3px #fff, 0 0 5px ${props => props.theme.getColor(props.theme, props.glow)}, \r\n        0 0 6px ${props => props.theme.getColor(props.theme, props.glow)}, 0 0 8px ${props => props.theme.getColor(props.theme, props.glow)}, \r\n        0 0 10px ${props => props.theme.getColor(props.theme, props.glow)}, 0 0 20px ${props => props.theme.getColor(props.theme, props.glow)};\r\n        animation: glowB 9000ms ease 0ms infinite alternate;\r\n        input{\r\n            height: 100%;\r\n        }\r\n    }\r\n\r\n`\r\nconst Increment = styled.div`\r\n   \r\n    display: inline-block;\r\n    button{\r\n        display: inline-block;\r\n    }\r\n`","import React, {useEffect, useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {log} from 'utilities/Measure';\r\nimport Text from 'views/Text/Text/v1/Text';\r\nimport Box from 'views/Box/v1/Box';\r\nimport ClassShare from 'views/SEO/Social/ClassShare';\r\nimport {listToEnglish} from 'utilities/Format';\r\n\r\nconst CourseWorkView = (props) => {\r\n    log(`CourseWorkView props`, props);\r\n    return <CourseWorkWrapper >\r\n        {/* <div className=\"classShare\">\r\n            <ClassShare title={props.meta.title} description={`${props.meta.snippet}. Topics: ${listToEnglish(props.meta.topics)}`} />\r\n        </div> */}\r\n        <Text tag=\"h3\" className=\"text-center\" >{props.meta.title} Coursework</Text>\r\n        <Text tag=\"p\" className=\"text-center\" >{props.meta.snippet}</Text>\r\n        <ul>\r\n            <li><Text tag=\"p\" >Maximum score: 100</Text></li>\r\n            <li> <Text tag=\"p\" >Topics: {listToEnglish(props.meta.topics)}</Text></li>\r\n        </ul>\r\n        \r\n       \r\n    </CourseWorkWrapper >\r\n}\r\n\r\n\r\nCourseWorkView.propTypes = {\r\n    meta: PropTypes.object\r\n}\r\n\r\nexport default CourseWorkView;\r\n\r\nconst CourseWorkWrapper = styled.div`\r\n    max-width: ${props => props.theme.mediaM};\r\n    margin: 30px auto;\r\n    border-top: 2px solid ${props => props.theme.g4};\r\n    border-bottom: 2px solid ${props => props.theme.g4};\r\n    padding: 10px;\r\n    position: relative;\r\n    .classShare{\r\n        position: absolute;\r\n        top:0px;\r\n        right:0px;\r\n    }\r\n    ul li{\r\n        list-style-position: inside;\r\n        color: ${props => props.theme.secondary};\r\n    }\r\n`"],"sourceRoot":""}