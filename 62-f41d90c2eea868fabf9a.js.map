{"version":3,"sources":["webpack:///./src/games/CleanWork/sim.js","webpack:///./src/games/CleanWork/dialogues/dialoguesWinLose.js","webpack:///./src/games/CleanWork/dialogues/dialoguesPlot.js","webpack:///./src/games/CleanWork/dialogues/dialogueEnds.js","webpack:///./src/games/CleanWork/dialogues/dialoguesPlaces.js","webpack:///./src/games/CleanWork/dialogues/dialogueWorkRates.js","webpack:///./src/games/CleanWork/dialogues/dialogueWorkRateFormula.js","webpack:///./src/games/CleanWork/dialogues/dialoguesMistakes.js","webpack:///./src/games/CleanWork/dialogues/dialogueClients.js","webpack:///./src/games/CleanWork/dialogues/dialogueSisters.js","webpack:///./src/games/CleanWork/dialogues/index.js","webpack:///./src/games/CleanWork/views/requestText.js","webpack:///./src/games/CleanWork/views/stateText.js","webpack:///./src/games/CleanWork/views/ReviewText.js","webpack:///./src/games/CleanWork/views/index.js","webpack:///./src/games/CleanWork/index.js"],"names":["customerIds","keys","require","workers","nBe","nSh","nRh","nNe","nJo","getTotalWork","nSt","ray","sum","reduce","a","e","i","Math","pow","SIS_WORK_RANGES","SCORE_RANGE_COMBINED_WORK","createToxicWasteRequest","id","flags","format","randomize","latex","sistersWorkRates","getRange","map","wr","roundTo","combinedTime","clientId","shuf","cliCorrosion","cliParanormal","cliPlantDisease","cliTempFlux","cliMagicMold","cliFratBoys","length","pop","console","log","getCustomerId","jobSizes","sampleSize","value","unit","uGr","siteSize","uKi","getJobSizes","sampleSizeInSiteUnits","fromUnit","toUnit","convert","siteSeconds","siteHours","game","sim","getNewRequests","num","state","requests","job","jobs","Object","push","getHash","j","simInit","settings","create","math","score","iterators","GameInstance","meta","simFields","scores","combinedRate","AssessmentScore","combinedRateLatest","secondsToHours","secondsToHoursLatest","numReviews","money","values","uDollar","reviewAggregate","total","avg","testLoop","inputs","change","loop","sRequest","uRequest","kRequests","review","scoreCombinedRate","scoreCombinedRateLatest","k","hasOwnProperty","scoreValue","hoursScore","scoreDistance","notes","simCombinedTime","scoreCombinedTime","simSolutionHours","solutionHours","scoreSolutionHours","reviewScore","fee","tip","module","exports","dgWin","key","move","pull","read","write","get","dialogue","node","makeChange","viewProps","Scene","img","getSis","convoId","textId","text","choice","options","out","end","dgIntro","workRateFormulas","eq","toLatex","nReviews","reviewThreshold","type","path","audio","mainTheme","volume","dgGoodEnd","r","w","temp","endIntro","dgBadEnd","sis0","next","sisMc","dgEmployeeSection","employees","lastEmployee","employeeNames","filter","f","pPwr","index","indexOf","name","employee","partialEmployeeView","disabled","dgSampleSiteSize","unitConversionEqs","getConversionFormula","unitVariable","siteToSampleValue","timeRatioEqs","siteToSampleRatioEqs","ratio","timeRatioEq","gramsInKilograms","ansGramsInKilograms","onInput","v","tre","getMultiple","getFraction","solution","toNum","evaluate","ratios","initial","animate","dgCombinedWorkRateFormula","Dialogue","getValue","item","isLatex","val","isNaN","getProportion","order","dgUnitConversion","request","category","getDialogueCategory","estimatedSeconds","estimatedSecondsR","roundSec","eqMap","uSe","uHo","valueMap","proportionEqs","MCQ","qUCproportionEq","secondsToHoursEqs","gramsToKilogramsEqs","modifiedValueMap","convertedWeight","convertedTime","selectedProportion","modifiedProportion","selectedEqMap","hourAlts","roundTime","qUCSolveForH","h","actions","nValueMap","gtk","modified","qUCgToKgEq","sth","qUCsToHEq","proportion","solved","solveFor","rhs","ans","ansAlts","eqs","dgWorkRateTheory","workRateEqs","workUnitEqs","workUnitEq","workRateEq","acGameMCQ","wrtOperation","WRTcombinedVsIndiv","href","leave","WRTdenomFracVal","tForm","dgGeneric","nMc","imageId","getImg","pose","dgProportions","sampleRate","ratioEqs","acMath","qProportionEq","proportionalOptions","p","qProportionRel","qProportionRateEq","ratioOptions","qProportionRatio","dgGramsToKilogramsMistake","unitOptions","qGtoKgUnit","listToEnglish","metricOptions","qMetricBase","gToKgOptions","qTokg","kiloOptions","qGinKg","selectedConversionEq","dgNoVar","mistake","lhs","getEqSide","dgTwoVars","demoEq","variables","getVariables","demoAnswer","dgCombineVarRhs","dgSecondsToHoursMistake","answerHours","timeOptions","wrongEq","secondsInMinute","minutesToHours","minutes","smhEqs","userAnswer","isCorrect","secToMinEq","operation","stm","mth","solutions","t","secToMinEqs","dgTimeRatioMistake","correctEq","dgClientStory","jobSize","dgCorrosion","dgParanormal","dgPlantDisease","dgMagicMold","dgTeenageBoys","dgTempFlux","dgGenericClient","colortext","className","color","random","dgHeadSister","dgSister2","sis2","dgFastSisterDenominator","numberEq","qSFCoefficientSemantics","qSFLargerFraction","qSFDenominatorMeaning","fontSize","getDialogue","dialogueWin","dialogueIntro","dialogueEmployeeSection","combinedWorkRate","dgEmployeeWorkRate","employeeName","applicants","equations","pWorkTotal","steadyStellaWorkRate","eqVarWorker","eqWorkRate","eqResults","solvedX","dp","solvedOptions","solveEq","qSoleWorkRateXSol","space","eqCommonDenominator","qSoleEqMultFrac","cd","workTotal","cdOptions","c","cdVal","Operation","results","operate","EQLR","expand","equation","qSoleCommonMult","lhsVariables","qMistSWRCorrEq","description","getEmployeeDescription","dgSolveJob","employeesNames","assigned","skills","jobId","remainder","totalTime","workMax","workMin","multipliedEq","totalTimeOptions","workUnits","qTotalTime","multiplied","lcm","solvedValue","solvedTotal","qTotalMultLcm","lcms","workRate","result","qTotalLcm","qTotalEq","hasDecimal","workRates","max","counter","least_common_multiple","workRateOptions","specs","rand","employeeText","textClassName","tag","divide","nAss","s","valid","assignedEmployees","numerator","join","src","nRhnSh","nJonNenSt","nJonRhnSt","nStnJo","dgClientGeneric","dgRadVibToxicFratBoys","getRequestText","texts","getClientText","location","getBusinessState","reviews","getReviewReportText","getReviewString","str","getReviewClientText","userAns","simAns","comment","getClientComment","getText","noTextFound","output","simulation","n","start","label","aclocStory","view","getPar","addons","playerWorkRate","aclocData","stop","sis1","sentHash","recievedHash","requestId","problemDialogue","onExit","DELETED","dgCombinedWorkRate","nRequest","dialogueKey","workerScene","generic","client","sorted","sort","getWorkerDialogue","workEndReal","workEnd","clientDialogue","getClientDialogue","retry","Error","sendError"],"mappings":"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","file":"62-f41d90c2eea868fabf9a.js","sourcesContent":["\r\nvar keys = require('./keys');\r\n\r\nconst workers = [\r\n    keys.nBe, keys.nSh, keys.nRh, keys.nNe, keys.nJo\r\n];\r\nconst SPEC_RAD = 'radiation'\r\nconst SPEC_VIB = 'vibration';\r\nconst SPEC_DARK = 'dark';\r\nconst SPEC_MOLD = 'mold';\r\n\r\n\r\nconst SPECIALIZATIONS = [SPEC_RAD, SPEC_VIB, SPEC_DARK, SPEC_MOLD];\r\n\r\nconst workerSpecialties = {\r\n    [keys.nSt]: [SPEC_MOLD],\r\n    [workers[0]]: [SPEC_VIB, SPEC_RAD],\r\n    [workers[1]]: [SPEC_RAD],\r\n    [workers[2]]: [SPEC_DARK, SPEC_MOLD],\r\n    [workers[3]]: [SPEC_MOLD, SPEC_VIB],\r\n    [workers[4]]: [SPEC_RAD, SPEC_DARK, SPEC_VIB],\r\n}\r\nconst getTotalWork = (ray) => {\r\n    let sum = ray.reduce((a, e, i) => {\r\n        return a + 1/e;\r\n    }, 0);\r\n    return Math.pow(sum, -1)\r\n}\r\n\r\nconst SIS_WORK_RANGES = [\r\n    [3, 6],\r\n    [7, 12],\r\n    [12, 18]\r\n]\r\n\r\n//const totalWorkRangeMin = getTotalWork([SIS_WORK_RANGES[0][0], SIS_WORK_RANGES[1][0], SIS_WORK_RANGES[2][0]]);\r\nconst SCORE_RANGE_COMBINED_WORK = getTotalWork([SIS_WORK_RANGES[0][1], SIS_WORK_RANGES[1][1], SIS_WORK_RANGES[2][1]]);\r\nconst SCORE_RANGE_HOURS = 5;\r\n\r\nconst convert = (value, fromUnit, toUnit) => {\r\n    switch(fromUnit){\r\n        case keys.uGr:\r\n            if(toUnit === keys.uKi){\r\n                return value*0.001;\r\n            }\r\n    }\r\n}\r\n\r\n\r\nvar customerIds;\r\nconst getCustomerId = (format) => {\r\n    if(!customerIds){\r\n        customerIds = format.shuf([keys.cliCorrosion, keys.cliParanormal, keys.cliPlantDisease, keys.cliTempFlux, keys.cliMagicMold, keys.cliFratBoys])\r\n    }\r\n    let id;\r\n  \r\n    if(customerIds.length > 0){\r\n        id = customerIds.pop();\r\n    }else{\r\n        id = 'customerGeneric';\r\n    }\r\n    console.log(`sim create getCustomerId ${customerIds.length} id ${id}`)\r\n    return id;\r\n}\r\nconst getJobSizes = (clientId, randomize) => {\r\n    return {\r\n        sampleSize: {value: randomize.getRange(5, 15), unit: keys.uGr},\r\n        siteSize: {value: randomize.getRange(50, 150), unit: keys.uKi}\r\n    }\r\n}\r\n\r\nconst createToxicWasteRequest = (id, flags, format, randomize, latex) => {\r\n    //let clientId = getCustomerId(flags);\r\n\r\n    let sistersWorkRates = [randomize.getRange(SIS_WORK_RANGES[0][0], SIS_WORK_RANGES[0][1], 0), \r\n                            randomize.getRange(SIS_WORK_RANGES[1][0], SIS_WORK_RANGES[1][1], 0), \r\n                            randomize.getRange(SIS_WORK_RANGES[2][0], SIS_WORK_RANGES[2][1], 0)];\r\n    sistersWorkRates = sistersWorkRates.map(wr => format.roundTo(wr, 2));\r\n //  let order = [0, 1, 2]; //determines which sister discoveres what\r\n    //combined work rate for all three, used in combined work rate problem\r\n    let combinedTime = getTotalWork(sistersWorkRates);\r\n    let clientId = getCustomerId(format);\r\n    let jobSizes = getJobSizes(clientId, randomize);\r\n    let sampleSizeInSiteUnits = convert(jobSizes.sampleSize.value, jobSizes.sampleSize.unit, jobSizes.siteSize.unit);\r\n    let siteSeconds = (combinedTime*jobSizes.siteSize.value)/sampleSizeInSiteUnits;\r\n    let siteHours = siteSeconds/(60*60);\r\n    let game = {\r\n            id, clientId, //sisterOrder: order, \r\n            sistersWorkRates, ...jobSizes\r\n        };\r\n    return {\r\n        game,\r\n        sim: {\r\n            ...game,\r\n            sistersWorkRates,\r\n            combinedTime,\r\n            siteSeconds,\r\n            siteHours\r\n        }\r\n    }\r\n}\r\n\r\nconst getNewRequests = (num, state, flags, format, randomize, latex) => {\r\n    state.game.requests = state.game.requests || {}\r\n    state.sim.requests = state.sim.requests || {}\r\n    let jobs = Object.keys(state.sim.requests), job;\r\n    while(jobs.length < num){\r\n        jobs.push(randomize.getHash());\r\n    }\r\n    jobs = jobs.map(j => {\r\n        if(!state.sim.requests[j]){\r\n            job = createToxicWasteRequest(j, state.game.flags, format, randomize, latex);\r\n            console.log(`sim created job customerIds ${customerIds}`, job);\r\n            state.game.requests[j] = job.game; \r\n            state.sim.requests[j] = job.sim;\r\n        }\r\n    })\r\n    return state;\r\n}\r\n\r\n\r\n\r\nvar sim =  {\r\n    //(settings, create, generate, format, math)\r\n    simInit: (settings, create, randomize, format, math, score, iterators, latex) => {\r\n        let state = new create.GameInstance('intro');\r\n\r\n        state.game.meta.simFields = ['values', 'requests', 'reviews', 'flags', 'mcq'];\r\n\r\n        state.sim.scores.combinedRate = create.AssessmentScore('combinedRate', 2, 5, 1);\r\n        state.sim.scores.combinedRateLatest = create.AssessmentScore('combinedRateLatest', 2, 5, 1);\r\n        //state.sim.scores.soloRate = create.AssessmentScore('soloRate', 0, 0, 1);\r\n        state.sim.scores.secondsToHours = create.AssessmentScore('secondsToHours', 0, 0, 1);\r\n        state.sim.scores.secondsToHoursLatest = create.AssessmentScore('secondsToHoursLatest', 0, 1, 1);\r\n\r\n        state.game.meta.numReviews = 3;\r\n        state.sim.numReviews = 3;\r\n        state.sim.money = 500;\r\n        state.game.values.money = {value: 500, unit: keys.uDollar};\r\n        state.sim.reviewAggregate = {total: 0, value: 0, avg: 0};\r\n        state.game.values.reviewAggregate = state.sim.reviewAggregate;\r\n       \r\n        //make initial job involving \r\n        state.game.requests = { }\r\n        state.sim.requests = { }\r\n        getNewRequests(3, state, state.game.flags, format, randomize, latex);\r\n        console.log(`simInit state`, state);\r\n        return state;\r\n    },\r\n    testLoop: function(inputs, state, settings, create, randomize, format, math, score, iterators, latex){\r\n        let change = {};\r\n        change[`game.values.reviewAggregate`] = {\r\n            total: 10, value: 47, avg: 4.7\r\n        };\r\n        change[`game.meta.move.location`] = 'endgame';\r\n        return change;\r\n    },\r\n    loop: function(inputs, state, settings, create, randomize, format, math, score, iterators, latex){\r\n        let change = {};\r\n        let flags = state.game.flags;\r\n        let money = state.sim.money;\r\n        let reviewAggregate = {...state.sim.reviewAggregate};\r\n\r\n        //iterate through requests, grading any that have combinedTime property\r\n        let requests = state.sim.requests;\r\n        let kRequests = Object.keys(requests);\r\n        let sRequest, uRequest, review = {};\r\n        let scoreCombinedRate = {...state.sim.scores.combinedRate};\r\n        let scoreCombinedRateLatest = {...state.sim.scores.combinedRateLatest};\r\n        //let scoreSoloRate = {...state.sim.scores.soloRate};\r\n        let secondsToHours = {...state.sim.scores.secondsToHours};\r\n        let secondsToHoursLatest = {...state.sim.scores.secondsToHoursLatest};\r\n        kRequests.map(k => {\r\n            sRequest = requests[k];\r\n            uRequest = state.game.requests[k];\r\n            review = {...uRequest};\r\n            if(uRequest.hasOwnProperty('combinedTime')){\r\n                //the job has been completed, remove it\r\n                delete state.sim.requests[k];\r\n                delete state.game.requests[k];\r\n                //compare sim.SistersWorkRates to game.sistersWorkRates, except for the first one\r\n                // let sSisWR = sRequest.sistersWorkRates.slice(1);\r\n                // let uSisWR = uRequest.sistersWorkRates.slice(1);\r\n               // let scores = [];\r\n                //for user feedback client side\r\n                // let answers = [];\r\n                // let userAnswers = [];\r\n                let scoreValue = 0, hoursScore = 0;\r\n                //mark the solo work rates\r\n                // sSisWR.map((e, i) => {\r\n                //     scoreValue = score.scoreDistance(e, SIS_WORK_RANGES[i][0], uSisWR[i]);\r\n                //     scoreSoloRate.total += 1;\r\n                //     scoreSoloRate.score += scoreValue;\r\n                //     scoreSoloRate.notes.push(`Player thought sisters work rate for job ${uRequest.clientId} \r\n                //             was ${format.roundTo(uSisWR[i], 2)}, but it was ${e}. They scored ${scoreValue}.`)\r\n                //     scores.push(scoreValue);\r\n                //     answers.push(format.roundTo(e, 2));\r\n                //     userAnswers.push(format.roundTo(uSisWR[i], 2));\r\n                // })\r\n                //mark the combined work rates\r\n                scoreValue = score.scoreDistance(sRequest.combinedTime, SCORE_RANGE_COMBINED_WORK, uRequest.combinedTime);\r\n               //  scores.push(scoreValue);\r\n                 scoreCombinedRate = {...state.sim.scores.combinedRate};\r\n                 scoreCombinedRate.total += 1;\r\n                 scoreCombinedRate.score += scoreValue;\r\n                 scoreCombinedRate.notes.push(`Player calculated the fairies combined \r\n                    work rate to be ${format.roundTo(uRequest.combinedTime, 2)}\r\n                    when the answer was ${format.roundTo(sRequest.combinedTime, 2)}`);\r\n                scoreCombinedRateLatest.total =1;\r\n                scoreCombinedRateLatest.score = scoreValue;\r\n                review.simCombinedTime = sRequest.combinedTime;\r\n                review.scoreCombinedTime = scoreValue;\r\n   \r\n                // scoreSoloRate.total += 1;\r\n                // scoreSoloRate.score += scoreValue;\r\n                // scoreSoloRate.notes.push(`Player thought the sisters combined work rate for job ${uRequest.clientId} \r\n                //             was ${format.roundTo(uRequest.combinedTime, 2)}, but it was ${format.roundTo(sRequest.combinedTime, 2)}. They scored ${scoreValue}.`)\r\n                //  answers.push(format.roundTo(sRequest.combinedTime, keys.roundWeight));\r\n                // userAnswers.push(format.roundTo(uRequest.combinedTime, keys.roundWeight));\r\n            \r\n                //mark the estimate in hours\r\n                //siteHours vs solutionHours\r\n                review.simSolutionHours = sRequest.siteHours;\r\n                hoursScore = score.scoreDistance(sRequest.siteHours, SCORE_RANGE_HOURS, uRequest.solutionHours);\r\n                review.scoreSolutionHours = hoursScore;\r\n                // answers.push(format.roundTo(sRequest.siteHours, keys.roundTime));\r\n                // userAnswers.push(format.roundTo(uRequest.solutionHours, keys.roundTime));\r\n              \r\n                //scores.push(hoursScore);\r\n                secondsToHours.total += 1;\r\n                secondsToHours.score += hoursScore;\r\n                secondsToHours.notes.push(`The player had to convert their answer, ${format.roundTo(uRequest.combinedTime, 2)} seconds,\r\n                for the combined time to break down the sample ${sRequest.sampleSize.value}${sRequest.sampleSize.unit}\r\n                to the estimated amount of time it'd take to break down ${sRequest.siteSize.value}${sRequest.siteSize.unit}.\r\n                The player answered ${format.roundTo(uRequest.solutionHours, 2)} hours, \r\n                the answer was ${format.roundTo(sRequest.siteHours)} hours.`);\r\n                //so the user gets rewarded if they improve\r\n                secondsToHoursLatest.total = 1;\r\n                secondsToHoursLatest.score = hoursScore;\r\n               \r\n\r\n                //review object for user feedback\r\n                //calculate the review score from the estimated hours\r\n                review.reviewScore = format.roundTo(hoursScore*5, 2);\r\n                reviewAggregate.total += 1;\r\n                reviewAggregate.value += review.reviewScore;\r\n                reviewAggregate.avg = format.roundTo(reviewAggregate.value/reviewAggregate.total);\r\n               // review.scores = scores;\r\n                // review.answers = answers;\r\n                // review.userAnswers = userAnswers;\r\n                //calculate money earned\r\n                review.fee = 300;\r\n                review.tip = review.fee*2*review.reviewScore;\r\n                console.log(`sim sRequest`, sRequest);\r\n                console.log(`sim uRequest`, uRequest);\r\n                console.log(`sim review`, review);\r\n                change[`sim.money`] = state.sim.money +  review.fee +  review.tip;\r\n                change[`game.values.money`] = {value: change[`sim.money`], unit: keys.uDollar};\r\n                //update the game state\r\n                change[`game.review`] = review;\r\n                change[`sim.reviewAggregate`] = reviewAggregate;\r\n                change[`game.values.reviewAggregate`] = reviewAggregate;\r\n                console.log(`sim review total ${reviewAggregate.total} numReviews ${state.sim.numReviews}`, state);\r\n                if(reviewAggregate.total >= state.sim.numReviews){\r\n                    change[`game.move.location`] = 'endgame';\r\n                }\r\n                \r\n            }\r\n        })\r\n\r\n        getNewRequests(3, state, state.game.flags, format, randomize, latex);\r\n        change[`game.requests`] = state.game.requests;\r\n        change[`sim.requests`] = state.sim.requests;\r\n        change[`sim.scores.combinedRate`] = scoreCombinedRate;\r\n        change[`sim.scores.combinedRateLatest`] = scoreCombinedRateLatest;\r\n        change[`sim.scores.secondsToHours`] = secondsToHours;\r\n        change[`sim.scores.secondsToHoursLatest`] = secondsToHoursLatest;\r\n      //  change[`sim.scores.soloRate`] = scoreSoloRate;\r\n        return change;\r\n    },\r\n}\r\nmodule.exports = sim;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst getClientId = (specs, flags) => {\r\n    //if all special missions have flags set, just use generic\r\n    let id = null;\r\n    if(!flags[keys.cliFratBoys] && specs.length === 2 \r\n        && specs.indexOf(SPEC_RAD) >  -1 && specs.indexOf(SPEC_VIB)){\r\n        id = keys.cliFratBoys;\r\n    }else if(!flags['dgRadMo1'] && specs.length === 2 \r\n        && specs.indexOf(SPEC_RAD) >  -1 && specs.indexOf(SPEC_MOLD)){\r\n        //radioactive mold chefs\r\n        id = 'dgRadMo1';\r\n    }else if(!flags['dgDaVib1'] && specs.length === 2 \r\n        && specs.indexOf(SPEC_DARK) >  -1 && specs.indexOf(SPEC_VIB)){\r\n        id='dgDaVib1'; //jewellery collector\r\n    }else if(!flags['dgDaMo1'] && specs.length === 2 \r\n        && specs.indexOf(SPEC_DARK) >  -1 && specs.indexOf(SPEC_MOLD)){\r\n        id=\"dgDaMo1\"; //absorbs the light, chefs\r\n    }\r\n    return id;\r\n}\r\n","\r\nimport React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\n\r\n\r\nexport const dgWin = {\r\n    key: `dgWin`,\r\n    move: 'endgame',\r\n    pull: (read, write) => {\r\n        let reviewScore = get('game.values.reviewAvg', read, write, 58);\r\n        return {reviewScore};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene(`dgWin`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: 'tdef1', text: [\r\n                        {text: `We won`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\n\r\n","\r\n\r\nimport React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent } from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport keys from './../keys';\r\n\r\n\r\n\r\nexport const dgIntro = {\r\n    key: 'dgIntro',\r\n    pull: (read, write) => {\r\n        let workRateFormulas = [\r\n            `1/totalWorkTime=1/workRateA + 1/workRateB`,\r\n            `1/workRateA= 1/totalWorkTime + 1/workRateB`,\r\n            `1/totalWorkTime=1/workRateA - 1/workRateB`,\r\n            `1/totalWorkTime=1/workRateA*1/workRateB`,\r\n        ];\r\n        workRateFormulas = workRateFormulas.map(e => {\r\n            return {eq: e, latex: toLatex(e)}\r\n        })\r\n        return {workRateFormulas}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            case 'excellent': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 1, null, 'aR'),\r\n                    text: `Let's give it a shot!`, textId: node },\r\n                ],\r\n                choice: {options: [  <Text text={\"next\"} out={{end: true}} /> ] }\r\n            });\r\n            case 'warning': \r\n            let nReviews = get('meta.numReviews', read, write, null);\r\n            return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 1, null, 'aL'),\r\n                    text: `But I won't work on an unprofessional venture. If, after say...${nReviews} reviews, \r\n                    we don't have a review score higher than ${keys.reviewThreshold}, I'm out.`, \r\n                    textId: node},\r\n                    {...keys.getSis('stella', 0, 2, null, 'aR') },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'excellent'}} />,\r\n                ]\r\n            }});\r\n            case 'alright': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL'),\r\n                    text: `Alright, I'll let the clients know how long it'll take you girls to...'eat'... the damage.`, \r\n                    textId: node},\r\n                    {...keys.getSis('stella', 0, 1, null, 'aR') },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'warning'}} />,\r\n                ]\r\n            }});\r\n            case 'whatNumbers2': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 1, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 0, null, 'aR'),\r\n                    text: `They care about precision, not speed. You have a way of knowing precisely when something will occur.`,\r\n                    textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"I do\"} out={{type: 'set', path: 'temp.node', value: 'cleansingNumbers'}} />\r\n                ]\r\n            }});\r\n            case 'whatNumbers': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 0, null, 'aR'),\r\n                    text: `The clientelle are large businesses. They need their schedules to go as planned, \r\n                    undisrupted by their base of operations being cleansed too early or too late.`,\r\n                     textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"I do\"} out={{type: 'set', path: 'temp.node', value: 'whatNumbers2'}} />\r\n                ]\r\n            }});\r\n            case 'whatToxic4': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 1, null, 'aR'),\r\n                    text: `Oh yes~ though ghosts aren't my favorite.`, \r\n                    textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'cleansingNumbers'}} />,\r\n                ]\r\n            }});\r\n            case 'whatToxic3': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 3, null, 'aL'),\r\n                    text: `I know that radioactivity and mold are tasty to you, but can you really eat ghosts?`, \r\n                    textId: node},\r\n                    {...keys.getSis('stella', 0, 0, null, 'aR') },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'whatToxic4'}} />,\r\n                ]\r\n            }});\r\n            case 'whatToxic2': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 1, null, 'aR'),\r\n                    text: `We'll be doing the community a great service, and get something good to eat at last`, \r\n                    textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'whatToxic3'}} />,\r\n                ]\r\n            }});\r\n            case 'whatToxic': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 2, null, 'aR'),\r\n                    text: `The worst kind. Radioactive, moldy disasters. Possibly even paranormal ones.`,\r\n                    textId: node},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"Good, we'll be giving something back to the community, at last\"} out={{type: 'set', path: 'temp.node', value: 'cleansingNumbers'}} />,\r\n                    <Text text={\"Why do you want to do it?\"} \r\n                        out={{type: 'set', path: 'temp.node', value: 'whatToxic2'}} />\r\n                ]\r\n            }});\r\n            case 'cleansingNumbers': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 0, null, 'aR'),\r\n                    text: `Between my cleansing experience and your numbers, we could do well.`, \r\n                    textId: node},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={'\"What do you need my numbers for?\"'} out={{type: 'set', path: 'temp.node', value: 'whatNumbers'}} />,\r\n                    <Text text={'\"What kind of toxic filth?\"'} out={{type: 'set', path: 'temp.node', value: 'whatToxic'}} />,\r\n                    <Text text={`\"Alright, I'll get your answers for you\"`} out={{type: 'set', path: 'temp.node', value: 'alright'}} />,\r\n                ]\r\n            }});\r\n            case 'begging2': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 0, null, 'aR'),\r\n                    text: `Our cleansing competition is pitifal or non existant.`,  textId: node},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'cleansingNumbers'}} />\r\n                ]\r\n            }});\r\n            case 'begging': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('stella', 0, 2, null, 'aR'),\r\n                    text: `I thought...well, they're not the only companies with sickening messes to clean.`, \r\n                    textId: node },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'begging2'}} />\r\n                ]\r\n            }});\r\n            case 'start2':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                 img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, null, 'aL')},\r\n                     {...keys.getSis('stella', 0, 1, null, 'aR'), \r\n                     text: [  {text: `The board of directors is practically begging.`} ], \r\n                     textId: node},\r\n                 ],\r\n                 choice: {options: [\r\n                     <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'begging'}} />\r\n                 ]\r\n             }});\r\n  \r\n            default: \r\n            return Scene('dgIntro-start', {settings, viewProps, makeChange,\r\n                audio: [\r\n                    {id: keys.mainTheme, loop: true},\r\n                    {id: \"f1-laugh\", volume: 0.1}\r\n                ],\r\n                img: [\r\n                    {...keys.getSis('kara', 'Mc', 0, 'iL', 'aL')},\r\n                    {...keys.getSis('stella', 0, 1, 'iR', 'aR'),\r\n                    textId: 'ts1', text: [\r\n                        {text: `They can't find anyone who can clean up that radioactive spill.`}\r\n                    ]}, \r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'start2'}} />\r\n                    //<Text text={\"next\"} out={{end:true}} />\r\n                ]\r\n            }});\r\n        }\r\n    }\r\n}","\r\nimport React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent } from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport keys from './../keys';\r\n\r\n/*\r\n                     let reviewAggregate = get('values.reviewAggregate', read, write,{\r\n                            total: 3,\r\n                            value: 2,\r\n                            avg: roundTo(2/3, 2)\r\n                        });\r\n                        //game.review\r\n                        let review = get('game.review', read, write,{\r\n                            reviewScore: 3,\r\n                            fee: 300,\r\n                            tip:30\r\n                        });\r\n*/\r\nexport const dgGoodEnd = {\r\n    key: 'dgGoodEnd',\r\n    pull: (r, w, review, reviewAggregate) => {\r\n        //get review aggregate and last review\r\n        return {review, reviewAggregate}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let review = write.temp.review;\r\n        let reviewAggregate = write.temp.reviewAggregate;\r\n        switch(node){\r\n            case 'toxicGood': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR'), convoId: 'endScene', textId: node, \r\n                    text: [{text: `You need the 'magic' to understand, little sister.`}]}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{end: true}} />\r\n                ]\r\n            }});\r\n            case 'revenue': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: `You'd do this just for the toxic waste wouldn't you?` },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'toxicGood'}} />\r\n                ]\r\n            }});\r\n            case 'excellent': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR'), convoId: 'endScene', textId: node, \r\n                    text: [{text: `Excellent! I'll let the other fairies know the feast won't be interrupted by your 'standards'.`}]}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'revenue'}} />\r\n                ]\r\n            }});\r\n            case 'proceed': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: `I am happy to proceed with this business scheme of yours.` },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'excellent'}} />\r\n                ]\r\n            }});\r\n            case 'goodStart3':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: [\r\n                        {text: `My calculations of when you'd finish the jobs were good enough!`}\r\n                    ] },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'proceed'}} />\r\n                ]\r\n            }});\r\n            case 'goodStart2':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: [\r\n                        review.reviewScore > reviewAggregate.avg?\r\n                            {text:`That last review of ${review.reviewScore}, was even better!.`}\r\n                            :{text:`The last review of ${review.reviewScore} wasn't as good, but we're doing well.`}\r\n                    ] },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'goodStart3'}} />\r\n                ]\r\n            }});\r\n            case 'goodStart': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: `After ${reviewAggregate.total} reviews, we got an average of ${reviewAggregate.avg}. The revenue is good too.` },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'goodStart2'}} />\r\n                ]\r\n            }});\r\n            default:\r\n                return endIntro('goodStart', id, node, read, write, makeChange, settings, viewProps)\r\n        }\r\n    }\r\n}\r\n\r\nexport const dgBadEnd = {\r\n    key: 'dgBadEnd',\r\n    pull: (r, w, review, reviewAggregate) => {\r\n        return {review, reviewAggregate}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dialogue ${id} write`, write);\r\n        let review = write.temp.review;\r\n        let reviewAggregate = write.temp.reviewAggregate;\r\n        switch(node){\r\n            case 'thanks': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR'), convoId: 'endScene', textId: node, \r\n                    text: [{text: `You know me! Thanks for trying anyway. I thought you did great.`}]}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{end: true}} />\r\n                ]\r\n            }});\r\n            case 'legal':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: `Just keep it legal.` },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'thanks'}} />\r\n                ]\r\n            }});\r\n            case 'creative': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR'), convoId: 'endScene', textId: node, \r\n                    text: [{text: `Fine... I'll let the other fairies know we'll \r\n                    have to get more creative access to the companies accidents.`}]}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'legal'}} />\r\n                ]\r\n            }});\r\n            case 'standards':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: `No. I have minimum standards. \r\n                    Sorry if that's an estranged concept to you, ${keys.sis0}. \r\n                    This business experiment is over.` },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'creative'}} />\r\n                ]\r\n            }});\r\n            case 'sadNews': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR'), convoId: 'endScene', textId: node, \r\n                    text: [{text: `Ah...you know you could relax for once and just enjoy the 'work', \r\n                    even if the clients don't...`}]}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'standards'}} />\r\n                ]\r\n            }});\r\n            case 'badStart3':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: [\r\n                        {text: `My calculations of when you'd complete the jobs \r\n                        were just too inaccurate for the clients satisfaction.`}\r\n                    ] },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'sadNews'}} />\r\n                ]\r\n            }});\r\n            case 'badStart2':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: [\r\n                        review.reviewScore > reviewAggregate.avg?\r\n                            {text:`The last review of ${review.reviewScore}, was better, but it's not enough.`}\r\n                            :{text:`The last review of ${review.reviewScore}, was worse than average.`}\r\n                    ] },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'badStart3'}} />\r\n                ]\r\n            }});\r\n            case 'badStart':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1,  null, 'aL'),\r\n                    convoId: 'endScene', textId: node, \r\n                    text: `After ${reviewAggregate.total} reviews, we got an average of ${reviewAggregate.avg}...` },\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'badStart2'}} />\r\n                ]\r\n            }});\r\n            default:\r\n                return endIntro('badStart', id, node, read, write, makeChange, settings, viewProps)\r\n        }\r\n    }\r\n}\r\n\r\nconst endIntro = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    switch(node){\r\n        case 'tellMe': return Scene(`dgBadEnd-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, 'iR', 'aR'), convoId: 'endScene', textId: node, \r\n                text: [{text: `What's the verdict, ${keys.sisMc}?`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: next}} />\r\n            ]\r\n        }});\r\n        default:\r\n            return Scene('dgBadEnd-default', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 1, 'iL', 'aL'), convoId: 'endScene', textId: 'start', \r\n                    text: [{text: `Alright, we've got enough reviews to see if this venture is worth my time.`}]},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR')}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"great\"} out={{type: 'set', path: 'temp.node', value: 'tellMe'}} />\r\n                ]\r\n            }});\r\n    }\r\n}","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\nexport const dgEmployeeSection = {\r\n    key: 'dgEmployeeSection',\r\n    pull: (read, write) => {\r\n        let employees = get('employees', read, write, null, true);\r\n        let lastEmployee = get('meta.newEmployee', read, write, null, true);\r\n        let employeeNames = shuf(Object.keys(employees));\r\n        employeeNames = employeeNames.filter(f => employees[f].hasOwnProperty(keys.pPwr));\r\n        let index = 0;\r\n        if(lastEmployee && employeeNames.indexOf(lastEmployee) > -1){\r\n            index = employeeNames.indexOf(lastEmployee);\r\n        }\r\n        return {employeeNames, employees, index};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n     \r\n        let name = write.temp.employeeNames[write.temp.index];\r\n        let employee = write.temp.employees[name];\r\n        switch(node){\r\n            default: return Scene(`dgEmployeeSection-start-${name}`, {\r\n                settings, viewProps, makeChange,\r\n                ...partialEmployeeView(employee, viewProps),\r\n                choice: {\r\n                    options: [\r\n                        <Text text=\"Back\" out={{end: true}} />,\r\n                        <Text disabled={name === keys.nSt} text=\"Retry\" out={name === keys.nSt?null:[\r\n                                {type: 'set', path: 'temp.retry', value: name},\r\n                                {end:true},\r\n                            ]} />,\r\n                        <Text text={`Next ${write.temp.index + 1}/${write.temp.employeeNames.length}`} out={[\r\n                            {type: 'set', path: 'temp.index', \r\n                                value: (write.temp.index+1)%write.temp.employeeNames.length}\r\n                        ]} />,\r\n                    ]\r\n                }\r\n            })\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent, Dialogue} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf, getDialogueCategory} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation, getConversionFormula, evaluate, \r\n        interpret, substitute} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction, getMultiple} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport MathAlgorithms from 'utilities/Math/Algorithms';\r\nimport keys from './../keys';\r\n\r\nconst buildEq = (wr1, wr2, combined) => {\r\n    return {\r\n        eq: `1/${combined}=1/${wr1}+1/${wr2}`,\r\n        latex: `${getFraction(1, combined)}=${getFraction(1, wr1)}+${getFraction(1, wr2)}`\r\n    };\r\n}\r\n\r\nexport const dgSampleSiteSize = {\r\n    key: 'dgSampleSiteSize',\r\n    pull: (r, w) => {\r\n        let unitVariable = 'x';\r\n        let sampleSize = {value: 10, unit: keys.uGr};\r\n        let siteSize = {value: 500, unit: keys.uKi};\r\n        let unitConversionEqs = getConversionFormula(sampleSize.value, sampleSize.unit, siteSize.unit, 2, unitVariable);\r\n        \r\n        return {sampleSize, siteSize, unitConversionEqs, unitVariable}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dialogue dgSampleSiteSize node ${node} write`, write);\r\n        let sampleSize = write.temp.sampleSize;\r\n        let siteSize = write.temp.siteSize;\r\n        let unitVariable = write.temp.unitVariable;\r\n        let unitConversionEqs = write.temp.unitConversionEqs;\r\n        let siteToSampleValue = write.temp.siteToSampleValue;\r\n        let siteToSampleRatioEqs = write.temp.siteToSampleRatioEqs;\r\n        let ratio = write.temp.ratio;\r\n        let timeRatioEqs = write.temp.timeRatioEqs;\r\n        let timeRatioEq = write.temp.timeRatioEq;\r\n        let gramsInKilograms = write.temp.gramsInKilograms;\r\n        let ansGramsInKilograms = write.temp.ansGramsInKilograms;\r\n\r\n        switch(node){\r\n            case 'secondsToHours2': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                    textId: node, text: [\r\n                        {text: `And the more accurate my answer is for when the fairies will finish the job, the \r\n                            higher the review score will be`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                            <Text text=\"next\"  out={{end: true}} />\r\n                        ]\r\n                    } \r\n                });\r\n            case 'secondsToHours': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                    textId: node, text: [\r\n                        {text: `The problem is, I'm guessing the clients don't want their answer in seconds. \r\n                        I'll need to then convert the answer from seconds to hours...`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                            <Text text=\"next\"  out={{type: 'set', path: 'temp.node', value: 'secondsToHours2'}} />\r\n                        ]\r\n                    } \r\n                });\r\n            case 'timeRight': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                        textId: node, text: [\r\n                            {text: `Okay. So I need to`},\r\n                            {latex: timeRatioEq.latex},\r\n                            {text: `find out how to convert the seconds taken to break down the samples, to the whole job.`}\r\n                        ]},\r\n                        {...keys.getSis('sis0',0, 0, null, 'iR')},\r\n                    ],\r\n                    choice: {options: [\r\n                                <Text text=\"next\"  out={{type: 'set', path: 'temp.node', value: 'secondsToHours'}} />\r\n                            ]\r\n                        } \r\n                    });\r\n            // case 'timeWrong': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n            //         img: [\r\n            //             {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n            //             textId: node, text: [\r\n            //                 {text: `If the sample needs to be multiplied by ${ratio} to equal the site size, then time should be...`}\r\n            //             ]},\r\n            //             {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n            //         ],\r\n            //         choice: {options: [\r\n            //                     <Text text=\"next\"  out={{type: 'set', path: 'temp.node', value: 'siteToSampleRatio'}} />\r\n            //                 ]\r\n            //             } \r\n            //         });\r\n            // case 'siteToSampleRatio': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n            //     img: [\r\n            //         {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n            //         textId: node, text: [\r\n            //             {text: `So the site's will be a lot larger than the samples, around ${ratio} times as large. \r\n            //                 So given that ratio, if it takes t seconds to break down the sample, how long will it take to break down the whole site?`}\r\n            //         ]},\r\n            //         {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n            //     ],\r\n            //     choice: {options: timeRatioEqs.map((eqs, i) => {\r\n            //                 return <Text {...eqs} out={[\r\n            //                     {type: 'set', path: 'temp.node', value: i===0?'timeRight':'timeWrong'},\r\n            //                     {type: 'set', path: 'temp.timeRatioEq', value: eqs},\r\n            //                 ]} />\r\n            //             })\r\n            //         } \r\n            //     });\r\n            case 'siteToSampleValue':\r\n               \r\n                return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                    textId: node, text: [\r\n                        {text: `So ${sampleSize.value} ${sampleSize.unit} equals ${ansGramsInKilograms} ${keys.uKi}'s...to\r\n                        figure out the time I need to...`},\r\n                    ]},\r\n                    {...keys.getSis('sis0',0, 0, null, 'iR')},\r\n                ],\r\n                choice: {\r\n                        options: timeRatioEqs.map(eq => {\r\n                            return <Text {...eq} out={[\r\n                                {type: 'set', path: 'temp.node', value: 'timeRight'},\r\n                                {type: 'set', path: 'temp.timeRatioEq', value: eq},\r\n                            ]} />\r\n                        })\r\n                    } \r\n                });\r\n            case 'gramsInKilograms': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                        textId: node, text: [\r\n                            {latex: siteToSampleValue.latex},\r\n                            {text: `therefore, ${sampleSize.value} ${sampleSize.unit} \r\n                                    would equal how many ${siteSize.unit}'s?`},\r\n                        ]},\r\n                        {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                    ],\r\n                    choice: {\r\n                        onInput: (id, v) => {\r\n                            let tre = [\r\n                                {eq: `t*${v.value}/${sampleSize.value}`, \r\n                                    latex: `${getMultiple('t', getFraction(v.value, sampleSize.value))}`},\r\n                                {eq: `t*${sampleSize.value}/${v.value}`, \r\n                                    latex: `${getMultiple('t', getFraction(sampleSize.value, v.value))}`}\r\n                            ]\r\n                       \r\n                            makeChange(id, [\r\n                                {type: 'set', path: 'temp.node', value: 'siteToSampleValue'},\r\n                                {type: 'set', path: 'temp.ansGramsInKilograms', value: v.value},\r\n                                {type: 'set', path: 'temp.timeRatioEqs', value: tre},\r\n                            ])\r\n                        },\r\n                        options: gramsInKilograms.map((eq, i) => {\r\n                                    return <Text text={`${eq} kg`} value={eq} />\r\n                                })\r\n                            } \r\n                    });\r\n            case 'formulaSampleToSite': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                    textId: node, text: [\r\n                        {text: `So what's the formula for converting  ${sampleSize.value} ${sampleSize.unit} \r\n                                to ${unitVariable} ${siteSize.unit}`},\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, v) => {\r\n                        let solution = toNum(evaluate(v.eq, {[keys.uKi]: 1}));\r\n                        let gramsInKilograms = [\r\n                            solution, solution*10, solution*0.001, solution*-2\r\n                        ]\r\n                        let ratios = [\r\n                            siteSize.value/solution,\r\n                            siteSize.value/solution*10,\r\n                            siteSize.value/solution*0.001,\r\n                            siteSize.value/solution*-2,\r\n                        ]\r\n                        makeChange(id, [\r\n                            {type: 'set', path: 'temp.siteToSampleRatioEqs', value: ratios},\r\n                            {type: 'set', path: 'temp.node', value: 'gramsInKilograms'},\r\n                            {type: 'set', path: 'temp.gramsInKilograms', value: gramsInKilograms},\r\n                            {type: 'set', path: 'temp.siteToSampleValue', value: v},\r\n                        ])\r\n                    },\r\n                    options: unitConversionEqs.map((eq, i) => {\r\n                                return <Text {...eq}  />\r\n                            })\r\n                        } \r\n                });\r\n            case 'applesToApples': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                    textId: node, text: [\r\n                        {text: `I can't figure out how long the whole site will take if the samples are in ${sampleSize.unit},\r\n                            but the total toxic waste is in ${siteSize.unit}`},\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                                <Text text={\"next\"}  out={[\r\n                                    {type: 'set', path: 'temp.node', value: 'formulaSampleToSite'}\r\n                                    ]} \r\n                                />\r\n                            ]\r\n                        } \r\n                });\r\n            case 'siteSize': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                        textId: node, text: [\r\n                            {text: `The actual toxic waste site will be much, much larger. \r\n                            I'll use ${siteSize.value} ${siteSize.unit} as a conservative estimate.`},\r\n                        ]},\r\n                        {...keys.getSis('sis0', 0, 1, null, 'iR')},\r\n                    ],\r\n                    choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                        {type: 'set', path: 'temp.node', value: 'applesToApples'}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                            } \r\n                    });\r\n            default: return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgSampleSiteSize', \r\n                    textId: 'start', text: [\r\n                        {text: `So it'll take a few seconds at least for the fairies to break down a \r\n                            small toxic sample of say...${sampleSize.value} ${sampleSize.unit}`},\r\n                    ], initial: ['iL'], animate: ['aL']},\r\n                    {...keys.getSis('sis0', 0, 0, 'iR', 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                                <Text text={\"next\"}  out={[\r\n                                        {type: 'set', path: 'temp.node', value: 'siteSize'}\r\n                                        //{end:true}\r\n                                    ]} \r\n                                />\r\n                            ]\r\n                        } \r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export const dgSoloWorkRateFormula = Dialogue(\r\n//     'dgSoloWorkRateFormula',\r\n//     (read, write)=>{\r\n//         return {};\r\n//     },\r\n//     (id, node, read, write, makeChange, settings, viewProps)=>{\r\n//         switch(node){\r\n//             default: return Scene(`dgSoloWorkRateFormula-start`, {\r\n//                 settings, viewProps, makeChange, \r\n//                 img: [\r\n//                         {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n//                         convoId: 'mistake', textId: 'tdef1', text: [\r\n//                             {text: `To calculate how much work they contributed to the \r\n//                             total, I'll need the total and the other work rates.`},\r\n//                         ]},\r\n//                 ],\r\n//                 choice: {options: [\r\n//                     <Text text={'next'} out={[ {end:true} ]} />\r\n//                 ]}\r\n//             })\r\n//         }\r\n//     }\r\n// )\r\n\r\n// export const soloWorkRate = {\r\n//     key: 'soloWorkRate',\r\n//     pull: (read, write, request) => {\r\n//         /*\r\n//     let eq01 = buildEq(format.roundTo(sistersWorkRates[0], 2), `${keys[`sis${order[1]}`]}WorkRate`, \r\n//                         format.roundTo(combinedTime, 2), latex);\r\n//         */\r\n//        let index = request.sistersWorkRates.length;\r\n//        let workRates = request.sistersWorkRates;\r\n//        let combinedTime = request[`combinedTime0${index}`];\r\n//        let wr1Time = workRates[0];\r\n//        let wrV = 'x';\r\n//         let equations = [\r\n//             {\r\n//                 eq: `1/${combinedTime}=1/${wr1Time}+1/${wrV}`,\r\n//                 latex: `${getFraction(1, roundTo(combinedTime, 2))}\r\n//                         =${getFraction(1, roundTo(wr1Time, 2))}+${getFraction(1, wrV)}`,\r\n//             },\r\n//             {\r\n//                 eq:`1/${wrV}=1/${keys.steadyStellaWorkRate}+1/${combinedTime*0.5}`,\r\n//                 latex: `${getFraction(1, wrV)}=\r\n//                     ${getFraction(1, roundTo(wr1Time, 2))}\r\n//                     +${getFraction(1, roundTo(combinedTime, 2)*0.5)}`,\r\n//             },\r\n//             {\r\n//                 eq: `1/5=1/${wr1Time}+1/3`,\r\n//                 latex: `${getFraction(1, 5)}=\r\n//                         ${getFraction(1, roundTo(wr1Time, 2))}\r\n//                         +${getFraction(1, '3')}`,\r\n//             },\r\n           \r\n//             {\r\n//                 eq: `1/${combinedTime}=1/y+1/${wrV}`,\r\n//                 latex: `${getFraction(1, roundTo(combinedTime, 2))}\r\n//                 =${getFraction(1, 'y')}\r\n//                 +${getFraction(1, wrV)}`,\r\n//             }\r\n//         ]\r\n//         let lcm = workRates[0]*combinedTime;\r\n//         let lcmOptions = [lcm, lcm*100, lcm*0.1, lcm*-10];\r\n//         lcmOptions = lcmOptions.map(e => {\r\n//             return {\r\n//                 eq: `${e}*${wrV}`,\r\n//                 latex: toLatex(`${e}*${wrV}`)\r\n//             }\r\n//         })\r\n//         return {request, equations, lcmOptions, \r\n//             combinedTime: combinedTime, wr1Time: wr1Time,\r\n//             inventor: keys[`sis${request.sisterOrder[0]}`],\r\n//             inventorTime: workRates[0],\r\n//             learner: keys[`sis${request.sisterOrder[workRates.length]}`],\r\n//         }\r\n//     },\r\n//     dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n//         let {request, equations, workRateEq, combinedTime, lcmOptions, \r\n//             wr1Time, inventor, inventorTime, learner, \r\n//             clearedOptions, eqCleared, eqLcm, solvedWorkRateOptions} = write.temp;\r\n//         let index = request.sistersWorkRates.length;\r\n//         switch(node){\r\n//             case 'solved': return Scene(`soloWorkRate-${index}-lcm`, {settings, viewProps, makeChange,\r\n//                     img: [\r\n//                         {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                         convoId: 'mistake', textId: 'tdef1', text: [\r\n//                             {text: `Which is the correct solution when solving for x`},\r\n//                             {latex: eqCleared.latex},\r\n//                         ], initial: ['pL'], animate: ['aL']},\r\n//                     ],\r\n//                     choice: {options: solvedWorkRateOptions.map(e => {\r\n//                         return <Text text={roundTo(e, 2)} out={[\r\n//                             {type: 'set', path: 'temp.solvedWorkRate', value: e},\r\n//                             {end:true}\r\n//                         ]} />\r\n//                     })\r\n//                 }});\r\n//             case 'cleared': return Scene(`soloWorkRate-${index}-lcm`, {settings, viewProps, makeChange,\r\n//                 img: [\r\n//                     {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                     convoId: 'mistake', textId: 'tdef1', text: [\r\n//                         {text: `Which is the correct result when`},\r\n//                         {latex: workRateEq.latex},\r\n//                         {text: ` is multiplied by`},\r\n//                         {latex: eqLcm.latex}\r\n//                     ], initial: ['pL'], animate: ['aL']},\r\n//                 ],\r\n//                 choice: {\r\n//                     onInput: (id, v)=>{\r\n//                         let solution = solveFor(v.eq, 'x');\r\n//                         solution = toNum(solution[0].eq);\r\n//                         let options = [solution, solution*10, solution*0.5, solution*-2];\r\n//                         makeChange(id, [\r\n//                             {type: 'set', path: 'temp.eqCleared', value: {eq: v.eq, latex: v.latex}},\r\n//                             {type: 'set', path: 'temp.solvedWorkRateOptions', value:options},\r\n//                             {type: 'set', path: 'temp.node', value: 'solved'},\r\n//                         ])\r\n//                     },\r\n//                     options: clearedOptions.map(e => {\r\n//                     return <Text {...e}  />\r\n//                 })\r\n//             }});\r\n//             case 'lcm': return Scene(`soloWorkRate-${index}-lcm`, {settings, viewProps, makeChange,\r\n//                 img: [\r\n//                     {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                     convoId: 'mistake', textId: 'tdef1', text: [\r\n//                         {text: `selected eq, whats its lcm`},\r\n//                         {latex: workRateEq.latex},\r\n//                     ], initial: ['pL'], animate: ['aL']},\r\n//                 ],\r\n//                 choice: {\r\n//                     onInput: (id, v) =>{\r\n//                        let alts = [1, 10];\r\n//                         let lhs = doOperation(`1/${combinedTime}`, MULT, [v.eq], alts);\r\n//                         let rhs1 = doOperation(`1/${wr1Time}`, MULT, [v.eq], alts);\r\n//                         let rhs2 = doOperation(`1/x`, MULT, [v.eq], alts);\r\n//                         let results = lhs.map((e, i) => {\r\n//                             return {\r\n//                                 eq: `${e.eq}=${rhs1[i].eq}+${rhs2[i].eq}`,\r\n//                                 latex: `${e.latex}=${rhs1[i].latex}+${rhs2[i].latex}`,\r\n//                             }\r\n//                         })\r\n//                         makeChange(id, [\r\n//                             {type: 'set', path: 'temp.eqLcm', value: {eq: v.eq, latex: v.latex}},\r\n//                             {type: 'set', path: 'temp.clearedOptions', value: results},\r\n//                             {type: 'set', path: 'temp.node', value: 'cleared'},\r\n//                         ])\r\n//                     },\r\n//                     options: lcmOptions.map(e => {\r\n//                         return <Text {...e} />\r\n//                     })\r\n//             }});\r\n//             default: return Scene(`soloWorkRate-${index}-start`, {settings, viewProps, makeChange,\r\n//                 img: [\r\n//                     {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                     convoId: 'mistake', textId: 'tdef1', text: [\r\n//                         {text: `inventor ${inventor}'s work rate is ${roundTo(inventorTime, 2)}, \r\n//                         learner ${learner}'s time is unknown, their combined time is ${roundTo(combinedTime, 2)}`},\r\n//                     ], initial: ['pL'], animate: ['aL']},\r\n//                 ],\r\n//                 choice: {\r\n//                     onInput:(id, v) => {\r\n//                         try{\r\n//                             //  let lhs = getEqSide(v.eq, 0);\r\n//                               let lhsVariables =  getVariables(getEqSide(v.eq, 0));\r\n//                               let allVariables = getVariables(v.eq).filter(f => f !== keys.eqVarWorker);\r\n//                               if(allVariables.length > 0){\r\n//                                   makeChange(id, [\r\n//                                       MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq,  'dgTwoVars', 0, [\r\n//                                           {text: `When selecting an equation to find an individual employee's work rate, the player selected an equation,`},\r\n//                                           {latex: v.latex},\r\n//                                           {text: `with multiple variables, when an equation with only 1 variable was required.`}\r\n//                                       ]),\r\n//                                       {type: 'set', path: 'temp.mistake', value:  {key: 'dgTwoVars', eq: v, index, request}},\r\n//                                       {end: true},\r\n//                                   ])\r\n//                               }else if(lhsVariables.length > 0){\r\n//                                   makeChange(id, [\r\n//                                       MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq,  'dgSoloVarOnLhs', 0, [\r\n//                                           {text: `When selecting an equation to find an individual employee's work rate, the player selected an equation,`},\r\n//                                           {latex: v.latex},\r\n//                                           {text: `with the variable on the left hand side of the equation.`}\r\n//                                       ]),\r\n//                                       {type: 'set', path: 'temp.mistake', value: {key: 'dgSoloVarOnLhs', \r\n//                                         eq: v, index, request}},\r\n//                                       {end: true},\r\n//                                   ]);\r\n//                                   return;\r\n//                               }else{\r\n//                                   makeChange(id, [\r\n//                                       {type: 'set', path: 'temp.node', value: 'lcm'},\r\n//                                       {type: 'set', path: 'temp.workRateEq', value: v},\r\n//                                       MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq, 'correctEq', v.i === 0?100:0),\r\n//                                   ])\r\n//                               }\r\n//                           }catch(e){\r\n//                               //throws error if there are no variables, therefore both sides are numbers\r\n//                               makeChange(id, [\r\n//                                   // MCQ(keys.acGameMCQ, keys.qSoleCommonMult, \r\n//                                   //     'noVar', 0),\r\n//                                   MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq,  'dgNoVar', 0, [\r\n//                                       {text: `When selecting an equation to find an individual employee's work rate, the player selected an equation,`},\r\n//                                       {latex: v.latex},\r\n//                                       {text: `with no variable to represent said unknown work rate.`}\r\n//                                   ]),\r\n//                                   {type: 'set', path: 'temp.mistake', value: {key: 'dgNoVar', eq: v, index, request}},\r\n//                                   {end: true},\r\n//                               ]);\r\n//                           }\r\n//                     },\r\n//                     options: equations.map(eq => {\r\n//                     return <Text {...eq}  />\r\n//                 })\r\n//             }});\r\n//         }\r\n        \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport const dgCombinedWorkRateFormula = Dialogue(\r\n    'dgCombinedWorkRateFormula',\r\n    (read, write)=>{\r\n        return {};\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps)=>{\r\n        switch(node){\r\n            default: return Scene(`dgCombinedWorkRateFormula-start`, {\r\n                settings, viewProps, makeChange, \r\n                img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                        convoId: 'mistake', textId: 'tdef1', text: [\r\n                            {text: `To calculate how quickly they'll all work together, I need all their work rates.`},\r\n                        ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={'next'} out={[ {end:true} ]} />\r\n                ]}\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst getValue = (item, isLatex) => {\r\n    let val;\r\n    if(isLatex){\r\n        if(item.length === 1){\r\n            val = item[0];\r\n        }else if(item.length === 2){\r\n            val = getMultiple(isNaN(item[0])?item[0]:roundTo(item[0],6), isNaN(item[1])?item[1]:roundTo(item[1], 6));\r\n        }\r\n\r\n    }else{\r\n        if(item.length === 1){\r\n            val = item[0];\r\n        }else if(item.length === 2){\r\n            val = `${item[0]}*${item[1]}`;\r\n        }\r\n    }\r\n    console.log(`getProportion getVal item ${item} return`, val);\r\n    return val;\r\n}\r\n\r\nconst getProportion = (order, values, isLatex) => {\r\n    /**\r\n     * order: ['g', 't', 'k', 's'] //order can be mistaken\r\n     * values: {g: sampleSize.value, s: siteSize.unit...}\r\n     */\r\n    if(isLatex){\r\n        return `${getFraction(getValue(values[order[0]], isLatex), getValue(values[order[1]], isLatex))}\r\n                =${getFraction(getValue(values[order[2]], isLatex), getValue(values[order[3]], isLatex))}`\r\n    }\r\n    return `${getValue(values[order[0]], isLatex)}/${getValue(values[order[1]], isLatex)}\r\n            =${getValue(values[order[2]], isLatex)}/${getValue(values[order[3]], isLatex)}`\r\n}\r\n\r\n\r\nexport const dgUnitConversion = Dialogue(\r\n    'dgUnitConversion',\r\n    (read, write, request) => {\r\n        let flags = get('flags', read, write, null);\r\n        let category = getDialogueCategory(flags,'dgUnitConversion', 'unitConversion');\r\n        console.log(`dialogue dgUnitConversion category ${category} flags`, flags);\r\n        let sampleSize = request.sampleSize;\r\n        let siteSize = request.siteSize;\r\n        let estimatedSeconds = request.combinedTime;\r\n        let estimatedSecondsR = roundTo(estimatedSeconds, keys.roundSec);\r\n       // let unitConversionEqs = getConversionFormula(sampleSize.value, sampleSize.unit, siteSize.unit, 4, `x`);\r\n       let eqMap = [[keys.uGr,keys.uSe,keys.uKi, keys.uHo], [keys.uSe,keys.uGr,keys.uKi,keys.uHo], [keys.uGr,keys.uSe,keys.uHo, keys.uKi]];\r\n       let valueMap = {[keys.uGr]: [sampleSize.value, sampleSize.unit], [keys.uSe]: [estimatedSeconds, keys.uSe],\r\n                    [keys.uKi]: [siteSize.value, siteSize.unit], [keys.uHo]: ['x', keys.uHo]}\r\n\r\n        let proportionEqs = eqMap.map(eq => {\r\n            return {\r\n                eq: getProportion(eq, valueMap),\r\n                latex: getProportion(eq, valueMap, true)\r\n            }\r\n        })\r\n        /*\r\n    qUCproportionEq: 'qUCproportionEq',\r\n    qUCsToHEq: 'qUCsToHEq',\r\n    qUCgToKgEq: 'qUCgToKgEq',\r\n    qUCSolveForH: 'qUCSolveForH',\r\n        */\r\n        console.log(`getProportion eqs`, eqMap);\r\n        console.log(`getProportion proportionEqs`, proportionEqs);\r\n        proportionEqs = proportionEqs.map((eq, i) => {\r\n            return {...eq, out: [\r\n                {type: 'set', path: 'temp.node', value: 'conversion'},\r\n                {type: 'set', path: 'temp.selectedProportion', value: eq},\r\n                {type: 'set', path: 'temp.selectedEqMap', value: i},\r\n                MCQ(category, keys.qUCproportionEq, i + \"\", i===0, [\r\n                    {text: `Player ${i===0?'':'in'}correctly chose the proportion equation`},\r\n                    {latex: eq.latex},\r\n                    // i === 0?null:{text:`but the correct answer was`},\r\n                    // i === 0?null:{latex: proportionEqs.latex},\r\n                ]) \r\n            ]}\r\n        });\r\n        proportionEqs.push({text: `Think the problem through...`, out: [\r\n            {end: true},\r\n            {type: 'set', path: 'temp.mistake', value:  {key: 'dgProportions', request}},\r\n        ]})\r\n        let secondsToHoursEqs = [\r\n            3600, 36000, 360\r\n        ]\r\n        secondsToHoursEqs = secondsToHoursEqs.map(e => {\r\n            return {eq:`${estimatedSeconds}*(1/${e})`, latex: getMultiple(roundTo(estimatedSeconds, 2), getFraction(1, e)),\r\n                value: estimatedSeconds/e\r\n            }\r\n        })\r\n        secondsToHoursEqs.push({text: `Think the problem through...`, out: [\r\n            {end: true},\r\n            {type: 'set', path: 'temp.mistake', value:  { key: 'dgSecondsToHoursMistake', estimatedSeconds, estimatedSecondsR}},\r\n        ]})\r\n        let gramsToKilogramsEqs = [\r\n            1000, 10, 0.1\r\n        ]\r\n        gramsToKilogramsEqs = gramsToKilogramsEqs.map(e => {\r\n            return {eq:`${sampleSize.value}*(1/${e})`, latex: getMultiple(roundTo(sampleSize.value, 2), getFraction(1, e)), \r\n                value: sampleSize.value/e\r\n            }\r\n        })\r\n        gramsToKilogramsEqs.push({text: `Think the problem through...`});\r\n        return {category, eqMap, valueMap, modifiedValueMap: valueMap, estimatedSeconds, \r\n            estimatedSecondsR, request, secondsToHoursEqs, gramsToKilogramsEqs, proportionEqs}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dialogue ${id} node ${node} write`, write);\r\n        let request = write.temp.request;\r\n        let category = write.temp.category;\r\n        let unitConversionEqs = write.temp.unitConversionEqs;\r\n        let proportionEqs = write.temp.proportionEqs;\r\n        let secondsToHoursEqs = write.temp.secondsToHoursEqs;\r\n        let gramsToKilogramsEqs = write.temp.gramsToKilogramsEqs;\r\n        let gramsInKilograms = write.temp.gramsInKilograms;\r\n        let convertedWeight = write.temp.convertedWeight;\r\n        let convertedTime = write.temp.convertedTime;\r\n        let sampleSize = write.temp.request.sampleSize;\r\n        let siteSize = write.temp.request.siteSize;\r\n        let estimatedSeconds = write.temp.estimatedSeconds;\r\n        let estimatedSecondsR = write.temp.estimatedSecondsR;\r\n        let selectedProportion = write.temp.selectedProportion;\r\n        let modifiedProportion = write.temp.modifiedProportion;\r\n        let eqMap = write.temp.eqMap;\r\n        let valueMap = write.temp.valueMap;\r\n        let modifiedValueMap = write.temp.modifiedValueMap;\r\n        let selectedEqMap = write.temp.selectedEqMap;\r\n        let hourAlts = write.temp.hourAlts;\r\n        let solutionHours = write.temp.solutionHours;\r\n        console.log(`getProportion modifiedValueMap`, modifiedValueMap)\r\n        switch(node){\r\n            case 'solvedHours2': return Scene(`${id}-${node}`, {\r\n                settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `So if it took ${estimatedSecondsR} seconds to break down ${sampleSize.value} ${sampleSize.unit}'s,\r\n                        I think it'll take ${roundTo(solutionHours, keys.roundTime)} hours to finish a job the size of ${siteSize.value} ${siteSize.unit}'s. \r\n                        Does that sound right?`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: [\r\n                        <Text text=\"yeah that sounds correct\" out={[ {end:true} ]} />,\r\n                        <Text text=\"No that doesn't sound right, I'll try again\" out={[ \r\n                            {type: 'set', path: 'temp.node', value: 'start'},\r\n                            {type: 'set', path: 'temp.node', value: 'start'},\r\n                            {type: 'set', path: 'temp.modifiedValueMap', value: valueMap},\r\n                            {type: 'set', path: 'temp.modifiedProportion', value: selectedProportion},\r\n                         ]} />,\r\n                    ]\r\n                }\r\n            })\r\n            case 'solvedHours': return Scene(`${id}-${node}`, {\r\n                settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `So if I solve `},\r\n                        {latex: modifiedProportion?modifiedProportion.latex:selectedProportion.latex},\r\n                        {text: `for hours, the answer would be...`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: hourAlts.map((v, i) => {\r\n                        return <Text value={v} text={roundTo(v, keys.roundTime) + \" hours\"} out={[\r\n                            {type: 'set', path: 'temp.node', value: 'solvedHours2'},\r\n                            {type: 'set', path: 'temp.solutionHours', value: v},\r\n                            MCQ(category, keys.qUCSolveForH, i + \"\", i===0, [\r\n                                {text: `Player solved the equation`},\r\n                                {latex: modifiedProportion?modifiedProportion.latex:selectedProportion.latex},\r\n                                {text: `for hours, and ${i===0?'':'in'}correctly chose \r\n                                the answer ${roundTo(v, keys.roundTime)} hours from the \r\n                                options ${hourAlts.map(h => roundTo(h, keys.roundTime))}`}\r\n                            ])\r\n                        ]} />\r\n                    })\r\n                }\r\n            })\r\n            case 'gramsToKilograms': return Scene(`${id}-${node}`, {\r\n                settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `To convert ${sampleSize.value} ${sampleSize.unit}'s to kilograms, I need the equation...`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, v) => {\r\n                        //valueMap\r\n                        let actions = [],i = v.i;\r\n                        if(v.i === gramsToKilogramsEqs.length - 1){\r\n                            actions= [\r\n                                {end: true},\r\n                                {type: 'set', path: 'temp.mistake', \r\n                                value:  { key: 'dgGramsToKilogramsMistake', sampleSize, siteSize}},\r\n                            ]\r\n                        }else{\r\n                            let order = eqMap[selectedEqMap];\r\n                            let nValueMap = {...modifiedValueMap};\r\n                            let gtk = evaluate(v.eq);\r\n                            nValueMap[keys.uGr] = [gtk, keys.uKi]\r\n                            let modified = {\r\n                                eq: getProportion(order, nValueMap),\r\n                                latex: getProportion(order, nValueMap, true)\r\n                            }\r\n                            console.log(`getProportion modified order ${order} gtk ${gtk}`, modified)\r\n                            actions = [\r\n                                {type: 'set', path: 'temp.modifiedValueMap', value: nValueMap},\r\n                                {type: 'set', path: 'temp.modifiedProportion', value: modified},\r\n                                {type: 'set', path: 'temp.node', value: 'conversion'},\r\n                                {type: 'set', path: 'temp.gramsInKilograms', value: v.value},\r\n                                MCQ(category, keys.qUCgToKgEq, i + \"\", i===0, [\r\n                                    {text: `Player ${i===0?'':'in'}correctly thought they could convert \r\n                                    ${sampleSize.value} grams to kilograms with the operation`},\r\n                                    {latex: v.latex},\r\n                                    i === 0?null:{text:`but the correct answer was`},\r\n                                    i === 0?null:{latex: gramsToKilogramsEqs[0].latex},\r\n                                ])\r\n                            ]\r\n                        }\r\n                        makeChange(id, actions)\r\n                    },\r\n                    options: gramsToKilogramsEqs.map((eq, i) => {\r\n                        return <Text {...eq} i={i} />\r\n                    })\r\n                }\r\n            })\r\n            case 'secondsToHours': return Scene(`${id}-${node}`, {\r\n                settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `To convert ${estimatedSecondsR} seconds to hours, I need the equation...`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, v) => {\r\n                        //valueMap\r\n                        let actions = [],i = v.i;\r\n                        if(v.i === secondsToHoursEqs.length - 1){\r\n                            actions= [\r\n                                {end: true},\r\n                                {type: 'set', path: 'temp.mistake', \r\n                                value:  { key: 'dgSecondsToHoursMistake', estimatedSeconds, estimatedSecondsR}},\r\n                            ]\r\n                        }else{\r\n                            let order = eqMap[selectedEqMap];\r\n                            let nValueMap = {...modifiedValueMap};\r\n                            let sth = evaluate(v.eq);\r\n                            nValueMap[keys.uSe] = [sth, keys.uHo]\r\n                            let modified = {\r\n                                eq: getProportion(order, nValueMap),\r\n                                latex: getProportion(order, nValueMap, true)\r\n                            }\r\n                            console.log(`getProportion modified order ${order} sth ${sth}`, modified)\r\n                            actions = [\r\n                                {type: 'set', path: 'temp.modifiedValueMap', value: nValueMap},\r\n                                {type: 'set', path: 'temp.modifiedProportion', value: modified},\r\n                                {type: 'set', path: 'temp.node', value: 'conversion'},\r\n                                {type: 'set', path: 'temp.secondsInHours', value: v.value},\r\n                                MCQ(category, keys.qUCsToHEq, i + \"\", i===0, [\r\n                                    {text: `Player ${i===0?'':'in'}correctly thought they could convert \r\n                                    ${estimatedSecondsR} seconds to hours with the operation`},\r\n                                    {latex: v.latex},\r\n                                    i === 0?null:{text:`but the correct answer was`},\r\n                                    i === 0?null:{latex: secondsToHoursEqs[0].latex},\r\n                                ]) \r\n                            ]\r\n                        }\r\n                        makeChange(id, actions)\r\n                    },\r\n                    options: secondsToHoursEqs.map((eq, i) => {\r\n                        return <Text {...eq} i={i} />\r\n                    })\r\n                }\r\n            })\r\n            case 'conversion': return Scene(`${id}-${node}`, {\r\n                settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `To figure out how many hours it'll take to break the site down, I need to solve`},\r\n                        {latex: modifiedProportion?modifiedProportion.latex:selectedProportion.latex},\r\n                        convertedWeight?{text: `I think the sample size is ${convertedWeight} kilograms.`}:null,\r\n                        convertedTime?{text: `I think time taken to complete the sample in hours is ${convertedTime}`}:null,\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, v) => {\r\n                        if(v.i === 0){\r\n                            makeChange(id, [\r\n                                {type: 'set', path:'temp.node', value: 'secondsToHours'}\r\n                            ]);\r\n                        }else if(v.i === 1){\r\n                            makeChange(id, [\r\n                                {type: 'set', path:'temp.node', value: 'gramsToKilograms'}\r\n                            ]);\r\n                        }else if(v.i === 2){\r\n                            let proportion = modifiedProportion?modifiedProportion.eq:selectedProportion.eq;\r\n                            console.log(`conversion solvedHours proportion`, proportion);\r\n                           // let subbed = substitute(proportion)\r\n                            let solved = solveFor(proportion, 'x', true);\r\n                            console.log(`conversion solvedHours solved`, solved);\r\n                            let rhs = solved[0].eq;\r\n                            console.log(`conversion solvedHours rhs`, rhs);\r\n                            let ans = evaluate(rhs, {[keys.uSe]: 1,  [keys.uGr]: 1, [keys.uKi]: 1, [keys.uHo]: 1});\r\n                            ans = toNum(ans);\r\n                            console.log(`conversion solvedHours ans`, ans);\r\n                            let ansAlts = [ans, ans*10, ans*0.1, ans*-2];\r\n                            console.log(`conversion solvedHours ansAlts`, ansAlts);\r\n                            makeChange(id, [\r\n                                {type: 'set', path:'temp.node', value: 'solvedHours'},\r\n                                {type: 'set', path:'temp.hourAlts', value: ansAlts},\r\n                            ]);\r\n                        }\r\n                    },\r\n                    options: [\r\n                        <Text i={0} text=\"convert the estimated seconds to hours\" />,\r\n                        <Text i={1} text=\"convert the the sample weight to grams\"  />,\r\n                        <Text i={2} text=\"solve for hours\"  />\r\n                    ]\r\n                }\r\n            })\r\n            case 'proportion': return Scene(`${id}-${node}`, {\r\n                settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `The equation showing the proportions of the sample to the site would look like...`},\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: proportionEqs.map((eqs, i) => {\r\n                        return <Text {...eqs}  />\r\n                    })\r\n                }\r\n            })\r\n            default: return Scene('dgUnitConversion-estimation', {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                        convoId: 'mistake', textId: 'text-sample', text: [\r\n                            {text: `So the time taken to break down the sample of ${sampleSize.value} ${sampleSize.unit}'s \r\n                            will be proportional to the time it will take to \r\n                            break down the whole site of ${siteSize.value} ${siteSize.unit}'s.`},\r\n                        ]},\r\n                    ],\r\n                    choice: {\r\n                        options: [\r\n                            <Text text=\"next\" out={[{type: 'set', path: 'temp.node', value: 'proportion'}]} />\r\n                        ]\r\n                    }\r\n            });\r\n        }\r\n    }\r\n)\r\n// export const dgUnitConversionOld = Dialogue(\r\n//     'dgUnitConversionOld',\r\n//     (read, write, request) => {\r\n//         let sampleSize = request.sampleSize;\r\n//         let siteSize = request.siteSize;\r\n//         let estimatedSeconds = request.estimatedSeconds;\r\n        \r\n//         let unitConversionEqs = getConversionFormula(sampleSize.value, sampleSize.unit, siteSize.unit, 4, `x`);\r\n//         let secondsToHoursEqs = [\r\n//             3600, 36000, 360, 36\r\n//         ]\r\n//         secondsToHoursEqs = secondsToHoursEqs.map(e => {\r\n//             return {eq:`1/${e}`, latex: getFraction(1, e)}\r\n//         })\r\n//         return {unitConversionEqs, estimatedSeconds, request, secondsToHoursEqs}\r\n//     },\r\n//     (id, node, read, write, makeChange, settings, viewProps) => {\r\n//         let request = write.temp.request;\r\n//         let unitConversionEqs = write.temp.unitConversionEqs;\r\n//         let unitConversionValueAlts = write.temp.unitConversionValueAlts;\r\n//         let sampleSizeConvertedValue = write.temp.sampleSizeConvertedValue;\r\n//         let estimatedSeconds = write.temp.estimatedSeconds;\r\n//         let secondsToHoursEqs = write.temp.secondsToHoursEqs;\r\n//         let ratioEqAlts = write.temp.ratioEqAlts;\r\n//         let solutionHours = write.temp.solutionHours;\r\n//         let gramsToKilosEq = write.temp.gramsToKilosEq;\r\n//         let sampleSize = request.sampleSize;\r\n//         let siteSize = request.siteSize;\r\n//         let combinedTime = request.combinedTime;\r\n//         switch(node){\r\n//             case 'success': return Scene('dgUnitConversion-success', {settings, viewProps, makeChange,\r\n//                     img: [\r\n//                         {id:  keys.nMc,\r\n//                         imageId: keys.getImg('nMc'), pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n//                         convoId: 'mistake', textId: 'text-sample', text: [\r\n//                             {text: `I'll let the client know it'll be ${roundTo(solutionHours, 2)} hours`},\r\n//                         ]},\r\n//                     ],\r\n//                     choice: {\r\n//                         options: [\r\n//                             <Text text=\"next\" out={{end: true}} />\r\n//                         ]\r\n//                     }\r\n//             });\r\n//             case 'secondsToHours': return Scene('dgUnitConversion-secondsToHours', {settings, viewProps, makeChange,\r\n//                 img: [\r\n//                     {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                     convoId: 'mistake', textId: 'text-sample', text: [\r\n//                         {text: `So it'll be ${roundTo(estimatedSeconds, 2)} seconds to break down the\r\n//                              ${siteSize.value} ${siteSize.unit} at the site. \r\n//                              The client expects the answer in hours. \r\n//                              Which equation will convert seconds to hours?`},\r\n//                     ]},\r\n//                 ],\r\n//                 choice: {\r\n//                     onInput: (id, v) => {\r\n//                         let evaluated = evaluate(`${v.eq}*${estimatedSeconds}`);\r\n//                         if(v.i === 0){\r\n\r\n//                             makeChange(id, [\r\n//                                 {type: 'set', path: 'temp.solutionHours', value: evaluated},\r\n//                                 {type: 'set', path: 'temp.node', value: 'success'},\r\n//                             ])\r\n//                         }else{\r\n//                             //mistake, doesnt understand how to convert units\r\n//                             makeChange(id, [\r\n//                                 {type: 'set', path: 'temp.mistake', value: {\r\n//                                     key: 'dgSecondsToHoursMistake',\r\n//                                     solutionHours: evaluated, \r\n//                                     estimatedSeconds,\r\n//                                     correctEq: secondsToHoursEqs[0], \r\n//                                     wrongEq: {eq: v.eq, latex: v.latex}, request}},\r\n//                                 {end: true}\r\n//                             ])\r\n//                         }\r\n//                     },\r\n//                     options: secondsToHoursEqs.map((eqs, i) => {\r\n//                         return <Text {...eqs} i={i}/>\r\n//                     })\r\n//                 }\r\n//         });\r\n//         case 'ratioEqs': return Scene('dgUnitConversion-ratioEqs', {settings, viewProps, makeChange,\r\n//                 img: [\r\n//                     {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                     convoId: 'mistake', textId: 'text-sample', text: [\r\n//                         {text: `Since it took ${roundTo(combinedTime, 2)} seconds to break down`},\r\n//                         {latex: sampleSizeConvertedValue.latex},\r\n//                         {text: `which formula can calculate the time it will take them to break down\r\n//                                 ${siteSize.value} ${siteSize.unit}`}\r\n//                     ]},\r\n//                 ],\r\n//                 choice: {\r\n//                     onInput: (id, v) => {\r\n//                         if(v.i === 0){\r\n//                             let solution = solveFor(v.eq, 'x');\r\n//                             makeChange(id, [\r\n//                                // {type: 'set', path: 'temp.secondsToHoursEqs', value: secondsToHoursEqs},\r\n//                                 {type: 'set', path: 'temp.estimatedSeconds', value: solution[0].eq},\r\n//                                 {type: 'set', path: 'temp.node', value: 'secondsToHours'},\r\n//                             ])\r\n//                         }else{\r\n//                             makeChange(id, [\r\n//                                 {type: 'set', path: 'temp.mistake', value: {\r\n//                                     key: 'dgTimeRatioMistake',\r\n//                                     request,\r\n//                                     correctEq: ratioEqAlts[0],\r\n//                                     wrongEq: {eq: v.eq, latex: v.latex}\r\n//                                 }},\r\n//                                 {end: true}\r\n//                             ])\r\n//                         }\r\n//                     },\r\n//                     options: ratioEqAlts.map((eqs, i) => {\r\n//                         return <Text {...eqs} i={i} />\r\n//                     })\r\n//                 }\r\n//         });\r\n//         case 'siteSize':return Scene('dgUnitConversion-siteSize', {settings, viewProps, makeChange,\r\n//                 img: [\r\n//                     {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n//                     convoId: 'mistake', textId: 'text-sample', text: [\r\n//                         {text: `According to the equation`},\r\n//                         {latex: gramsToKilosEq.latex},\r\n//                         {text: `how many ${siteSize.unit}'s does the \r\n//                         ${sampleSize.value} ${sampleSize.unit} sample equal?`}\r\n//                     ]},\r\n//                 ],\r\n//                 choice: {\r\n//                     onInput: (id, v) => {\r\n//                         //cant allow wrong choice, will manually calculate results of right one\r\n//                         let ratioEqAlts = [\r\n//                             {\r\n//                                 eq: `(${v.eq})/(${combinedTime})\r\n//                                         =(${siteSize.value}*${siteSize.unit})/x`,\r\n//                                 latex: `${getFraction(v.latex, `${roundTo(combinedTime, 2)}`)}\r\n//                                 =${getFraction(getMultiple(siteSize.value, siteSize.unit),`x`)}`,\r\n//                             },\r\n//                             {\r\n//                                 eq: `(${v.eq})/x\r\n//                                         =(${siteSize.value}*${siteSize.unit})/(${combinedTime})`,\r\n//                                 latex: `${getFraction(v.latex, `x`)}\r\n//                                     =${getFraction(getMultiple(siteSize.value, siteSize.unit), \r\n//                                         roundTo(combinedTime, 2))}`,\r\n//                             }\r\n//                         ];\r\n//                         makeChange(id, [\r\n//                             {type: 'set', path: 'temp.ratioEqAlts', value: ratioEqAlts},\r\n//                             {type: 'set', path: 'temp.sampleSizeConvertedValue', value: {eq: v.eq, latex: v.latex}},\r\n//                             {type: 'set', path: 'temp.node', value: 'ratioEqs'},\r\n//                         ])\r\n//                     },\r\n//                     options: unitConversionValueAlts.map(eqs => {\r\n//                         return <Text {...eqs} />\r\n//                     })\r\n//                 }\r\n//         });\r\n//             default: return Scene('dgUnitConversion-estimation', {settings, viewProps, makeChange,\r\n//                     img: [\r\n//                         {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n//                         convoId: 'mistake', textId: 'text-sample', text: [\r\n//                             {text: `The samples were ${sampleSize.value} ${sampleSize.unit}. \r\n//                             ${keys[`sis0`]} thinks there's ${siteSize.value} ${siteSize.unit} at the site.\r\n//                             To convert the the sample to the sites unit size I need to convert grams to kilograms. \r\n//                             Which equation does that?`},\r\n//                         ]},\r\n//                     ],\r\n//                     choice: {\r\n//                         onInput: (id, v) => {\r\n//                             let interpreted = substitute(v.eq, {[keys.uGr]: 1});\r\n                        \r\n//                             let multiplied = doOperation(interpreted.eq, MULT, [1], [1, 100, 0.01, -10]);\r\n//                                 makeChange(id, [\r\n//                                     // {type:'set', path:'temp.ratioVariables', value: ratioVariables},\r\n//                                     // {type:'set', path:'temp.ratioEqs', value: ratioEqs},\r\n//                                     //{type:'set', path:'temp.combinedWorkRate', value: value},\r\n//                                     {type: 'set', path: 'temp.gramsToKilosEq', value: {eq: v.eq, latex: v.latex}},\r\n//                                     {type: 'set', path: 'temp.unitConversionValueAlts', value: multiplied},\r\n//                                     {type: 'set', path: 'temp.node', value: 'siteSize'},\r\n//                                 ])\r\n//                             },\r\n//                         options: unitConversionEqs.map(eqs => {\r\n//                             return <Text {...eqs}  />\r\n//                         })\r\n//                     }\r\n//             });\r\n//         }\r\n//     }\r\n// )","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent, Dialogue} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation, getConversionFormula, evaluate, \r\n        interpret, substitute} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction, getMultiple} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\nexport const dgWorkRateTheory = {\r\n    key: 'dgWorkRateTheory',\r\n    pull: (read, write) => {\r\n        let workUnitEqs = [\r\n            { eq: `1/t`, latex: toLatex(`1/t`)},\r\n            { eq: `t`, latex: toLatex(`t`)},\r\n            { eq: `1^t`, latex: toLatex(`1^t`)},\r\n        ]\r\n        let workRateEqs = [\r\n            `1/x = 1/t1 + 1/t2 + 1/t3`,\r\n            `1/x = -1/t1 - 1/t2 - 1/t3`,\r\n        ]\r\n        workRateEqs = workRateEqs.map(eq => {\r\n            return {eq, latex: toLatex(eq)}\r\n        });\r\n        return {workUnitEqs, workRateEqs}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let workUnitEqs = write.temp.workUnitEqs;\r\n        let workUnitEq = write.temp.workUnitEq;\r\n        let workRateEqs = write.temp.workRateEqs;\r\n        let workRateEq = write.temp.workRateEq;\r\n        /*\r\n        keys.tForm\r\n        keys.WRTdenomFracVal\r\n        keys.WRTcombinedVsIndiv\r\n        keys.wrtOperation\r\n        */\r\n        switch(node){\r\n            case 'siteSize': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Not quite...`},\r\n                        {latex: workRateEq.latex},\r\n                        {text: `tells me how long it will take to break down 1 sample. I need to convert\r\n                        it to the estimated site size to know how long the whole job will take...`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 2, null, 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                            {end: true}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                        } \r\n                });\r\n            case 'willWork': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                    {convoId: 'dgWorkRateTheory', textId: node,\r\n                    ...keys.getSis('sis0', 0, 1, null, 'aR'),\r\n                    text: [\r\n                        {text: `So this will tell you when we'll finish the work?`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                            {type: 'set', path: 'temp.node', value: 'siteSize'}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                        } \r\n                });\r\n            case 'workRateEqRight': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Yes, their work rates will sum together. The equation`},\r\n                        {latex: workRateEq.latex},\r\n                        {text: `should let me know how long they'll take to break down 1 unit of work together.`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 1, null, 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                            {type: 'set', path: 'temp.node', value: 'willWork'}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                        } \r\n                });\r\n            case 'workRateEqWrong': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Mmmm that'd be close, but what does it mean that the fairies work rates are negative? \r\n                        What would it mean to get work done in negative time? It doesn't make sense.`},\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                            {type: 'set', path: 'temp.node', value: 'combinedFaster'}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                        } \r\n                });\r\n            case 'combinedFaster2':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `So I'm trying to find out how their respective work times, \r\n                            which I'll label as t1, t2 and t3, add up to their combined time, \r\n                            which I'll label x. The formula should be...`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {options: workRateEqs.map((eq, i)=> {\r\n                            return <Text {...eq}  out={[\r\n                                    {type: 'set', path: 'temp.node', value: i === 0?'workRateEqRight':'workRateEqWrong'},\r\n                                    {type: 'set', path: 'temp.workRateEq', value: eq},\r\n                                    MCQ(keys.acGameMCQ, keys.wrtOperation, i===0?'sum':'subtract', i === 0, i === 0?null:[\r\n                                        {text: `Player had to decide how individual work rates would combine to a single work rate, the player picked`},\r\n                                        {latex: eq.latex},\r\n                                        {text: `but the answer was`},\r\n                                        {latex: workRateEqs[0].latex}\r\n                                    ])\r\n                                ]} \r\n                            />\r\n                        })\r\n                    } \r\n                });\r\n            case 'combinedFaster':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `So they'll be faster together`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 1, null, 'iR')},\r\n                ],\r\n                choice: {options:  [\r\n                            <Text text={\"next\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'combinedFaster2'}\r\n                            ]} \r\n                        />\r\n                        ]\r\n                    } \r\n                });\r\n            case 'combinedSlower':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                    {convoId: 'dgWorkRateTheory', textId: node,\r\n                    ...keys.getSis('sis0', 0, 2, null, 'aR'),\r\n                    text: [\r\n                        {text: `Why would we be slower together? We'll each be breaking down the site at our normal rates. \r\n                                Three fairies are faster than one.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                            {type: 'set', path: 'temp.node', value: 'willCombine'}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                        } \r\n                });\r\n                case 'willCombine':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                        text: [\r\n                            {text: `Right. All three of you will be breaking down the contaminants together. \r\n                            I expect your combined work rates will be...`}\r\n                        ]},\r\n                        {...keys.getSis('sis0', 0, 1, null, 'iR'),},\r\n                    ],\r\n                    choice: {options: [\r\n                                        <Text text={\"faster than your individual work rates\"}  out={[\r\n                                                {type: 'set', path: 'temp.node', value: 'combinedFaster'},\r\n                                                MCQ(keys.acGameMCQ, keys.WRTcombinedVsIndiv, 'faster', 1, [\r\n                                                    {text: `When asked how fast the fairies combined work rate would be \r\n                                                    compared to their individual work rates, player incorrectly answered\r\n                                                    \"slower than your individual work rates\"`}\r\n                                                ])\r\n                                            ]} \r\n                                        />,\r\n                                        <Text text={\"slower than your individual work rates\"}  out={[\r\n                                            {type: 'set', path: 'temp.node', value: 'combinedSlower'},\r\n                                            MCQ(keys.acGameMCQ, keys.WRTcombinedVsIndiv, 'slower', 0, [\r\n                                                {text: `When asked how fast the fairies combined work rate would be \r\n                                                compared to their individual work rates, player incorrectly answered\r\n                                                \"slower than your individual work rates\"`}\r\n                                            ])\r\n                                        ]} \r\n                                    />\r\n                                    ]\r\n                            } \r\n                    });\r\n            case 'largerTimeSlowerWorkErrErr':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `No, when the denominator gets larger, the numerator is cut into a smaller number of larger pieces, \r\n                        making the fraction value smaller. I can review fractions`},\r\n                        {text: 'at khan academy', href: 'https://www.youtube.com/watch?v=kZzoVCmUyKg&t=74s', leave: true}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                ],\r\n                choice: {options: [\r\n                        <Text text={\"I'd rather stay and solve the problem\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWorkErr'}\r\n                            ]} \r\n                        />\r\n                    ]} \r\n                });\r\n            case 'largerTimeSlowerWorkTest2':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgWorkRateTheory', textId: node,\r\n                        text: [\r\n                            {text: `Right, now back to the problem of representing work rates as fractions!`}\r\n                        ]},\r\n                        {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                    ],\r\n                    choice: {options: [\r\n                            <Text text={`next`}  out={[\r\n                                    {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWork'}\r\n                                ]} \r\n                            />\r\n                        ]} \r\n                    });\r\n            case 'largerTimeSlowerWorkTest':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Right, when the denominator gets larger, the fraction value gets smaller. So for the fractions`},\r\n                        {latex: getFraction(1, 2)},\r\n                        {text: `and`},\r\n                        {latex: getFraction(1, 4)},\r\n                        {text: `I'd expect the fraction value of...`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                ],\r\n                choice: {options: [\r\n                        <Text text={[\r\n                            {latex: getFraction(1, 2)},\r\n                            {text: ` to be larger than`},\r\n                            {latex: getFraction(1, 4)},\r\n                        ]}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWorkTest2'}\r\n                            ]} \r\n                        />,\r\n                        <Text text={[\r\n                            {latex: getFraction(1, 4)},\r\n                            {text: ` to be larger than`},\r\n                            {latex: getFraction(1, 2)},\r\n                        ]}  out={[\r\n                            {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWorkErrErr'}\r\n                        ]} \r\n                    />\r\n                    ]} \r\n                });\r\n            case 'largerTimeSlowerWorkErr':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Wait, the denominator divides the numerator, so when a denominator gets larger...`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR')},\r\n                ],\r\n                choice: {options: [\r\n                        <Text text={\"The fraction value gets smaller\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWorkTest'}\r\n                            ]} \r\n                        />,\r\n                        <Text text={\"The fraction value gets larger\"}  out={[\r\n                            {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWorkErrErr'}\r\n                        ]} \r\n                    />\r\n                    ]} \r\n                });\r\n            case 'largerTimeSlowerWork':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Since the time taken, t, is in the fraction denominator`},\r\n                        {latex: getFraction(1, 't')},\r\n                        {text: `I expect someone who takes a larger amount of time, t, to finish a job...`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                ],\r\n                choice: {options: [\r\n                        <Text text={\"Will have a smaller work rate\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'willCombine'},\r\n                                MCQ(keys.acGameMCQ, keys.WRTdenomFracVal, 'faster', 1, [\r\n                                    {text: `When asked how a larger work period (the denominator) would effect the work rate value, the player\r\n                                    correctly answered \"Will have a smaller work rate\"`}\r\n                                ])\r\n                            ]} \r\n                        />,\r\n                        <Text text={\"Will have a larger work rate\"}  out={[\r\n                            {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWorkErr'},\r\n                            MCQ(keys.acGameMCQ, keys.WRTdenomFracVal, 'slower', 0, [\r\n                                {text: `When asked how a larger work period (the denominator) would effect the work rate value, the player\r\n                                    incorrectly answered \"Will have a larger work rate\"`}\r\n                            ])\r\n                        ]} \r\n                    />\r\n                    ]} \r\n                });\r\n            case 'unitRight':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `Right. The work is divided equally into the amount of seconds or hours taken to finish`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'largerTimeSlowerWork'}\r\n                        ]} \r\n                    /> ]} \r\n                });\r\n            case 'unitWrong':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [\r\n                        {text: `The work is divided into however much time, t, it takes to complete it. So `},\r\n                        {latex: workUnitEq.latex}, \r\n                        {text: `doesn't show that relationship.`}\r\n                    ]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                ],\r\n                choice: {options: [\r\n                                    <Text text={\"next\"}  out={[\r\n                                            {type: 'set', path: 'temp.node', value: '1unit'}\r\n                                        ]} \r\n                                    />\r\n                                ]\r\n                        } \r\n                });\r\n                case '1unit3': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgWorkRateTheory', textId: node,\r\n                        text: [{text: `I'll label the time taken as t. \r\n                        The amount of time, t, someone takes to do 1 job is their work rate.\r\n                        How should that work rate be represented numerically?`}]},\r\n                        {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                    ],\r\n                    choice: {options: workUnitEqs.map((eq, i) => {\r\n                        return <Text {...eq} out={[\r\n                                {type: 'set', path: 'temp.node', value: i === 0?'unitRight':'unitWrong'},\r\n                                {type: 'set', path: 'temp.workUnitEq', value: eq},\r\n                                MCQ(keys.acGameMCQ, keys.tForm, 'slower', i===0?100:0, [\r\n                                    {text: `When asked what the best way to represent work spread equally over a period of time t, \r\n                                    the player answered ${i===0?'in':''}correctly with`},\r\n                                    {latex: eq.latex},\r\n                                    {text: `from the options`},\r\n                                    ...workUnitEqs.map(e => e.latex)\r\n                                ])\r\n                            ]} />\r\n                        })} \r\n                    });\r\n                case '1unit2': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                        text: [{text: `The longer someone takes to get a job done, the less work \r\n                        they're doing per second, or hour, or whatever the unit is.`}]},\r\n                        {...keys.getSis('sis0', 0, 0, null, 'iR'),},\r\n                    ],\r\n                    choice: {options: [<Text text=\"next\" out={[\r\n                        {type: 'set', path: 'temp.node', value: '1unit3'}\r\n                    ]} />]} \r\n                    });\r\n            case '1unit': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [{text: `Whatever the sample is, it'll be 1 unit of work. \r\n                    The work is divided by the amount of time taken to break it down`}]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'aR')},\r\n                ],\r\n                choice: {options: [<Text text=\"next\" out={[\r\n                    {type: 'set', path: 'temp.node', value: '1unit2'}\r\n                ]} />]} \r\n                });\r\n            case 'sampleUnit2':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [{text: `Something small that you can experiment with. A few grams of the substance you'll be breaking down would do. \r\n                    I'll calculate the unit conversions later.`}]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'aR'),},\r\n                ],\r\n                choice: {options: [\r\n                            <Text text={\"next\"}  out={[\r\n                                    {type: 'set', path: 'temp.node', value: '1unit'}\r\n                                ]} \r\n                            />\r\n                        ]\r\n                    }});\r\n            case 'sampleUnit':return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [{text: `It'll be whatever sample size you collect from the site. `}]},\r\n                    {...keys.getSis('sis0', 0, 0, null, 'aR'),},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sampleUnit2'}\r\n                    ]} \r\n                />\r\n            ]}});\r\n            case 'whatUnit': return Scene(`dgWorkRateTheory-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('sis0', 0, 2, null, 'aR'),\r\n                    convoId: 'dgWorkRateTheory', textId: node,\r\n                    text: [{text: `What's this unit of work going to be?`}] },\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'sampleUnit'}\r\n                    ]} \r\n                />\r\n            ]}});\r\n            default: return Scene('dgWorkRateTheory-start', {settings, viewProps, makeChange,\r\n                audio: [\r\n                    {id: keys.mainTheme, loop: true},\r\n                    {id: \"f1-laugh\"}\r\n                ],\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'), convoId: 'dgWorkRateTheory', textId: 'tdef1', \r\n                    text: [{text: `First, I need some way to represent how long it takes to do 1 unit of work` }]},\r\n                    {...keys.getSis('sis0', 0, 1, 'iR', 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'whatUnit'}\r\n                       // {end:true}\r\n                    ]} \r\n                />\r\n            ]}});\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent, Dialogue} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction, getMultiple} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\n\r\nexport const dgGeneric = (key) =>  {\r\n    return {\r\n        key,\r\n        pull: () => {return {}},\r\n        dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n            return Scene('varOnLhs-start', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc,\r\n                    imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                    convoId: 'mistake', textId: 'tdef1', text: [\r\n                        {text: `Generic dialogue ${key}`},\r\n                    ], initial: ['pL'], animate: ['aL']},\r\n                ],\r\n                choice: {options: [\r\n                <Text text={\"next\"}  out={{end: true}} />\r\n            ]}});\r\n        }\r\n    }\r\n}\r\n//dgProportions\r\nexport const dgProportions = {\r\n    key: 'dgProportions',\r\n    pull: (read, write, request) => {\r\n        let {combinedTime, sampleSize, siteSize, sistersWorkRates} = request.request;\r\n        combinedTime = roundTo(combinedTime, 2);\r\n        //let sampleRate = toLatex(`${sampleSize.value}*${sampleSize.unit}s/${combinedTime}*seconds`);\r\n        let sampleRate = getFraction(getMultiple(sampleSize.value, sampleSize.unit), getMultiple(combinedTime, 'seconds'))\r\n        let ratioEqs = [\r\n            {\r\n                eq:  `${sampleSize.value}*${sampleSize.unit}/${combinedTime}*${keys.uSe}`,\r\n                latex: getFraction(getMultiple(sampleSize.value, sampleSize.unit), getMultiple(combinedTime, keys.uSe))\r\n            },\r\n            {\r\n                eq: `${combinedTime}*${keys.uSe}/${sampleSize.value}*${sampleSize.unit}`,\r\n                latex: getFraction(getMultiple(combinedTime, keys.uSe), getMultiple(sampleSize.value, sampleSize.unit))\r\n            }\r\n        ]\r\n        let proportionEqs = [\r\n           {\r\n               eq:  `${sampleSize.value}*${sampleSize.unit}/${combinedTime}*${keys.uSe}=${siteSize.value}*${siteSize.unit}/x*${keys.uHo}`,\r\n               latex: `${getFraction(getMultiple(sampleSize.value, sampleSize.unit),getMultiple(combinedTime,keys.uSe))}\r\n                        =${getFraction(getMultiple(siteSize.value,siteSize.unit), getMultiple('x', keys.uHo))}`\r\n           },\r\n           {\r\n               eq:  `${sampleSize.value}*${sampleSize.unit}/${combinedTime}*${keys.uSe}=x*${keys.uHo}/${siteSize.value}*${siteSize.unit}`,\r\n               latex: `${getFraction(getMultiple(sampleSize.value, sampleSize.unit),getMultiple(combinedTime,keys.uSe))}\r\n               =${getFraction(getMultiple('x', keys.uHo), getMultiple(siteSize.value,siteSize.unit))}`\r\n           }\r\n           \r\n        ]\r\n        return {...request.request, sampleRate, proportionEqs, combinedTime, ratioEqs}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        //sample ratio proportion to site rati\r\n        //since the amount of time they take to break down any toxic waste depends on their work rate\r\n        //I expect the time taken to break the sample down will be proportional to the site\r\n           //a fraction with two different quantities, like weight and time is called a...ratio\r\n        //so when breaking down the sample of 10g per 5 sec, that gives them a ratio of...10/5, 10*5, 10^5\r\n        //and id expect the sample ratio fraction to be equal to prop, gt than, less than the site ratio\r\n        //so the equation should look like...\r\n        //but idont want a range of values, > gives me many values\r\n        //alright,so its the sample weight/time = site weight/time\r\n       \r\n        let {combinedTime, sampleSize, siteSize, sistersWorkRates, sampleRate, proportionEqs, ratioEqs} = write.temp;\r\n        switch(node){\r\n            case 'proportionEq-err2':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `So I can figure out the unknown time it'll take to finish the job. I must be missing something`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'start'}} />\r\n                ]}});\r\n            case 'proportionEq-err':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `Nope, that can't be right, as I'm expecting two rate fractions that are equal to each other`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'proportionEq-err2'}} />\r\n                ]}});\r\n            case 'proportionEq':\r\n                return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `So if the sample and the site rates are proportional to each other, the equation should look like...`}\r\n                    ]},\r\n                ],\r\n                choice: {options: proportionEqs.map((e, i) => {\r\n                    return <Text {...e}  out={[\r\n                        i===0?{end:true}:{type: 'set', path: 'temp.node', value: 'proportionEq-err'},\r\n                        MCQ(keys.acMath, keys.qProportionEq, null, i===0?100:0, [\r\n                            {text: `When asked to identify the proportion eq for the sample ${sampleSize.value} ${sampleSize.unit} done in ${combinedTime} seconds\r\n                            and the site ${siteSize.value} ${siteSize.unit} done in x hours,  \r\n                            player ${i===0?'':'in'}correctly answered`},\r\n                            {latex: e.latex},\r\n                            i===0?null:{text: `when the correct equation was`},\r\n                            i===0?null:{latex: proportionEqs[0].latex},\r\n                        ])\r\n                    ]} />\r\n                })}});\r\n            case 'proportional-err':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `The samples weight of ${sampleSize.value} ${sampleSize.unit}'s \r\n                        is way smaller than the site size ${siteSize.value} ${siteSize.unit}'s,\r\n                        so the sample can't be larger.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'proportional'}} />\r\n                ]}});\r\n            case 'proportional':\r\n                let proportionalOptions = [\r\n                    `proportional to the site size`,\r\n                    `greater than the site size`\r\n                ] \r\n            return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `Okay! and given the site size of ${siteSize.value} ${siteSize.unit}, I expect the sample rate of`},\r\n                        {latex: ratioEqs[0].latex},\r\n                        {text: `to be...`}\r\n                    ]},\r\n                ],\r\n                choice: {options: proportionalOptions.map((p, i) => {\r\n                    return <Text text={p} out={[\r\n                        {type:'set', path: 'temp.node',value: i === 0?'proportionEq':'proportional-err'},\r\n                        MCQ(keys.acMath, keys.qProportionRel, null, i===0?100:0, [\r\n                            {text: `When asked what the relationship between the proportional sample to site was,  \r\n                            player ${i===0?'':'in'}correctly answered, from the options ${p} from the options ${proportionalOptions}`}\r\n                        ])\r\n                    ]} />\r\n                })}});\r\n            case 'rateEq-err':\r\n                    return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                            convoId: 'mistake', textId: node, text: [\r\n                                {text: `That can't be right. A rate always has time on the bottom, as in 60 miles per hour, \r\n                                or something similar. So this should be weight/time`}\r\n                            ]},\r\n                        ],\r\n                        choice: {options: [\r\n                            <Text text={\"Next\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'rateEq'}\r\n                            ]} />\r\n                        ]}});\r\n            case 'rateEq':\r\n                return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                        convoId: 'mistake', textId: node, text: [\r\n                            {text: `Right, and if the sample weight of ${sampleSize.value} ${sampleSize.unit} was finished in ${combinedTime} seconds, \r\n                            I expect that rate to look like...`}\r\n                        ]},\r\n                    ],\r\n                    choice: {options: ratioEqs.map((p, i) => {\r\n                        return <Text {...p} out={[\r\n                            {type:'set', path: 'temp.node',value: i===0?'proportional':'rateEq-err'},\r\n                            MCQ(keys.acMath, keys.qProportionRateEq, i + \"\", i===0?100:0, [\r\n                                {text: `When asked what the sample rate would look like,  \r\n                                player ${i===0?'':'in'}correctly answered, from the options ${ratioOptions}`},\r\n                                {latex: p.latex},\r\n                                i===0?null:{text: `when the correct rate was`},\r\n                                i===0?null:{latex: ratioEqs[0].latex}\r\n                            ])\r\n                        ]} />\r\n                    })}});\r\n            case 'ratio-err': \r\n                return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                        convoId: 'mistake', textId: node, text: [\r\n                            {text: `Close, but not quite right. The 'rate' is a specific term for a fraction \r\n                            describing the relationship a thing like weight, and time. Rates can be reviewed`},\r\n                            {text: `here at Math Antics on Youtube`, href: 'https://youtu.be/RQ2nYUBVvqI?t=342', leave:true}\r\n                        ]},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={\"Nah, back to thinking!\"}  out={[\r\n                            {type: 'set', path: 'temp.node', value: 'start'}\r\n                        ]} />\r\n                    ]}}); \r\n            case 'ratio': \r\n                let ratioOptions = ['rate', 'ratio', 'proportion', 'fraction']\r\n                return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                        convoId: 'mistake', textId: node, text: [\r\n                            {text: `The relationship between the weight of toxic waste broken down over a period of time is called the...`}\r\n                        ]},\r\n                    ],\r\n                    choice: {options: ratioOptions.map((r, i) => {\r\n                        return <Text text={r}  out={[\r\n                            {type: 'set', path: 'temp.node', value: i===0?'rateEq':'ratio-err'},\r\n                            MCQ(keys.acMath, keys.qProportionRatio, i + \"\", i===0?100:0, [\r\n                                {text: `When what the term for the relationship between the weight and time of the sample work was, \r\n                                player ${i===0?'':'in'}correctly answered ${r}, from the options ${ratioOptions}`}\r\n                            ])\r\n                        ]} />\r\n                    })}});  \r\n            default: return Scene(`${id}-start`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: 'start', text: [\r\n                        {text: `So I need to figure out how long it'll take the fairies to break down all\r\n                        the toxic waste on the job site`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'ratio'}} />\r\n            ]}});\r\n        }\r\n    }\r\n}\r\n//dgGramsToKilogramsMistake\r\nexport const dgGramsToKilogramsMistake = {\r\n    key: 'dgGramsToKilogramsMistake',\r\n    pull: (read, write, request) => {\r\n        let {sampleSize, siteSize} = request;\r\n        let unitOptions = ['weight', 'time', 'length', 'speed'];\r\n        unitOptions = unitOptions.map((e, i) => {\r\n            return {text: e, out: [\r\n                {type: 'set', path: 'temp.node', value: i===0?'metric':'unitErr'},\r\n                MCQ(keys.acMath, keys.qGtoKgUnit, e, i===0?100:0, i === 0?null:[\r\n                    {text: `When asked what grams and kilograms measured, the player ${i===0?'':'in'}correctly\r\n                    answered ${e}, from the options ${listToEnglish(unitOptions)}`}\r\n                ],  false)\r\n            ]}\r\n        })\r\n        let metricOptions = ['grams', 'kilograms', 'milligrams']\r\n        metricOptions = metricOptions.map((e, i) => {\r\n            return {text: e,\r\n                out: [\r\n                    {type: 'set', path: 'temp.node', value: i===0?'relative':'metricErr'},\r\n                    MCQ(keys.acMath, keys.qMetricBase, e, i===0?100:0, i === 0?null:[\r\n                        {text: `When asked what the base unit for weight was, the player ${i===0?'':'in'}correctly\r\n                        answered ${e}, from the options ${listToEnglish(metricOptions)}`}\r\n                    ],  false)\r\n                ]\r\n            }\r\n        })\r\n   \r\n        let gToKgOptions = [\r\n            {eq: `grams*1/1000`, latex: getMultiple('grams', getFraction('1', '1000'))}, \r\n            {eq: `grams*1000`, latex: getMultiple('grams', '1000')}, \r\n            {eq: `grams*1/0.001`, latex: getMultiple('grams', getFraction('1', '0.001'))}, \r\n            {eq: `grams*0.001`, latex: getMultiple('grams', '0.001')}\r\n        ]\r\n        gToKgOptions = gToKgOptions.map((e, i)=>{\r\n            return {...e, i, out: [\r\n                {type: 'set', path: 'temp.node', value: i===0?'conversion':'relativeErr'},\r\n                {type: 'set', path: 'temp.selectedConversionEq', value: e},\r\n                MCQ(keys.acMath, keys.qTokg, e.eq, i===0?100:0, i === 0?null:[\r\n                    {text: `When asked what the base unit for weight was, the player ${i===0?'':'in'}correctly\r\n                    answered`},\r\n                    {latex: e.latex},\r\n                    {text: `from the options`},\r\n                    ...gToKgOptions.map(eq => {\r\n                        return {latex: eq.latex}\r\n                    })\r\n                ],  false)\r\n            ]};\r\n        });\r\n        let kiloOptions = [`1000 grams`, '0 grams', '-1000 grams', '99 grams']\r\n        kiloOptions = kiloOptions.map((e, i) => {\r\n            return {text: e, out: [\r\n                {type: 'set', path: 'temp.node', value: i===0?'relative':'relativeErr2'},\r\n                MCQ(keys.acMath, keys.qGinKg, e, i===0?100:0, i === 0?null:[\r\n                    {text: `When asked what the 'kilo' in kilograms equalled in grams, the player ${i===0?'':'in'}correctly\r\n                    answered ${e}, from the options ${listToEnglish(kiloOptions)}`}\r\n                ],  false)\r\n            ]}\r\n        });\r\n        return {unitOptions, metricOptions, gToKgOptions, kiloOptions, ...request}\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let unitOptions = write.temp.unitOptions;\r\n        let metricOptions = write.temp.metricOptions;\r\n        let gToKgOptions = write.temp.gToKgOptions;\r\n        let kiloOptions = write.temp.kiloOptions;\r\n        let selectedConversionEq = write.temp.selectedConversionEq;\r\n        let sampleSize = write.temp.sampleSize;\r\n        switch(node){\r\n            case 'conversion': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `So converting the sample of ${sampleSize.value} ${sampleSize.unit} with the operation`},\r\n                        {latex: selectedConversionEq.latex},\r\n                        {text: `should give me the right answer`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [<Text text={'next'}  out={[\r\n                    {end: true}\r\n                ]} />]}});\r\n            case 'relativeErr2': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `No kilogram means 1000 grams. Review the weight units`},\r\n                        {text: 'here with khan academy on youtube', href: 'https://www.youtube.com/watch?v=TD1zuENbEdk', leave: true}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: [<Text text=\"next\" out={[{type: 'set', path:'temp.node', value: 'relative'}]} />]\r\n                }});\r\n            case 'relativeErr': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `Actually, kilo stems from a Greek word meaning 1000... so kilograms should mean...?`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: kiloOptions.map(e => {\r\n                        return <Text {...e} />\r\n                    })\r\n                }});\r\n            case 'relative': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `The 'kilo' part of kilogram means it's a multiple of gram somehow... \r\n                        which operation would convert grams to kilograms?`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: gToKgOptions.map(e => {\r\n                    return <Text {...e} />\r\n                })}});\r\n            case 'metricErr': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node,text: [\r\n                        {text: `The fact that kilogram and milligram from contain the word 'gram', \r\n                        probably means they aren't the base unit for weight, they're multiple of it.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[\r\n                    {type: 'set', path:'temp.node', value: 'metric'}\r\n                ]} />]}});\r\n            case 'metric': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `In the metric system, what is the base unit that describes weight?`}\r\n                    ]},\r\n                ],\r\n                choice: {options: metricOptions.map(e => {\r\n                    return <Text text={e.text}  out={e.out} />\r\n                })}});\r\n            case 'unitErr': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `Wait, that's not right. Grams and Kilograms actually describe the weight of something.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'start'}} />\r\n            ]}});\r\n            default: return Scene(`${id}-start`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                        convoId: 'mistake', textId: 'start', text: [\r\n                            {text: `First off, grams and kilograms both describe...?`}\r\n                        ]},\r\n                    ],\r\n                    choice: {options: unitOptions.map(e => {\r\n                        return <Text text={e.text}  out={e.out} />\r\n                    })}});\r\n            }\r\n    }\r\n}\r\n\r\nexport const dgWorkRateNeg =  {\r\n        key: 'dgWorkRateNeg',\r\n        pull: (read, write, mistake) => {\r\n            let workRate = mistake.eq;\r\n            let totalTime = 'totalTime';\r\n            let xHoursAgo = {eq: `1/${totalTime} = 1/${workRate}`, latex: `${getFraction(1, totalTime)} = ${getFraction(1, workRate)}`};\r\n            let hoursAgoOptions = [workRate, workRate*10, workRate*-10, workRate*0.1];\r\n            return {\r\n                xHoursAgo, workRate, //otherWorkRate, xCombined, lcms, \r\n                hoursAgoOptions, totalTime\r\n            }\r\n        },\r\n        dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n            let workRate = get('temp.workRate', read, write, null); \r\n            let xHoursAgo = get('temp.xHoursAgo', read, write, null); \r\n            let hoursAgoOptions = get('temp.hoursAgoOptions', read, write, null); \r\n            let totalTime = get('temp.totalTime', read, write, null); \r\n            let operatedEq = get('temp.operatedEq', read, write, null); \r\n            let crossMultiplyOptions = get('temp.crossMultiplyOptions', read, write, null); \r\n            let crossMultipliedAnswer = get('temp.crossMultipliedAnswer', read, write, null); \r\n            let doneXHoursAgoAnswer = get('temp.doneXHoursAgoAnswer', read, write, null); \r\n            switch(node){\r\n                case 'combinedWork': return Scene('combinedWork-start', {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id:  keys.nMc,\r\n                            imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                            convoId: 'mistake', textId: 'tdcw', text: [\r\n                                {text: `Right, so the equation must be wrong, as it takes time to finish a job. Their work rate must be positive`},\r\n                            ], initial: ['pL'], animate: ['aL']},\r\n                        ],\r\n                        choice: {\r\n                            options: [\r\n                                <Text text={\"next\"}  out={{end: true}} />\r\n                            ]\r\n                        }\r\n                    });\r\n                case 'crossMultipliedAnswer': \r\n                    if(crossMultipliedAnswer === workRate){\r\n                        return Scene('crossMultipliedAnswerright-start', {settings, viewProps, makeChange,\r\n                            img: [\r\n                                {id:  keys.nMc,\r\n                                imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                                convoId: 'mistake', textId: 'tdcma2', text: [\r\n                                    {text: `Right, this equation makes total time equal ${crossMultipliedAnswer}. \r\n                                    Since a negative work rate is impossible, \r\n                                    I've somehow built the wrong equation with my previous steps.`},\r\n                                ], initial: ['pL'], animate: ['aL']},\r\n                            ],\r\n                            choice: {\r\n                                options: [\r\n                                    <Text text={'next'}  out={[\r\n                                        {end:true},\r\n                                    ]} />\r\n                                ]\r\n                            }\r\n                        }); \r\n                    }else{\r\n                        return Scene('crossMultipliedAnswerwrong-start', {settings, viewProps, makeChange,\r\n                            img: [\r\n                                {id:  keys.nMc,\r\n                                imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                                convoId: 'mistake', textId: 'tdcma', text: [\r\n                                    {text: `No, the equation`},\r\n                                    {latex: operatedEq.latex},\r\n                                    {text: `says: \"The totalTime is ${workRate} hours\", not ${crossMultipliedAnswer} hours.`},\r\n                                    {text: `Either way, the equation doesn't make sense, I must have made a mistake somewhere`},\r\n                                ], initial: ['pL'], animate: ['aL']},\r\n                            ],\r\n                            choice: {\r\n                                options: [\r\n                                    <Text text={'next'} out={[\r\n                                        {type: 'set', path: 'temp.node', value: 'start'},\r\n                                    ]} />\r\n                                ]\r\n                            }\r\n                        }); \r\n                    }\r\n                case 'crossMultiplied': return Scene('crossMultiplied-start', {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {id:  keys.nMc,\r\n                        imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                        convoId: 'mistake', textId: 'tdcm', text: [\r\n                            {text: `Which gives me`},\r\n                            {latex: operatedEq.latex},\r\n                            {text: `, cross multiplying works because it makes totalTime the subject.`},\r\n                            {text: `So, according to this equation, this employee would finish the job in...`}\r\n                        ], initial: ['pL'], animate: ['aL']},\r\n                    ],\r\n                    choice: {\r\n                        options: crossMultiplyOptions.map((e, i) => {\r\n                            return <Text text={`${e} hours`} i={i}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'crossMultipliedAnswer'},\r\n                                {type: 'set', path: 'temp.crossMultipliedAnswer', value: e},\r\n                                MCQ(keys.acMath, keys.qMistNegEqTTValue, null, i===0?100:0,i===0?null:[\r\n                                    `From the equation`,\r\n                                    {latex: operatedEq.latex},\r\n                                    {text: `player answered that totalTime equalled ${e} hours, \r\n                                    when the answer was ${crossMultiplyOptions[0]} hours`}\r\n                                ])\r\n                            ]} />\r\n                        })\r\n                    }\r\n                }); \r\n                case 'squared':  return Scene('squared-start', {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {id:  keys.nMc,\r\n                        imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                        convoId: 'mistake', textId: 'tdsq', text: [\r\n                            {text: `Which gives me`},\r\n                            {latex: operatedEq.latex},\r\n                            {text: `, which is not right, as I need totalTime to be the subject`}\r\n                        ], initial: ['pL'], animate: ['aL']},\r\n                    ],\r\n                    choice: {\r\n                        options: [<Text text={\"back\"} out={{type: 'set', path: 'temp.node', value: 'fractionTime'}} />],\r\n                    }\r\n                }); \r\n                case 'fractionTime1': return Scene('fractionTime1-start', {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id:  keys.nMc,\r\n                            imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                            convoId: 'mistake', textId: 'tdft1', text: [\r\n                                {text: `I need to do some extra operations to make totalTime the subject of the equation`},\r\n                                {latex: xHoursAgo.latex},\r\n                                {text: `. Which operation will make totalTime the subject of the equation?`}\r\n                            ], initial: ['pL'], animate: ['aL']},\r\n                        ],\r\n                        choice: {\r\n                            onInput: (id, v)=>{\r\n                                //xHoursAgo.eq\r\n                                let node='', result, crossMultiplyOptions, operation;\r\n                                if(v.i === 0){\r\n                                    result =doOperation([xHoursAgo.eq], MULT, [`${workRate}*${totalTime}`], 1);\r\n                                    result = result[0][0];\r\n                                    result = {\r\n                                        eq: `${getEqSide(result, 1)}=${getEqSide(result, 0)}`,\r\n                                        latex: toLatex(`${getEqSide(result, 1)}=${getEqSide(result, 0)}`)\r\n                                    }\r\n                                    let num = toNum(getEqSide(result.eq, 1));\r\n                                    crossMultiplyOptions = [num, num*10, num*-10, num*0.1]\r\n                                    node = 'crossMultiplied';\r\n                                }else if(v.i === 1){\r\n                                    result = doOperation([xHoursAgo.eq], POW, [2], 1);\r\n                                    result = result[0][0];\r\n                                    node = 'squared';\r\n                                }else if(v.i === 2){\r\n                                    result = doOperation([xHoursAgo.eq], MULT, ['totalTime'], 1);\r\n                                    result = result[0][0];\r\n                                    node = 'squared';\r\n                                }else if(v.i === 3){\r\n                                    result = doOperation([xHoursAgo.eq], MULT, [workRate], 1);\r\n                                    result = result[0][0];\r\n                                    node = 'squared';\r\n                                }\r\n                                makeChange(id, [\r\n                                    {type: 'set', path: 'temp.node', value: node},\r\n                                    {type: 'set', path: 'temp.operatedEq', value: result},\r\n                                    {type: 'set', path: 'temp.crossMultiplyOptions', value: crossMultiplyOptions},\r\n                                    MCQ(keys.acMath, keys.qMistNegEqTTOperation, node, v.i===0?100:0, v.i === 0?null:[\r\n                                        {text: `When asked to select an operation that would make totalTime the subject of the equation`},\r\n                                        {latex: xHoursAgo.latex},\r\n                                        {text: `the player selected '${v.text}', when the answer was 'cross multiply'`}\r\n                                    ], true)\r\n                                ])\r\n                            },\r\n                            options: [\r\n                                <Text text={\"cross multiply\"} i={0}  />,\r\n                                <Text text={\"square it\"} i={1}   />,\r\n                                <Text text={\"multiply by totalTime\"} i={2}   />,\r\n                                <Text text={\"multiply by \" + workRate} i={3}   />,\r\n                            ]\r\n                        }\r\n                    }); \r\n                    //doneXHoursAgoAnswer\r\n                case 'fractionTime': return Scene('fractionTime-start', {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {id:  keys.nMc,\r\n                        imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                        convoId: 'mistake', textId: 'tdft', text: [\r\n                            {text: `${doneXHoursAgoAnswer} hours doesn't sound right...`},\r\n                        ], initial: ['pL'], animate: ['aL']},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={`next`}  out={[\r\n                            {type: 'set', path: 'temp.node', value: 'fractionTime1'},\r\n                        ]} />\r\n                    ]\r\n                }}); \r\n                case 'doneXHoursAgo2':\r\n                    return Scene('doneXHoursAgo2-start', {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id:  keys.nMc,\r\n                            imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                            convoId: 'mistake', textId: 'tdxha2', text: [\r\n                                {text: `If they were working alone, and their work rate was ${workRate} then from the equation`},\r\n                                {latex: xHoursAgo.latex},\r\n                                {text: `the total time the job takes would be...`}\r\n                            ], initial: ['pL'], animate: ['aL']},\r\n                        ],\r\n                        choice: {options: hoursAgoOptions.map((e, i) => {\r\n                            let next = null;\r\n                            if(i === 0){\r\n                                next = 'combinedWork';\r\n                            }else{\r\n                                next = 'fractionTime';\r\n                            }\r\n                            return <Text text={`${e} hours`}  out={[\r\n                                {type: 'set', path: 'temp.doneXHoursAgoAnswer', value: e},\r\n                                {type: 'set', path: 'temp.node', value: next},\r\n                                MCQ(keys.acMath, keys.qMistNegEqTTDirect, e > 0?'pos':'neg', i===0?100:0, i===0?null:[\r\n                                    `answered that the totalTime in`,\r\n                                    {latex: xHoursAgo.latex}, \r\n                                    {text: `was equal to ${e} hours, when it was really equal to ${workRate} hours`}\r\n                                ])\r\n                            ]} />\r\n                        })\r\n                    }}); \r\n                case 'doneXHoursAgo':\r\n                    return Scene('doneXHoursAgo-start', {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id:  keys.nMc,\r\n                            imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                            convoId: 'mistake', textId: 'tdxha', text: [\r\n                                {text: `Yes. It makes no sense for a job to take negative time, \r\n                                so a negative work rate is impossible.`},\r\n                            ], initial: ['pL'], animate: ['aL']},\r\n                        ],\r\n                        choice: {options: [\r\n                            <Text text={`next`}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'doneXHoursAgo2'},\r\n                            ]} />\r\n                        ]\r\n                    }}); \r\n                case 'negativeDinner2': \r\n                let negativeDinnerAnswer = get('temp.negativeDinnerAnswer', read, write, null);\r\n                return Scene('negativeDinner2-start', {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {id:  keys.nMc,\r\n                        imageId: keys.getImg('nMc'), pose: 'doubt',\r\n                        convoId: 'mistake', textId: 'tdnd2', text: [\r\n                            {text: `${negativeDinnerAnswer}? Maybe...but no, it doesn't make much sense. There's no such thing as negative time. \r\n                            I've made a mistake if I'm getting a negative answer for time.`},\r\n                        ], initial: ['pL'], animate: ['aL']},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={\"nothing\"}  out={{type: 'set', path: 'temp.node', value: 'start'}} />,\r\n                    ]}}); \r\n                case 'negativeDinner': \r\n                    let negativeDinnerOptions = ['nothing', 'sleep', 'studying'];\r\n                        return Scene('negativeDinner-start', {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id:  keys.nMc,\r\n                            imageId: keys.getImg('nMc'), pose: 'doubt',\r\n                            convoId: 'mistake', textId: 'tdnd1', text: [\r\n                                {text: `Time is represented by a positive number. A negative number would mean the job took negative time...\r\n                                        What the heck gives you back time?`},\r\n                            ], initial: ['pL'], animate: ['aL']},\r\n                        ],\r\n                        choice: {options: negativeDinnerOptions.map(nd => {\r\n                            return <Text text={nd}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'negativeDinner2'},\r\n                                {type: 'set', path: 'temp.negativeDinnerAnswer', value: nd}\r\n                            ]} />\r\n                        })}}); \r\n                case 'firstReason': return Scene('firstReason-start', {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {id:  keys.nMc,\r\n                        imageId: keys.getImg('nMc'), pose: 'neutral',\r\n                        convoId: 'mistake', textId: 'tdfr1', text: [\r\n                            {text: `If the work rate `, className: 'inline'},\r\n                            {text: 'x', color: 'primary', className: 'inline'},\r\n                            {text: `measures how many hours it will take this employee to do one job, \r\n                            a negative work rate would mean...`, className: 'inline'}\r\n                        ], animate: ['aL']},\r\n                    ],\r\n                    choice: {options: [\r\n                    <Text text={\"The job takes negative time to complete.\"}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'doneXHoursAgo'},\r\n                        MCQ(keys.acMath, keys.qMistNegTimeSemantics, 'past', 100)\r\n                    ]} />,\r\n                    <Text text={\"The job takes time to complete.\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'negativeDinner'},\r\n                        MCQ(keys.acMath, keys.qMistNegTimeSemantics, 'future', 0, [`Mistinterpreted a negative work rate as meaning \r\n                        'The job takes time to complete' \r\n                        when it actually means 'The job takes negative time to complete'`])\r\n                    ]} />\r\n                ]}});\r\n                default: return Scene('dgWorkRateNeg-start', {settings, viewProps, makeChange,\r\n                    audio: [\r\n                        {id: \"f-annoyed\"}\r\n                    ],\r\n                    img: [\r\n                        {id:  keys.nMc,\r\n                        imageId: keys.getImg('nMc'), pose: 'shocked',\r\n                        convoId: 'mistake', textId: 'tdef1', text: [\r\n                            {text: `Since I'm looking for this person's work rate, a negative answer doesn't to make much sense.`},\r\n                        ], initial: ['pL'], animate: ['aL']},\r\n                    ],\r\n                    choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'firstReason'}} />\r\n                ]}});\r\n            }\r\n        }\r\n}\r\n\r\n\r\nexport const dgNoVar = Dialogue(\r\n    'dgNoVar',\r\n    (read, write, mistake) => {\r\n        let eq = mistake.eq;\r\n  \r\n        let lhs = getEqSide(eq.eq, 0);\r\n        let rhs = getEqSide(eq.eq, 1);\r\n        return {eq, lhs: roundTo(evaluate(lhs), 2), rhs: roundTo(evaluate(rhs), 2)}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            case 'need': return Scene('dgNoVar-need', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgNoVar', textId: 'need', text: [\r\n                        {text: `I need an equation with a variable to represent the unknown I'm trying to solve for`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{end:true}} />\r\n                ]\r\n            }});\r\n            case 'evaluated': return Scene('dgNoVar-evaluated', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgNoVar', textId: 'evaluated', text: [\r\n                        {text: `This equation evaluates to ${write.temp.lhs}=${write.temp.rhs}.`},\r\n                        write.temp.lhs!==write.temp.rhs?{text: `Which is definitely wrong.`}:null\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'need'}} />\r\n                ]\r\n            }});\r\n            case 'noVar': return Scene('dgNoVar-noVar', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgNoVar', textId: 'noVar', text: [\r\n                        {text: `If my equation has no variables, then there's no unknown answer that I can solve for.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'evaluated'}} />\r\n                ]\r\n            }});\r\n            default: return Scene('dgNoVar-start', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgNoVar', textId: 'start', text: [\r\n                        {text: `Wait, the point of variables is to represent the unknown. The equation`},\r\n                        {latex: write.temp.eq.latex},\r\n                        {text: `has no variables.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'noVar'}} />\r\n                ]\r\n            }});\r\n        }\r\n    }\r\n)\r\n\r\nexport const dgTwoVars = Dialogue(\r\n    'dgTwoVars',\r\n    (read, write, mistake) => {\r\n        let demoEq = toLatex(`5=a+b`);\r\n        return {eq: mistake.eq, variables: getVariables(mistake.eq.eq), demoEq}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            case 'needOne': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `To find an unknown I can only have one variable in the equation`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{end: true}} />\r\n                ]\r\n            }});\r\n            case 'demo-right': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `Exactly. I can't know because it could be any answer. Any value of a \r\n                            has a partner b that can make it equal 5.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'needOne'}} />,\r\n                ]\r\n            }});\r\n            case 'demo-wrong-3': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `When solving an equation, I want a specific value. \r\n                        Since I can't figure out a specific value for a or b in the equation`},\r\n                        {latex: write.temp.demoEq},\r\n                        {text: `. I can't solve it.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'demo'}} />,\r\n                ]\r\n            }});\r\n            case 'demo-wrong-2': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `Making`},\r\n                        {latex: write.temp.demoEq},\r\n                        {text: `true for all values.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'demo-wrong-3'}} />,\r\n                ]\r\n            }});\r\n            case 'demo-wrong': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `It could be ${write.temp.demoAnswer}, but it could also be any other, like 10, or 8, or 1000 as well. \r\n                        Every possible value for a, has a value for b that would sum to 5.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'demo-wrong-2'}} />,\r\n                ]\r\n            }});\r\n            case 'demo': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `So in the equation`},\r\n                        {latex: write.temp.demoEq},\r\n                        {text: `What's the value of a?`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"I can't know\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'demo-right'}\r\n                    ]} />,\r\n                    <Text text={\"500\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'demo-wrong'},\r\n                        {type: 'set', path: 'temp.demoAnswer', value: '500'}\r\n                    ]} />,\r\n                    <Text text={\"-3\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'demo-wrong'},\r\n                        {type: 'set', path: 'temp.demoAnswer', value: '-3'}\r\n                    ]} />,\r\n                    <Text text={\"0\"}  out={[\r\n                        {type: 'set', path: 'temp.node', value: 'demo-wrong'},\r\n                        {type: 'set', path: 'temp.demoAnswer', value: '0'}\r\n                    ]} />,\r\n                ]\r\n            }});\r\n            case 'demo-eq': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `What's a simple example...ah! here we go.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'demo'}} />\r\n                ]\r\n            }});\r\n            case 'infinite': return Scene(`dgTwoVars-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: node, text: [\r\n                        {text: `If there were two unknowns, like ${listToEnglish(write.temp.variables)}, \r\n                            there would be an infinite number of answers that make this equation true.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'demo-eq'}} />\r\n                ]\r\n            }});\r\n            default: return Scene(`dgTwoVars-start`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'dgTwoVars', textId: 'start', text: [\r\n                        {text: `Wait, this equation`},\r\n                        {latex: write.temp.eq},\r\n                        {text: `has two variables, ${listToEnglish(write.temp.variables)}.`}\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{type: 'set', path: 'temp.node', value: 'infinite'}} />\r\n                ]\r\n            }});\r\n        }\r\n    }\r\n)\r\n\r\n//combineVarRhs\r\nexport const dgCombineVarRhs = Dialogue(\r\n    'dgCombineVarRhs',\r\n    (read, write, mistake) => {\r\n        return {}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('dgCombineVarRhs-start', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {id:  keys.nMc, imageId: keys['sisMc-img'], pose: 'neutral', initial: ['pL'], animate: ['aL'],\r\n                    convoId: 'mistake', textId: 'tdef1', text: [\r\n                        {text: `Mistake dialogue about putting the variable on the right hand side of the combine formula`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={{end:true}} />\r\n                ]\r\n            }});\r\n        }\r\n    }\r\n)\r\n\r\nexport const dgSecondsToHoursMistake = Dialogue(\r\n    'dgSecondsToHoursMistake',\r\n    (read, write, mistake) => {\r\n     //   let wrongAnswer = evaluate(`${mistake.wrongEq.eq}*${mistake.estimatedSeconds}`);\r\n        let timeOptions = [60, 120, 80, 20];\r\n        let answerHours = evaluate(`${mistake.estimatedSeconds}*(1/3600)`);\r\n        \r\n        // {type: 'set', path: 'temp.mistake', value: {\r\n        //     key: 'dgSecondsToHoursMistake',\r\n        //     solutionHours: evaluated, \r\n        //     estimatedSeconds,\r\n        //     correctEq: secondsToHoursEqs[0], \r\n        //     wrongEq: {eq: v.eq, latex: v.latex}, request}},\r\n        return {request: mistake.request, ...mistake, //wrongAnswer: roundTo(wrongAnswer, 2), \r\n            timeOptions, answerHours}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dialogue dgSecondsToHoursMistake node ${node} write`, write);\r\n        let wrongEq = write.temp.wrongEq;\r\n        let estimatedSeconds = write.temp.estimatedSeconds;\r\n      //  let wrongAnswer = write.temp.wrongAnswer;\r\n        let timeOptions = write.temp.timeOptions;\r\n        let secondsInMinute = write.temp.secondsInMinute;\r\n        let minutesToHours = write.temp.minutesToHours;\r\n        let minutes = write.temp.minutes;\r\n        let smhEqs = write.temp.smhEqs;\r\n        let answerHours = write.temp.answerHours;\r\n        let userAnswer = write.temp.userAnswer;\r\n        let isCorrect = write.temp.isCorrect;\r\n        let secToMinEq = write.temp.secToMinEq;\r\n        let operation = write.temp.operation;\r\n        switch(node){\r\n            case 'end': return Scene(`dgSecondsToHoursMistake-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        isCorrect?{text: `Yes ${roundTo(userAnswer, 2)} hours seems right!`}\r\n                            :{text:`${roundTo(userAnswer, 2)} hours seems a little off...`}\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    options: [\r\n                        <Text text=\"next\" out={[\r\n                            {end: true}\r\n                        ]}  />\r\n                    ]\r\n            }});\r\n            case 'minToHourEqs': return Scene(`dgSecondsToHoursMistake-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `If there are ${secondsInMinute} seconds in a minute, and ${minutesToHours} minutes\r\n                        in an hour, then to convert ${roundTo(estimatedSeconds, 2)} seconds to hours I'll need the equation...`},\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, v) => {\r\n                        let ans = evaluate(`${v.eq}*${estimatedSeconds}`);\r\n                        makeChange(id, [\r\n                            MCQ('secToHour', 'secToHourEq', null, v.i===0, [\r\n                                {text: `Player ${v.i===0?`correctly`:`incorrectly`} thought the equation to convert seconds to hours was`},\r\n                                {latex: v.latex},\r\n                                v.i === 0?null:{text: `when the actual equation was`},\r\n                                v.i === 0?null:{latex: smhEqs[0].latex}\r\n                            ]),\r\n                            {type:'set', path: 'temp.node', value: 'end'},\r\n                            {type:'set', path: 'temp.userAnswer', value: ans},\r\n                            {type:'set', path: 'temp.isCorrect', value: roundTo(ans, 2) === roundTo(answerHours, 2)},\r\n                        ])\r\n                    },\r\n                    options: smhEqs.map((e, i) => {\r\n                        return <Text {...e} i={i} />\r\n                    })\r\n            }});\r\n            case 'minToHour': return Scene(`dgSecondsToHoursMistake-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {latex: secToMinEq.latex},\r\n                        {text: `multiplied by ${roundTo(estimatedSeconds, 2)} would equal ${roundTo(minutes, 2)} minutes. \r\n                        The client wants it in hours... How many minutes are there in an hour?`},\r\n                    ]},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, v) => {\r\n                        let stm = secondsInMinute;\r\n                        let mth = v.text;\r\n                        let solution = evaluate(`${stm}*${mth}`);\r\n                        let multiples = [1, 10];\r\n                        let solutions = [];\r\n                        multiples.map(e => {\r\n                            solutions.push({eq: `${estimatedSeconds}*1/${e*solution}`, \r\n                                            latex: getMultiple(roundTo(estimatedSeconds, 2), getFraction(1, e*solution))});\r\n                            solutions.push({eq: `${estimatedSeconds}*${e*solution}`, \r\n                                            latex: getMultiple(roundTo(estimatedSeconds, 2), roundTo(e*solution, 2))});\r\n                        })\r\n                        makeChange(id, [\r\n                            MCQ('secToHour', 'minInHour', null, v.i===0, [\r\n                                {text: `Player ${v.i===0?`correctly`:`incorrectly`} thought there were ${v.text} minutes in an hour`},\r\n                            ]),\r\n                            {type:'set', path: 'temp.node', value: 'minToHourEqs'},\r\n                            {type:'set', path: 'temp.minutesToHours', value: mth},\r\n                            {type:'set', path: 'temp.smhEqs', value: solutions},\r\n                        ])\r\n                    },\r\n                    options: timeOptions.map((t, i) => {\r\n                        return <Text text={t} i={i} />\r\n                    })\r\n            }});\r\n            case 'operation':\r\n                let secToMinEqs = [\r\n                    {eq: `${estimatedSeconds}/${secondsInMinute}`, latex: getFraction(roundTo(estimatedSeconds, 2), secondsInMinute)},\r\n                    {eq: `${estimatedSeconds}*${secondsInMinute}`, latex: getMultiple(roundTo(estimatedSeconds, 2), secondsInMinute)},\r\n                ]\r\n                return Scene(`dgSecondsToHoursMistake-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                        convoId: 'mistake', textId: node, text: [\r\n                            {text: `Since I think there are ${secondsInMinute} seconds in a minute,  \r\n                            to convert ${roundTo(estimatedSeconds, 2)} seconds to minutes I should use`}\r\n                        ]},\r\n                    ],\r\n                    choice: {\r\n                        onInput: (id, v)=>{\r\n                            let solution = evaluate(v.eq);\r\n                            makeChange(id, [\r\n                                v.i === 0?MCQ('secToHour', 'secInMinOperation', null, v.i===0, [\r\n                                    {text: `Player correctly they needed to divide the number of seconds to convert to minutes`},\r\n                                ]):MCQ('secToHour', 'secInMinOperation', null, v.i===0, [\r\n                                    {text: `Player incorrectly they needed to multiply the number of seconds to convert to minutes`},\r\n                                ]),\r\n                                {type:'set', path: 'temp.node', value: 'minToHour'},\r\n                                {type:'set', path: 'temp.minutes', value: solution},\r\n                                {type:'set', path: 'temp.secToMinEq', value: {eq: v.eq, latex: v.latex}},\r\n                                {type:'set', path: 'temp.operation', value: v.i === 0?'divide':'multiply'},\r\n                            ])\r\n                        },\r\n                        options: secToMinEqs.map((e, i) => {\r\n                            return <Text {...e} i={i}  />\r\n                        })\r\n                }});\r\n            case 'size': return Scene(`dgSecondsToHoursMistake-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),\r\n                        convoId: 'mistake', textId: node, text: [\r\n                            {text: secondsInMinute === 60?`Yes, that's right`:\"mmm...that doesn't feel right but carry on.\"},\r\n                            {text: `When I convert this time from seconds to minutes...`},\r\n                        ]},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={'I expect the number will be smaller'}  out={[\r\n                            {type:'set', path: 'temp.node', value: 'operation'},\r\n                            MCQ('secToHour', 'secInMinSize', null, 1, [\r\n                                {text: `Player correctly thought the number of minutes would be smaller than the number of seconds, when converted`},\r\n                            ])\r\n                        ]} />,\r\n                        <Text text={'I expect the number will be larger'}  out={[\r\n                            {type:'set', path: 'temp.node', value: 'operation'},\r\n                            MCQ('secToHour', 'secInMinSize', null, 0, [\r\n                                {text: `Player incorrectly thought the number of minutes would be larger than the number of seconds, when converted`},\r\n                            ])\r\n                        ]} />\r\n                    ]\r\n                }});\r\n            default: return Scene(`dgSecondsToHoursMistake-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: node, text: [\r\n                        {text: `Back to basics. How many seconds are there in a minute?`},\r\n                    ]},\r\n                ],\r\n                choice: {options: timeOptions.map((t, i) => {\r\n                    return <Text text={t}  out={[\r\n                        {type:'set', path: 'temp.node', value: 'size'},\r\n                        {type:'set', path: 'temp.secondsInMinute', value: t},\r\n                        MCQ('secToHour', 'secInMin', null, i===0, [\r\n                            {text: `Player ${i===0?'correctly':'incorrectly'} answered that there are ${t} seconds in a minute, \r\n                            when there are ${timeOptions[0]}`},\r\n                        ])\r\n                    ]} />\r\n                })\r\n            }});\r\n            // default: return Scene('dgSecondsToHoursMistake-start', {settings, viewProps, makeChange,\r\n            //     img: [\r\n            //         {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n            //         convoId: 'mistake', textId: 'tdeadf', text: [\r\n            //             {text: `Ah no if ${roundTo(estimatedSeconds, 2)} were converted to hours with`},\r\n            //             {latex: wrongEq.latex},\r\n            //             {text: ` that would equal ${wrongAnswer} hours, that seems a little off.`}\r\n            //         ]},\r\n            //     ],\r\n            //     choice: {options: [\r\n            //         <Text text={\"next\"}  out={{type:'set', path: 'temp.node', value: 'smallerLarger'}} />\r\n            //     ]\r\n            // }});\r\n        }\r\n    }\r\n)//dgTimeRatioMistake\r\n\r\n\r\nexport const dgTimeRatioMistake = Dialogue(\r\n    'dgTimeRatioMistake',\r\n    (read, write, mistake) => {\r\n        return {request: mistake.request, correctEq: mistake.correctEq, wrongEq: mistake.wrongEq}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('dgTimeRatioMistake-start', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL'),\r\n                    convoId: 'mistake', textId: 'tdef1', text: [\r\n                        {text: `Mistake dialogue dgTimeRatioMistake`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                        <Text text={\"next\"}  out={{end:true}} />\r\n                    ]\r\n            }});\r\n        }\r\n    }\r\n)//dgTimeRatioMistake","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\n\r\nexport const dgClientStory = {\r\n    key: 'dgClientStory',\r\n    pull: (read, write, request) => {\r\n        let jobSize = 0;\r\n        if(request.siteSize.value > 50){\r\n            jobSize = 1;\r\n        }else if(request.siteSize.value > 100){\r\n            jobSize = 2;\r\n        }else if(request.siteSize.value > 200){\r\n            jobSize = 3;\r\n        }\r\n        return {\r\n            ...request,\r\n            jobSize\r\n        }\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dgClientStory node ${node} write`, write);\r\n        let request = get('temp.request', read, write, null);\r\n        let clientId = write.temp.clientId;\r\n        switch(node){\r\n            case 'calc2': return Scene('dgClientStory-comment', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'mistake', textId: node,\r\n                    text: [{text: `Before I calculate how long it'll take you to cleanse the whole site together`}]},\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n                ],\r\n                choice: {options: [ <Text text={\"next\"}  out={[ {end: true} ]}  /> ]}\r\n            });\r\n            case 'calc1': return Scene('dgClientStory-comment', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'mistake', textId: node,\r\n                    text: [{text: `Then I'll measure how long it takes each of you to break the samples down individually`}]},\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n                ],\r\n                choice: {options: [ <Text text={\"next\"}  out={[ {type: 'set', path: 'temp.node', value: 'calc2'} ]}  /> ]}\r\n            });\r\n            case 'experiment': return Scene('dgClientStory-breakdown', {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                    {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                    text: [{text: `I'll experiment with it, then let our sisters know how to break the stuff down`}]}\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={\"next\"}  out={[ {type: 'set', path: 'temp.node', value: 'calc1'} ]} />\r\n                ]}\r\n            });\r\n            default: \r\n                switch(clientId){\r\n                    case keys.cliCorrosion: return dgCorrosion('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                    case keys.cliParanormal: return dgParanormal('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                    case keys.cliPlantDisease: return dgPlantDisease('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                    case keys.cliMagicMold: return dgMagicMold('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                    case keys.cliFratBoys: return dgTeenageBoys('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                    case keys.cliTempFlux: return dgTempFlux('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                    default: return dgGenericClient('experiment', id, node, read, write, makeChange, settings, viewProps)\r\n                }\r\n            }\r\n    }\r\n}\r\nconst dgMagicMold = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let jobSize = write.temp.jobSize;\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'mightBeNew': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `It might be new...I'll make sure we get a lot of samples. It could be useful! who knows!`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'glitterOdd': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 2, null, 'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Glittering Mold? I've never heard of such a species before...`}]},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'mightBeNew'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene('dgMagicMold-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 2, 'iR', 'aR'),  convoId: 'mistake', textId: 'tdef1', \r\n                text: [{text: `Ewww...A restaurant found a glittering kind of mould in one of their brewing tubs.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'glitterOdd'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\nconst dgCorrosion = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let jobSize = write.temp.jobSize;\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'isAlot':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Excellent, something odd is definitely going on.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'isNotAlot':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 0, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Ah well, they're still paying so, lets do it.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'material2':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 2, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `according to them the fans and drills are decaying up to 800x faster than normal. That's a lot right?`}]}\r\n            ],\r\n            choice: {options: [\r\n                        <Text text={\"yes 800x is a lot\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'isAlot'},\r\n                            ]}\r\n                        />,\r\n                        <Text text={\"no 800x isn't a big increase\"}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'isNotAlot'},\r\n                            ]}\r\n                        />\r\n                ]}\r\n            });\r\n        case 'material':return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Yes you do. All the rotating elements in this companies machinery are breaking down abnormally fast.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'material2'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'whatNow': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Do I even want to know...?`}]},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'material'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene('dgCorrosion-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, 'iR', 'aR'),  convoId: 'mistake', textId: 'tdef1', \r\n                text: [{text: `Strange...very strange!`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'whatNow'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\nconst dgParanormal = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let jobSize = write.temp.jobSize;\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'careful': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null,'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Well be careful, ghosts aren't as unconscious as toxic geysers or energy veins.`}]},\r\n                {...keys.getSis('sis0', 0, 1, null,'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'investigation': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `They've appended an attachment about their extensive internal investigations into theft, \r\n                which only turned up evidence of the impossible.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'careful'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'stickyFingers': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `It couldn't just be a case of sticky fingers?`}]},\r\n                {...keys.getSis('sis0', 0, 1, null,'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'investigation'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene('dgParanormal-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, 'iR', 'aR'),  convoId: 'mistake', textId: 'tdef1', \r\n                text: [{text: `There are reports of paranormal activity in the mines.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'stickyFingers'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\nconst dgTempFlux = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let jobSize = write.temp.jobSize;\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'biggerBetter': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Ah, in this case, the bigger the better. Planet energy lines are difficult to reach, \r\n                    without industrial assistance.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'howBig': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `How big does it look?`}]},\r\n                {...keys.getSis('sis0', 0, 1,null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'biggerBetter'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'energyLine': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null,'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Delicious! They must have struck a planetary energy line or something. I want this one.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'howBig'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene(`${id}-start`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, 'iR', 'aR'),  convoId: 'mistake', textId: 'tfstart', \r\n                text: [{text: `Oooh, a dig site in the mountains is struggling with strange temperature fluctuations`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'energyLine'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\nconst dgPlantDisease = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let jobSize = write.temp.jobSize;\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'willDeal': return Scene('dgPlantDisease-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 0, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [\r\n                    {text: `${keys.sis0} scowls disapprovingly`, className: 'text-italic'},\r\n                    {text: `Yes it can and will be dealt with. I'll get the samples.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'canHandle': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Think you'll be able to handle it? Is it worth the risk?`}]},\r\n                {...keys.getSis('sis0', 0, 0, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'willDeal'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'plantsDying2': return Scene('dgPlantDisease-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 1, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 2, null, ['aR']),  convoId: 'mistake', textId: node, \r\n                text: [{text: `It's spreading, not quickly thankfully. Even so, \r\n                    that's something that needs to be dealt with.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'canHandle'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'plantsDying': return Scene('dgPlantDisease-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 2, null, ['aR', 'tremble']),  convoId: 'mistake', textId: node, \r\n                text: [{text: `A copse of trees is dying of some strange disease...\r\n                the client says their trunks become rubbery and grey, before they flop and splinter.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'plantsDying2'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'whatIs': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 3, null, 'aL'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `What is it?`}]},\r\n                {...keys.getSis('sis0', 0, 2, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'plantsDying'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene('dgPlantDisease-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 2, 'iR', 'aR'),  convoId: 'mistake', textId: 'tdef1', \r\n                text: [{text: `Now this one sounds dangerous...`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'whatIs'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\n\r\nconst dgTeenageBoys = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let color = settings.colortext === 1?'primary':'text';\r\n    switch(node){\r\n        case 'sizeAns2': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [\r\n                    {text: `Probably`},\r\n                    {text: `more than 100 kilograms`, color},\r\n                    {text: `of toxic waste. But! we could get lucky~`},\r\n                ]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'sizeAns': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [\r\n                    {text: `It's the desert which has a large area and a high temperature, \r\n                    so yes it probably will be large. We could get lucky though.`}\r\n                ]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'sizeAns2'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'size': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'mistake', textId: node, \r\n                text: [\r\n                    {text: `Do you think it'll be a particularly`},\r\n                    {text: `large`, color},\r\n                    {text: `mess?`},\r\n                ]},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'sizeAns'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'messy': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId:node, \r\n                text: [{text: `Absolutely none! Could be a cross over with the deserts energy channel, I suppose.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'size'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'substance': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'mistake', textId: node, \r\n                text: [{text: `Any idea what might be shooting out of the desert plateau? Or what caused it?`}]},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'messy'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'toxicGeysers': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR'),  convoId: 'mistake', textId: node, \r\n                text: [{text: `Apparently there were ground shakes, \r\n                just after they performed some kind of vacuous ceremony at midnight.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'substance'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene('dgTeenageBoys-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, 'iR', 'aR'),  convoId: 'mistake', textId: 'tdss', \r\n                text: [{text: `Oh look at this! There was a party in the desert that errupted in a noxious geyser.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'toxicGeysers'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\n\r\nconst dgGenericClient = (next, id, node, read, write, makeChange, settings, viewProps) => {\r\n    let jobSize = write.temp.jobSize;\r\n    switch(node){\r\n        case 'end': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, ['aR']),  convoId: 'mistake', textId: node, \r\n                text: [\r\n                    {text: `I just hope it tastes good. \r\n                    ${Math.random() > 0.5?'The last one was delightfully in tune!'\r\n                        :\"The last one wasn't synchronizing at all.\"}`}\r\n                ]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: next}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'sizeAns': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, null, ['aR']),  convoId: 'mistake', textId: node, \r\n                text: [\r\n                    jobSize === 0?{text: `No it sounds pretty small`}:null,\r\n                    jobSize === 1?{text: `It sounds normal, so who knows`}:null,\r\n                    jobSize === 2?{text: `The client makes it sound sizeable, so it might take a while`}:null,\r\n                    jobSize === 3?{text: `It certainly sounds like a voluminous job`}:null\r\n                ]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value:'end'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        case 'size': return Scene(`dgTeenageBoys-${node}`, {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, null, 'aL'), convoId: 'mistake', textId: node, \r\n                text: [{text: `Is it a particularly large mess?`}]},\r\n                {...keys.getSis('sis0', 0, 1, null, 'aR')}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'sizeAns'}\r\n                ]} \r\n            />\r\n        ]}});\r\n        default:\r\n        return Scene('dgGenericClient-default', {settings, viewProps, makeChange,\r\n            img: [\r\n                {...keys.getSis('Mc', 'Mc', 0, 'iL', 'aL')},\r\n                {...keys.getSis('sis0', 0, 1, 'iR', 'aR'),  convoId: 'mistake', textId: 'tdef1', \r\n                text: [{text: `Sounds standard, toxic waste spill that needs discretion.`}]}\r\n            ],\r\n            choice: {options: [\r\n                <Text text={\"next\"}  out={[\r\n                    {type: 'set', path: 'temp.node', value: 'size'}\r\n                ]} \r\n            />\r\n        ]}});\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent, Dialogue} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation, getConversionFormula, evaluate, \r\n        interpret, substitute} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction, getMultiple} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\nexport const dgHeadSister = Dialogue(\r\n    'dgHeadSister',\r\n    (read, write) => {\r\n        let reviewAggregate = get('values.reviewAggregate', read, write, {});\r\n        return {reviewAggregate}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dialogue ${id} node ${node} write`, write);\r\n        let reviewAggregate = write.temp.reviewAggregate;\r\n        switch(node){\r\n            case 'good':\r\n                return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('mc', 'Mc', 3, null, 'aL')},\r\n                        {...keys.getSis('sisFast', 0, 1, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                            {text: `Excellent! Do keep those tasty jobs coming, please.`},\r\n                        ]},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={`next`}  out={[{end: true}]} />,\r\n                    ]}\r\n                });\r\n            case 'bad':\r\n                return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('mc', 'Mc', 3, null, 'aL')},\r\n                        {...keys.getSis('sisFast', 0, 2, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                            {text: `Ah... as long as you focus on combining our work rates together and converting\r\n                            them to hours for the clients, it should be alright?`},\r\n                        ]},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={`\"Yeah, you're right\"`}  out={[{end: true}]} />,\r\n                        <Text text={`\"Maybe...\"`}  out={[{end: true}]} />,\r\n                    ]}\r\n                });\r\n            default: return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 3, 'iL', 'aL')},\r\n                    {...keys.getSis('sisFast', 0, 0, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `How are the reviews and those averages you're worried about going?`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`\"We're averaging at ${reviewAggregate.avg}, so its good!\"`}  \r\n                        out={[{type: 'set', path: 'temp.node', value: 'good'}]} />,\r\n                        <Text text={`\"We're averaging at ${reviewAggregate.avg}, so its bad.\"`}  \r\n                            out={[{type: 'set', path: 'temp.node', value: 'bad'}]} />,\r\n                ]}\r\n            });\r\n        }\r\n    }\r\n)\r\nexport const dgSister2 = Dialogue(\r\n    'dgSister2',\r\n    (read, write) => {\r\n        return {}\r\n    },\r\n    (id, node, read, write, makeChange, settings, viewProps) => {\r\n        console.log(`dialogue ${id} node ${node} write`, write);\r\n        switch(node){\r\n            case 'blooming': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis2', 2, 2, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Guess I'm just a late bloomer! I suppose there is something...but I'm taking a while to bloom, so to speak.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`\"Keep at it\"`}  out={[{end: true}]} />,\r\n                ]}\r\n            });\r\n            case 'combined': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis2', 2, 2, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `That's true... thanks ${keys.sisMc}`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`\"No problem\"`}  out={[{end: true}]} />,\r\n                ]}\r\n            });\r\n            case 'numbers': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 3, 'iL', 'aL')},\r\n                    {...keys.getSis('sis2', 2, 1, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Yes, but you're good with your math-y numbers. I'm not particularly good at magic\r\n                        or numbers.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`\"You're still making the combined work rate faster\"`}  \r\n                        out={[{type:'set', path: 'temp.node', value: 'combined'}]} />,\r\n                    <Text text={`\"Then there must be something else you're good at\"`}  \r\n                        out={[{type:'set', path: 'temp.node', value: 'blooming'}]} />,\r\n                ]}\r\n            });\r\n            case 'trying': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis2', 2, 2, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `You might be right... but I'll keep trying. I hear ${keys.sis0} was a late bloomer too.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`\"Yes, she was\"`}  out={[{end: true}]} />,\r\n                ]}\r\n            });\r\n            case 'enjoy': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, 'iL', 'aL')},\r\n                    {...keys.getSis('sis2', 2, 1, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `I'm enjoying them, even if I'm not quite as fast as the others at breaking the waste down.`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`\"You're better at it than me, at least\"`}  \r\n                        out={[{type: 'set', path: 'temp.node', value: 'numbers'}]} />,\r\n                    <Text text={`\"Yeah, there are jobs some of us just aren't cut out for\"`}  \r\n                        out={[{type: 'set', path: 'temp.node', value: 'trying'}]} />,\r\n                ]}\r\n            });\r\n            default: return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Hello ${keys.sis2}, how are you going with the toxic waste jobs?`},\r\n                    ]},\r\n                    {...keys.getSis('sis2', 2, 0, 'iR', 'aR')},\r\n                ],\r\n                choice: {options: [\r\n                    <Text text={`next`}  out={[{type: 'set', path: 'temp.node', value: 'enjoy'}]} />,\r\n                ]}\r\n            });\r\n        }\r\n    }\r\n)\r\nexport const dgFastSisterDenominator = {\r\n    key: `dgFastSisterDenominator`,\r\n    move: 'hub',\r\n    pull: (read, write) => {\r\n        let demoEq = `1/x = 1/6+1/8`\r\n        return {\r\n            demoEq: {eq: demoEq, latex: `${getFraction(1, 'x')}=${getFraction(1, 6)}+${getFraction(1,8)}`},\r\n            numberEq: {eq: `1/x=${1/6}+${1/8}`, latex: `${getFraction(1, 'x')}=${roundTo(1/6, 3)}+${roundTo(1/8, 3)}`}\r\n        };\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let demoEq = write.temp.demoEq;\r\n        let numberEq = write.temp.numberEq;\r\n        switch(node){\r\n            case 'getsIt': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                audio: [\r\n                    {id: \"f1-gasp\"}\r\n                ],\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 3, null, 'pL')},\r\n                    {...keys.getSis('sisFast', 1, 1, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Oh I get it! So my smaller work time gives me a smaller denominator, therefore\r\n                        a larger fraction and therefore a larger amount of work done per second?`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [<Text text={`Exactly`}  out={[{end: true}]} />]}\r\n            });\r\n            case 'numberError': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `The 1 represents a job. That job might involve breaking down kilo’s, but \r\n                        the equation doesn’t say anything about kilos, it just says how long it takes you to do one job, whatever that is`},\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[{type: 'set', path: 'temp.node', value: 'number'}]} />]}\r\n            });\r\n            case 'number': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `If I replace the fraction with its numeric value we get`},\r\n                        {latex: numberEq.latex},\r\n                        {text: 'which tells us...'}\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [\r\n                <Text text={\"the amount of work each of you can do per second\"}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'getsIt'},\r\n                        MCQ(keys.acGameMCQ, keys.qSFCoefficientSemantics, 'amountWork', 1)\r\n                    ]} />,\r\n                <Text text={\"the total number of kilos you can break down\"}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'numberError'},\r\n                        MCQ(keys.acGameMCQ, keys.qSFCoefficientSemantics, 'totalKilos', 0, [\r\n                            {text: `Player misunderstood the meaning of the coefficients in`},\r\n                            {latex: numberEq.latex},\r\n                            {text: `to mean \"the total number of kilos you can break down\" when they actually ment\r\n                            \"the amount of work each of you can do per second\"\r\n                            `}\r\n                        ])\r\n                    ]} />,\r\n            ]}});\r\n            case 'fractionError': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Wait, the larger the fractions denominator is, the smaller the fraction is. \r\n                                So...which fraction would be larger?`},\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [\r\n                <Text text={\"1/10\"}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'help2'},\r\n                        MCQ(keys.acGameMCQ, keys.qSFLargerFraction, '1/10', 1)\r\n                    ]} />,\r\n                <Text text={\"1/100\"}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'help2'},\r\n                        MCQ(keys.acGameMCQ, keys.qSFLargerFraction, '1/100', 0, [\r\n                            {text: `Player incorrectly answered that the fraction 1/100 was larger than 1/10`}\r\n                        ])\r\n                    ]} />,\r\n            ]}});\r\n            case 'fraction3': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `A fraction represents the seconds it takes one of you to break down 1 sample. \r\n                        Because the work time is the denominator...`},\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [\r\n                <Text text={`a larger work time produces a smaller fraction`}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'number'},\r\n                        MCQ(keys.acGameMCQ, keys.qSFDenominatorMeaning, 'largeDenSmallFrac', 1)\r\n                    ]} />,\r\n                <Text text={`a larger work time produces a larger fraction`}  \r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'fractionError'},\r\n                        MCQ(keys.acGameMCQ, keys.qSFDenominatorMeaning, 'largeDenLargeFrac', 0, [\r\n                            {text: `Player incorrectly answered that a large denominator produces a larger fraction value`}\r\n                        ])\r\n                    ]} />,\r\n            ]}});\r\n            case 'fraction2': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Eh...we'll continue with your example`},\r\n                        {latex: demoEq.latex}\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[{type: 'set', path: 'temp.node', value: 'fraction3'}]} />]}\r\n            });\r\n            case 'fraction1': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `You'd expect a longer work rate to be the bigger number, \r\n                        but because it’s the denominator of a fraction here, the opposite is true`},\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[{type: 'set', path: 'temp.node', value: 'fraction2'}]} />]}\r\n            });\r\n            case 'fraction': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                audio: [\r\n                    {id: \"f1-laugh\"}\r\n                ],\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'aL'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Ah I see what you're confused about`},\r\n                    ]},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'pR')},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[{type: 'set', path: 'temp.node', value: 'fraction1'}]} />]}\r\n            });\r\n            case 'help2': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                audio: [\r\n                    {id: \"f1-annoyed\"}\r\n                ],\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'pL')},\r\n                    {...keys.getSis('sisFast', 1, 3, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `Doesn’t that mean she is adding less to our combined work rate, and is therefore \r\n                        somehow working faster than me?`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={[{type: 'set', path: 'temp.node', value: 'fraction'}]} />]}});\r\n            case 'help1': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 0, 'iL', 'pL')},\r\n                    {...keys.getSis('sisFast', 1, 0, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `So, if the denominator is our work time, so someone who takes longer to finish, like \r\n                        ${keys[`sis1`]}, has a bigger denominator, that makes the fraction value smaller right?`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [<Text text={`next`}  out={[{type: 'set', path: 'temp.node', value: 'help2'}]} />]}});\r\n            case 'helpLie2': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                    img: [\r\n                        {...keys.getSis('mc', 'Mc', 0, null, 'pL')},\r\n                        {...keys.getSis('sisFast', 1, 3, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                            {text: `Oh good, I was worried about my memory for a bit there.`},\r\n                        ]},\r\n                    ],\r\n                    choice: {options: [\r\n                            <Text text={`next`}  out={[\r\n                                    {type: 'set', path: 'temp.node', value: 'help1'}\r\n                            ]} />,\r\n                        ]}\r\n                    });\r\n            case 'helpLie': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                img: [\r\n                    {...keys.getSis('mc', 'Mc', 1, null, 'pL')},\r\n                    {...keys.getSis('sisFast', 1, 2, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                        {text: `What!? That can't be right! I copied it down just as you said, or at least I thought I did`},\r\n                    ]},\r\n                ],\r\n                choice: {options: [\r\n                        <Text text={`\"just joking, that was the work rate formula\"`}  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'helpLie2'}\r\n                        ]} />,\r\n                    ]}\r\n                });\r\n            case 'help': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                audio: [\r\n                    {id: \"f1-sigh\"}\r\n                ],\r\n                    img: [\r\n                        {...keys.getSis('mc', 'Mc', 0, null, 'pL')},\r\n                        {...keys.getSis('sisFast', 1, 2, null, 'aR'), convoId: 'mistake', textId: node, text: [\r\n                            {text: `Looking at this equation...`},\r\n                            {latex: demoEq.latex},\r\n                            {text: `I think this is a work rate equation...`, fontSize: '0.65'},\r\n                        ]},\r\n                    ],\r\n                    choice: {options: [\r\n                    <Text text={`\"It is\"`}  out={[{type: 'set', path: 'temp.node', value: 'help1'}]} />,\r\n                    <Text text={`(lie) \"No that's actually the pythagoras equation\"`}  \r\n                    out={[{type: 'set', path: 'temp.node', value: 'helpLie'}]} />,\r\n                ]}});\r\n            case 'question': return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                        audio: [\r\n                            {id: \"strangeShop\", loop: true, volume: 0.3}\r\n                        ],\r\n                        img: [\r\n                            {...keys.getSis('mc', 'Mc', 1, 'iL', 'pL')},\r\n                            {...keys.getSis('sisFast', 1, 3, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                                {text: `There’s something I don’t understand about these \r\n                                fractions you’re divining the time we'll finish from…`},\r\n                            ]},\r\n                        ],\r\n                        choice: {options: [\r\n                                <Text text={`\"what don't you understand?\"`}  out={[\r\n                                        {type: 'set', path: 'temp.node', value: 'help'}\r\n                                ]} />,\r\n                                <Text text={`\"I don't have time for this\"`}  out={[\r\n                                    {end: true}\r\n                            ]} />\r\n                            ]}\r\n                    });\r\n                    case 'trash': return Scene(`${id}-${node}`, {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {...keys.getSis('mc', 'Mc', 1, 'iL', 'pL')},\r\n                            {...keys.getSis('sisFast', 1, 2, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                                {text: `Oops I forgot! I'll get right on that...`},\r\n                            ]},\r\n                        ],\r\n                        choice: {options: [\r\n                                <Text text={\"next\"}  out={[\r\n                                        {type: 'set', path: 'temp.node', value: 'question'}\r\n                                ]} />,\r\n                            ]}\r\n                        });\r\n                    default: return Scene(`dgFastSisterDenominator-${node}`, {settings, viewProps, makeChange,\r\n                        img: [\r\n                            {...keys.getSis('mc', 'Mc', 1, 'iL', 'pL')},\r\n                            {...keys.getSis('sisFast', 1, 3, 'iR', 'aR'), convoId: 'mistake', textId: node, text: [\r\n                                {text: `Hi ${keys.sisMc}, are you okay? it must be difficult living without magic. \r\n                                Did you need me to help with something?`},\r\n                            ]},\r\n                        ],\r\n                        choice: {options: [\r\n                                <Text text={`\"Yeah I need you to take the trash out\"`}  out={[\r\n                                        {type: 'set', path: 'temp.node', value: 'trash'}\r\n                                ]} />,\r\n                                <Text text={`\"No, I'm fine. Thanks for asking\"`}  out={[\r\n                                    {type: 'set', path: 'temp.node', value: 'question'}\r\n                            ]} />\r\n                            ]}\r\n                     });\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\nimport {dgWin as dialogueWin} from './dialoguesWinLose';\r\nimport {dgIntro as dialogueIntro} from './dialoguesPlot';\r\nimport {dgGoodEnd, dgBadEnd} from './dialogueEnds';\r\nimport {dgEmployeeSection as dialogueEmployeeSection} from './dialoguesPlaces';\r\nimport {combinedWorkRate} from './dialogueWorkRatesCombine';\r\nimport {dgCombinedWorkRateFormula, \r\n        dgUnitConversion,  dgSampleSiteSize} from './dialogueWorkRates';\r\nimport {dgWorkRateTheory} from './dialogueWorkRateFormula.js';\r\nimport {dgWorkRateNeg, dgVarOnLhs, dgGeneric, dgSecondsToHoursMistake, dgTimeRatioMistake,\r\n    dgCombineVarRhs, dgNoVar, dgTwoVars, dgProportions, dgGramsToKilogramsMistake} from './dialoguesMistakes';\r\nimport {dgClientStory} from './dialogueClients';\r\nimport {dgFastSisterDenominator, dgHeadSister, dgSister2} from './dialogueSisters';\r\n\r\nexport const getDialogue = (key) => {\r\n    switch(key){\r\n        case 'dgWin': return dialogueWin;\r\n        case 'dgIntro': return dialogueIntro;\r\n        case 'dgGoodEnd': return dgGoodEnd;\r\n        case 'dgBadEnd': return dgBadEnd;\r\n        case 'dgWorkRateTheory': return dgWorkRateTheory;\r\n        case 'dgSampleSiteSize': return dgSampleSiteSize;\r\n        case 'dgEmployeeSection': return dialogueEmployeeSection;\r\n        case 'dgProportions': return dgProportions;\r\n        case 'dgGramsToKilogramsMistake': return dgGramsToKilogramsMistake;\r\n        case 'dgHeadSister': return dgHeadSister;\r\n        case 'dgSister2': return dgSister2;\r\n        case 'dgClientStory': return dgClientStory;\r\n        case 'dgCombinedWorkRate': return combinedWorkRate;\r\n        case 'dgCombinedWorkRateFormula': return dgCombinedWorkRateFormula;\r\n        case 'dgUnitConversion': return dgUnitConversion;\r\n        case 'dgFastSisterDenominator': return dgFastSisterDenominator;\r\n\r\n        case 'customerGeneric': return dgGeneric(key);\r\n\r\n        case 'dgSecondsToHoursMistake': return dgSecondsToHoursMistake;\r\n        case 'dgTimeRatioMistake': return dgTimeRatioMistake;\r\n        case 'dgCombineVarRhs': return dgCombineVarRhs;\r\n        case 'dgVarOnLhs': return dgVarOnLhs;\r\n        case 'dgNoVar': return dgNoVar;\r\n        case 'dgTwoVars': return dgTwoVars;\r\n        case 'dgCombineVarRhs': return dgCombineVarRhs;\r\n        // case 'dgWorkRateNeg': return dgWorkRateNeg;\r\n         case 'rhsVar': \r\n         case 'nonXVar': \r\n         case 'dgWorkRateZero': \r\n        default: return dgGeneric(key);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const dgEmployeeWorkRate = {\r\n    key: 'dgEmployeeWorkRate',\r\n    pull: (read, write) => {\r\n        let employeeName = get('meta.newEmployee', read, write, 0, true);\r\n        let applicants = get('employees', read, write, null, true);\r\n        let employee =  applicants[employeeName];\r\n   \r\n        //equation options = \r\n        let equations = [\r\n            {\r\n                eq: `1/${employee[keys.pWorkTotal]}=1/${keys.steadyStellaWorkRate}+1/${keys.eqVarWorker}`,\r\n                latex: `${getFraction(1, roundTo(employee[keys.pWorkTotal], 2))}\r\n                =${getFraction(1, keys.steadyStellaWorkRate)}\r\n                +${getFraction(1, keys.eqVarWorker)}`,\r\n            },\r\n            {\r\n                eq:`1/${keys.eqVarWorker}=1/${keys.steadyStellaWorkRate}+1/${keys.steadyStellaWorkRate*2}`,\r\n                latex: `${getFraction(1, keys.eqVarWorker)}=\r\n                    ${getFraction(1, keys.steadyStellaWorkRate)}\r\n                    +${getFraction(1, keys.steadyStellaWorkRate*2)}`,\r\n            },\r\n            {\r\n                eq: `1/x=1/${keys.steadyStellaWorkRate}+1/y`,\r\n                latex: `${getFraction(1, keys.eqVarWorker)}=\r\n                        ${getFraction(1, keys.steadyStellaWorkRate)}\r\n                        +${getFraction(1, 'y')}`,\r\n            },\r\n           \r\n            {\r\n                eq: `1/${employee[keys.pWorkTotal]}=1/y+1/${keys.eqVarWorker}`,\r\n                latex: `${getFraction(1, roundTo(employee[keys.pWorkTotal], 2))}\r\n                =${getFraction(1, 'y')}\r\n                +${getFraction(1, keys.eqVarWorker)}`,\r\n            }\r\n        ]\r\n        return {employeeName, employee: applicants[employeeName], equations};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let equations = get('temp.equations', read, write, null);\r\n        let eqWorkRate = get('temp.eqWorkRate', read, write, null);\r\n        let employee = get('temp.employee', read, write, null);\r\n        let eqFractionsRemoved = get('temp.eqFractionsRemoved', read, write, null);\r\n        let eqResults = get('temp.eqResults', read, write, null);\r\n        let eqSolved = get('temp.solved', read, write, null);\r\n     \r\n        \r\n        switch(node){\r\n            case 'solved':\r\n                let solvedX = get('temp.solved', read, write, null);\r\n                log(`dgEmployeeWorkRate node solved solvedX ${solvedX} round? ${roundTo(solvedX, 1) === 0}`, roundTo(solvedX, 1));\r\n                if(roundTo(solvedX, 1)>0.1){\r\n                    return Scene('dgEmployeeWorkRate-solved',{\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                            `I think ${write.temp.employeeName} works at ${roundTo(solvedX, keys.dp)} hours per job`\r\n                        ],\r\n                        choice: {\r\n                            options: [<Text text=\"next\" out={{end: true}} />]\r\n                        }\r\n                    })\r\n                }else{\r\n                    return Scene('dgEmployeeWorkRate-solved0',{\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                            `Wait...a work rate of ${roundTo(solvedX, keys.dp)} is really, really low...`\r\n                        ],\r\n                        choice: {\r\n                            options: [<Text text=\"next\" out={[\r\n                                {type: 'set', path: 'temp.mistake', \r\n                                value: {key: solvedX < 0?'dgWorkRateNeg':'dgWorkRateZero', eq: roundTo(solvedX, keys.dp), employee}\r\n                               // value: solvedX < 0?'dgWorkRateNeg':'dgWorkRateZero'\r\n                                }, \r\n                                {end: true}\r\n                            ]} />]\r\n                        }\r\n                    })\r\n                }\r\n                \r\n            case 'xVal':\r\n                let solvedOptions = get('temp.solvedOptions', read, write, null);\r\n                let solveEq = get('temp.solveEq', read, write, null);\r\n                return Scene('dgEmployeeWorkRate-xVal',{\r\n                    settings, viewProps, makeChange,\r\n                    text: [\r\n                        `What will x resolve to in the equation`,\r\n                        {latex: solveEq.latex}\r\n                    ],\r\n                    \r\n                    img: [\r\n                        {id: 'employee', \r\n                       // src: getImg(viewProps.meta, keys[`${write.temp.employeeName}-neutral`]), \r\n                        imageId: keys.getImg(write.temp.employeeName), pose: 'neutral',\r\n                        initial: ['iR'], animate: ['aR']},\r\n                    ],\r\n                    choice: {\r\n                        options: solvedOptions.map((e, i)=> {\r\n                            return <Text text={roundTo(e, keys.dp)} out={[\r\n                                MCQ(keys.acGameMCQ, keys.qSoleWorkRateXSol,  i + '', i === 0?100:0,\r\n                                i === 0?null:[\r\n                                    {text: `Player answered ${roundTo(e, keys.dp)}, the answer was ${roundTo(solvedOptions[0], keys.dp)}`},\r\n                                    {space: true}\r\n                                ]),\r\n                                {type: 'set', path: 'temp.solved', value: e},\r\n                                {type: 'set', path: 'temp.node', value: 'solved'}\r\n                            ]} />\r\n                        })\r\n                    }\r\n                })\r\n            case 'fractionsRemoved':\r\n                let eqCommonDenominator = get('temp.commonDenominator', read, write, null);\r\n                return Scene('dgEmployeeWorkRate-fractionsRemoved',{\r\n                    settings, viewProps, makeChange,\r\n                    text: [\r\n                        `What will the equation, `,\r\n                        {latex: eqWorkRate.latex},\r\n                        `,look like after being multiplied by`,\r\n                        {latex: eqCommonDenominator.latex},\r\n                        `?`\r\n                    ],\r\n                    \r\n                    img: [\r\n                        {id: 'employee', \r\n                        //src: getImg(viewProps.meta,  keys[`${write.temp.employeeName}-neutral`]), \r\n                        imageId: keys.getImg(write.temp.employeeName), pose:'neutral',\r\n                        initial:['iR'], animate: ['aR']},\r\n                    ],\r\n                    choice: {\r\n                        onInput: (id, val) => {\r\n                            //solve for the equation\r\n                            let eq = val.eq;\r\n                            //t solveFor = (eq, v)\r\n                            let solved = solveFor(eq, 'x')[0].eq;\r\n                            log(`dgEmployeeWorkRate eq ${val.eq} solved`, solved);\r\n                            let solvedOptions = [solved, solved*10, solved*0.01, solved*-1];\r\n                            log(`dgEmployeeWorkRate eq ${val.eq} solvedOptions`, solvedOptions);\r\n                            makeChange(id, [\r\n                                MCQ(keys.acGameMCQ, keys.qSoleEqMultFrac, \r\n                                        `${val.i === 0?100:0}`, val.i === 0?100:0, val.i === 0?null:[\r\n                                            {text: `Player needed to identify how the equation `},\r\n                                            {latex: eqWorkRate.latex},\r\n                                            {text: `would look after multiplying it by`},\r\n                                            {latex: eqWorkRate.latex},\r\n                                            {text:`the player selected`},\r\n                                            {latex: val.latex},\r\n                                            {text:`but the answer was`},\r\n                                            {latex: eqResults[0].latex}\r\n                                        ]),\r\n                               // {type: 'set', path: 'temp.solved', value: solved[0]},\r\n                                {type: 'set', path: 'temp.solvedOptions', value: solvedOptions},\r\n                                {type: 'set', path: 'temp.solveEq', value: {eq: val.eq, latex: val.latex}},\r\n                                {type: 'set', path: 'temp.node', value: 'xVal'}\r\n                            ])\r\n                        },\r\n                        options: eqResults.map((e, i) => {\r\n                            return <Text latex={e.latex} eq={e.eq} i={i} />\r\n                        })\r\n                    }\r\n                })\r\n            case 'cd': \r\n                let cd = employee.workTotal*keys.steadyStellaWorkRate;\r\n                let cdOptions = [cd, cd*12, cd*0.1, cd*-4];\r\n                cdOptions = cdOptions.map(c => {\r\n                    return {eq: c + keys.eqVarWorker, latex: toLatex(c + keys.eqVarWorker)}\r\n                })\r\n                log(`dgEmployeeWorkRate steadyStella ${keys.steadyStellaWorkRate} \r\n                        workTotal ${employee.workTotal} \r\n                        cd ${cd} options ${cdOptions} employee`, employee);\r\n                return Scene('dgEmployeeWorkRate-cd',{\r\n                    settings, viewProps, makeChange,\r\n                    text: [\r\n                        `What is the least common multiple that would clear the equations,`,\r\n                        {latex: eqWorkRate.latex},\r\n                        `,fractions out? `,\r\n                    ],\r\n\r\n                    img: [\r\n                        {id: 'employee', \r\n                        //src: getImg(viewProps.meta,  keys[`${write.temp.employeeName}-neutral`]), \r\n                        imageId: keys.getImg(write.temp.employeeName), pose: 'neutral',\r\n                        initial: ['iR'], animate: ['aR']},\r\n                    ],\r\n                    choice: {\r\n                        onInput:(id, val) => {\r\n                            let cdVal = val.eq;\r\n                            let operation = Operation('multiply', [cdVal]);\r\n                            let results = operate(operation, eqWorkRate.eq, 4, EQLR, true);\r\n                            log(`dgEmployeeWorkRate cd ${cdVal} results`, results);\r\n                            results = results.map(e => {\r\n                                //return e.equation;\r\n                                return expand(e.equation.eq);\r\n                            })\r\n                            log(`dgEmployeeWorkRate post expansion results`, results);\r\n                            makeChange(id, [\r\n                                MCQ(keys.acGameMCQ, keys.qSoleCommonMult, \r\n                                        `${val.i === 0?100:0}`, val.i === 0?100:0, val.i === 0?null:[\r\n                                    {text: `Player had to select the least common multiple that would cancel out all the fractions in the equation`},\r\n                                    {latex: eqWorkRate.latex},\r\n                                    {text: `the player selected`},\r\n                                    {latex: val.latex},\r\n                                    {text: `but the answer was actually`},\r\n                                    {latex: cdOptions[0].latex}\r\n                                ]),\r\n                                {type: 'set', path: 'temp.eqFractionsRemoved', value: val},\r\n                                {type: 'set', path: 'temp.eqResults', value: results},\r\n                                {type: 'set', path: 'temp.commonDenominator', value: {eq: val.eq, latex: val.latex}},\r\n                                {type: 'set', path: 'temp.node', value: 'fractionsRemoved'},\r\n                            ])\r\n                        },\r\n                        options: cdOptions.map((e, i) => {\r\n                            return <Text i={i} {...e} />\r\n                        })\r\n                }\r\n                })\r\n            case 'pickEq':\r\n                return Scene('dgEmployeeWorkRate-pickEq', {settings, viewProps, makeChange,\r\n                    text: [`According to ${keys.nSt}'s observations, \r\n                            together they took ${roundTo(employee[keys.pWorkTotal], keys.dp)} hours \r\n                            to complete 1 unit of work. I know ${keys.nSt} completes \r\n                            1 unit of work in ${keys.steadyStellaWorkRate} hours.\r\n                            I want to know how fast ${write.temp.employeeName} works. \r\n                            I'll use ${keys.eqVarWorker} to represent their work rate.\r\n                            Therefore the work rate equation should look like...`],\r\n                                                \r\n                    img: [\r\n                            {id: 'employee', \r\n                            //src: getImg(viewProps.meta,  keys[`${write.temp.employeeName}-neutral`]), \r\n                            imageId: keys.getImg(write.temp.employeeName), pose: 'neutral',\r\n                                initial: ['iR'], animate: ['aR']},\r\n                    ],\r\n                    choice: {\r\n                        onInput:(id, v) => {\r\n                            //if contains any variable other than x, mistake\r\n                            try{\r\n                              //  let lhs = getEqSide(v.eq, 0);\r\n                                let lhsVariables =  getVariables(getEqSide(v.eq, 0));\r\n                                let allVariables = getVariables(v.eq).filter(f => f !== keys.eqVarWorker);\r\n                                //variables = variables.filter(f => f !== keys.eqVarWorker);\r\n                               \r\n                                if(allVariables.length > 0){\r\n                                    makeChange(id, [\r\n                                        MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq,  'nonXVar', 0, [\r\n                                            {text: `When selecting an equation to find an individual employee's work rate, the player selected an equation,`},\r\n                                            {latex: v.latex},\r\n                                            {text: `with multiple variables, when an equation with only 1 variable was required.`}\r\n                                        ]),\r\n                                        // MCQ(keys.acGameMCQ, keys.qSoleCommonMult, \r\n                                        //     'nonXVar', 0),\r\n                                        {type: 'set', path: 'temp.mistake', value:  {key: 'nonXVar', eq: v, employee}},\r\n                                        {end: true},\r\n                                    ])\r\n                                }else if(lhsVariables.length > 0){\r\n                                    makeChange(id, [\r\n                                        MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq,  'varOnLhs', 0, [\r\n                                            {text: `When selecting an equation to find an individual employee's work rate, the player selected an equation,`},\r\n                                            {latex: v.latex},\r\n                                            {text: `with the variable on the left hand side of the equation.`}\r\n                                        ]),\r\n                                        {type: 'set', path: 'temp.mistake', value: {key: 'varOnLhs', eq: v, employee}},\r\n                                        {end: true},\r\n                                    ]);\r\n                                    return;\r\n                                }else{\r\n                                    makeChange(id, [\r\n                                        {type: 'set', path: 'temp.node', value: 'cd'},\r\n                                        {type: 'set', path: 'temp.eqWorkRate', value: v},\r\n                                        MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq, 'correctEq', v.i === 0?100:0),\r\n                                    ])\r\n                                }\r\n                            }catch(e){\r\n                                //throws error if there are no variables, therefore both sides are numbers\r\n                                makeChange(id, [\r\n                                    // MCQ(keys.acGameMCQ, keys.qSoleCommonMult, \r\n                                    //     'noVar', 0),\r\n                                    MCQ(keys.acGameMCQ, keys.qMistSWRCorrEq,  'noVar', 0, [\r\n                                        {text: `When selecting an equation to find an individual employee's work rate, the player selected an equation,`},\r\n                                        {latex: v.latex},\r\n                                        {text: `with no variable to represent said unknown work rate.`}\r\n                                    ]),\r\n                                    {type: 'set', path: 'temp.mistake', value: {key: 'noVar', eq: v, employee}},\r\n                                    {end: true},\r\n                                ]);\r\n                            }\r\n                        },\r\n                        options: equations.map((e, i) => {\r\n                        return <Text i={i} {...e} />\r\n                    })}});\r\n            default:\r\n                let description = getEmployeeDescription(write.temp.employeeName);\r\n                return Scene('dgEmployeeWorkRate-start', {settings, viewProps, makeChange,\r\n                    text: [`The new applicant is described by their peers as ${description}.\r\n                    I need to find their work rate based on the data from their test cleaning\r\n                    session with ${keys.nSt}.`],\r\n                    \r\n                    img: [\r\n                        {id: 'employee', \r\n                       // src: getImg(viewProps.meta, keys[`${write.temp.employeeName}-neutral`]), \r\n                        imageId: keys.getImg(write.temp.employeeName), pose: 'neutral',\r\n                            initial: ['pR'], animate: ['aR']},\r\n                    ],\r\n                    choice: {options: [\r\n                        <Text text={\"begin\"} out={{type: 'set', path: 'temp.node', value: 'pickEq'}} />,\r\n                        <Text text={\"back\"} out={{end:true}} />,\r\n                        ]}});\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const dgSolveJob = {\r\n    key: 'dgSolveJob',\r\n    pull: (read, write) => {\r\n        log(`dgSolveJob pull read, when retriggered, temp.workers was null for some reason`, read);\r\n        log(`dgSolveJob pull write`, write);\r\n        let employees = get('employees', read, write, null, true);\r\n        let employeesNames = Object.keys(employees)\r\n        let workers = employeesNames.filter(f => {\r\n            log(`dgSolveJob employee name ${f} props ${keys.pPwr} has prop? ${employees[f].hasOwnProperty(keys.pPwr)}`);\r\n            return employees[f].hasOwnProperty(keys.pPwr);\r\n        }).map(w => {\r\n            return employees[w];\r\n        });\r\n        log(`dgSolveJob employeeNames ${employeesNames} workers`, workers);\r\n        return {index: 0, workers};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        log(`dgSolveJob read dialogue`,read);\r\n        log(`dgSolveJob write`, write);\r\n        let employees = get('temp.workers', read, write, null);\r\n        let assigned = get('temp.assigned', read, write, {});\r\n        let skills = get('temp.skills', read, write, []);\r\n        let eqs = get('temp.eqs', read, write, [], false);\r\n        let jobId = get('meta.jobId', read, write, null, false);\r\n        let job = get('clients.' + jobId, read, write, null, false);\r\n        log(`dgSolveJob id ${jobId} job`, job);\r\n        let eq = get('temp.eq', read, write, null, false);\r\n\r\n        log(`dgSolveJob employees`, employees);\r\n        let employeeNames = Object.keys(employees);\r\n        let index = get('temp.index', read, write, 0);\r\n        let remainder = index%(employeeNames.length);\r\n        let employee = employees[employeeNames[remainder]];\r\n\r\n\r\n        log(`dgSolveJob job id ${jobId}`, job);\r\n        log(`dgSolveJob get eqs`, eqs);\r\n        log(`dgSolveJob assigned`, assigned);\r\n        log(`dgSolveJob skills`, skills);\r\n        log(`dgSolveJob index ${index} remainder ${remainder} \r\n                employeeName ${employeeNames[remainder]} employeeNames ${employeeNames} employee`, employee);\r\n        switch(node){\r\n            case 'workEnd': \r\n                let totalTime = get('temp.totalTime', read, write, [], false);\r\n                return Scene('dgSolveJob-workEnd', {settings, viewProps, makeChange,\r\n                    text: [\r\n                        {text: `They should be finished in ${roundTo(totalTime.eq, 2)} hours. \r\n                        To avoid workers violation fines, they need to work less than ${keys.workMax} hours,\r\n                        and to avoid efficiency problems, they need to work more than ${keys.workMin}.`},\r\n                    ],\r\n                    choice: {options: [\r\n                    <Text text={\"This team is good enough\"}  out={{end: true}} />,\r\n                    <Text text={\"Re-assign workers\"}  out={[\r\n                        {type: 'set', path: 'temp', value: {index: 0, workers: get('temp.workers', read, write, null)}},\r\n                        {type: 'set', path: 'temp.node', value: 'start'},\r\n                    ]} />,\r\n                ]\r\n                }});\r\n            case 'solution': \r\n                let multipliedEq = get('temp.multipliedEq', read, write, [], false);\r\n                let solution = get('temp.solution', read, write, [], false);\r\n                let totalTimeOptions = get('temp.totalTimeOptions', read, write, [], false);\r\n                return Scene('dgSolveJob-solution', {settings, viewProps, makeChange,\r\n                    text: [\r\n                        {text: `The solution to `},\r\n                        {latex: multipliedEq.latex},\r\n                        {text: `is ${solution}. `},\r\n                        {text: `So ${listToEnglish(assigned, (k, v) => {return k})} can get 1 unit of work done in ${solution} hours.`},\r\n                        {text: `How long will it take them to finish ${job.workUnits} units of work?`}\r\n                    ],\r\n                    choice: {options: totalTimeOptions.map((e, i) => {\r\n                        return <Text {...e}  out={[\r\n                            MCQ(keys.acGameMCQ, keys.qTotalTime, i + \"\", i === 0?100:0, i === 0?null:[\r\n                                {text: `Player had to mentally solve the equation`},\r\n                                {latex: multipliedEq.latex},\r\n                                {text: `to get the answer`},\r\n                                {latex: totalTimeOptions[0].latex},\r\n                                {text: `but they chose `},\r\n                                {latex: e.latex}\r\n                            ]),\r\n                            {type: 'set', path: 'temp.node', value: 'workEnd'},\r\n                            {type: 'set', path: 'temp.totalTime', value: e},\r\n                        ]} />\r\n                    })}});\r\n            case 'multipliedEqs':\r\n                let multiplied = get('temp.multipliedEqs', read, write, [], false);\r\n                let lcm = get('temp.lcm', read, write, null, false);\r\n                return Scene('dgSolveJob-multipliedEqs', {settings, viewProps, makeChange,\r\n                    text: [\r\n                        {text: `Whats the result of multiplying`},\r\n                        {latex: eq.latex},\r\n                        {text: `by`},\r\n                        {latex: lcm.latex},\r\n                        {text: '?'}\r\n                    ],\r\n                    choice: {\r\n                        onInput: (id, v) => {\r\n                           // let selectedEq = v.eq;\r\n                            let i = v.i;\r\n                            let solved = solveFor(v.eq, 'x');\r\n                            let solvedValue = toNum(solved[0].eq);\r\n                            let solvedTotal = roundTo(job.workUnits*solvedValue, keys.dp);\r\n                            let totalTimeOptions = [solvedTotal, solvedTotal*10, solvedTotal*-1, solvedTotal*0.1];\r\n                            totalTimeOptions = totalTimeOptions.map(e => {\r\n                                return {eq: e, latex: toLatex(`${e}`)};\r\n                            })\r\n                            log(`dgSolveJob solvedValue ${solvedValue} solvedTotal ${solvedTotal} solved`, solved)\r\n                            log(`dgSolveJob v.eq `, v.eq)\r\n                            makeChange(id, [\r\n                                MCQ(keys.acGameMCQ, keys.qTotalMultLcm, i + \"\", i === 0?100:0, i === 0?null:[\r\n                                    {text: `Player tried to multiply `},\r\n                                    {latex: eq.latex},\r\n                                    {text: `by`},\r\n                                    {latex: lcm.latex},\r\n                                    {text: `but they selected`},\r\n                                    {latex: v.latex},\r\n                                    {text: `when the answer was actually`},\r\n                                    {latex: multiplied[0].latex}\r\n                                ]),\r\n                                {type: 'set', path: 'temp.solution', value: roundTo(solved[0].eq, keys.dp)},\r\n                                {type: 'set', path: 'temp.totalTimeOptions', value: totalTimeOptions},\r\n                                {type: 'set', path: 'temp.multipliedEq', value: {eq: v.eq, latex: v.latex}},\r\n                                {type: 'set', path: 'temp.node', value: 'solution'},\r\n                            ])\r\n                        },\r\n                        options: multiplied.map((e, i) => {\r\n                            return <Text {...e} i={i} />\r\n                        })\r\n                    }\r\n                    \r\n                });\r\n            case 'lcm': \r\n                let lcms = get('temp.lcms', read, write, [], false);\r\n                \r\n                return Scene('dgSolveJob-lcm', {settings, viewProps, makeChange,\r\n                    text: [\r\n                        {latex: eq.latex},\r\n                        {text: `I need to get rid of the fractions. What is the \r\n                        least common multiple that can remove all the fractions?`},\r\n                    ],\r\n                    choice: {\r\n                        onInput: (id, v) => {\r\n                            let workRate = v.eq;\r\n                            let i = v.i;\r\n                            log(`dgSolveJob multiply lcm ${workRate} eq ${eq}`, eq);\r\n                            let operation = Operation('multiply', [workRate]);\r\n                            let result = operate(operation, eq.eq, 4, EQLR);\r\n                            log(`dgSolveJob multiply lcm result`, result);\r\n                            result = result.map(e => {\r\n                                return e.equation;\r\n                            })\r\n                            makeChange(id, [\r\n                                MCQ(keys.acGameMCQ, keys.qTotalLcm, i + \"\", i === 0?100:0, i === 0?null:[\r\n                                    {text: `When selected the least common multiple that would cancel all fractions in the equation`},\r\n                                    {latex: eq.latex},\r\n                                    {text: `the player selected`},\r\n                                    {latex: v.latex},\r\n                                    {text: `when the answer was actually`},\r\n                                    {latex: lcms[0].latex}\r\n                                ]),\r\n                                {type: 'set', path: 'temp.multipliedEqs', value: result},\r\n                                {type: 'set', path: 'temp.node', value: 'multipliedEqs'},\r\n                                {type: 'set', path: 'temp.lcm', value: {eq: v.eq, latex: v.latex}},\r\n                            ])\r\n                        },\r\n                        options: lcms.map((e, i) => {\r\n                            return <Text {...e} i={i} />\r\n                        })\r\n                    }\r\n                    \r\n                });\r\n            case 'pickFormula': return Scene('dgSolveJob-pickFormula', {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `pick an equation`},\r\n                ],\r\n                choice: {\r\n                    onInput: (id, val) => {\r\n                        let i = val.i;\r\n                        let actions = [];\r\n                        //if i === 0, correct\r\n                        log(`dgSolveJob selected val`, val);\r\n                        if(i === 0){\r\n                            actions.push(MCQ(keys.acGameMCQ, keys.qTotalEq, 'correct', 100));\r\n                            let hasDecimal = false;\r\n                            val.workRates.map(e => {\r\n                                if(!hasDecimal && `${e}`.indexOf('.')>-1){\r\n                                    hasDecimal = true;\r\n                                }\r\n                            })\r\n                            let workRate;\r\n                            if(hasDecimal){\r\n                                workRate = roundTo(\r\n                                    val.workRates.reduce((a, e, i) => {\r\n                                        return a*e;\r\n                                    }, 1),\r\n                                    2\r\n                                );\r\n                                let max = 0;\r\n                                let counter = 0;\r\n                                val.workRates.map(w => {\r\n                                    if(max < w) max = w;\r\n                                })\r\n                                if(workRate < max){\r\n                                 \r\n                                    while(counter < 100 && (workRate*counter < max)){\r\n                                        counter++;\r\n                                    }\r\n                                    if(counter > 0) workRate = workRate*counter;\r\n                                }\r\n                                log(`dgSolveJob cd calculated by multiplication, cd: ${workRate} max ${max} counter ${counter} rates`, val.workRates)\r\n                            }else{\r\n                                workRate = val.workRates.reduce(least_common_multiple);\r\n                                log(`dgSolveJob cd calculated by least_common_multiple, cd: ${workRate} rates`, val.workRates)\r\n                            }\r\n                            let workRateOptions = [\r\n                                `${workRate}*x`,\r\n                                `${workRate*-1}*x`,\r\n                                `${workRate}*y`,\r\n                                `${workRate*-1}*y`\r\n                            ]\r\n                            workRateOptions  = workRateOptions.map(e => {\r\n                                return {eq: e, latex: toLatex(e)};\r\n                            })\r\n                            log(`dgSolveJob workRate ${workRate} options`, workRateOptions);\r\n                            actions.push({type: 'set', path: 'temp.lcms', value: workRateOptions});\r\n                            actions.push({type: 'set', path: 'temp.node', value: 'lcm'});\r\n                            actions.push({type: 'set', path: 'temp.eq', value: {eq: val.eq, latex: val.eq}});\r\n                        }else{\r\n                            //getVariables = (expression)\r\n                            let rhs = getEqSide(val.eq, 1);\r\n                            if(getVariables(val.eq).length === 0){\r\n                                actions.push(MCQ(keys.acGameMCQ, keys.qTotalEq, 'noVar', 0, [\r\n                                    {text: `The player had to pick the work rate formula that would allow them \r\n                                    to solve for the employee's combined work rate. The answer was`},\r\n                                    {latex: eqs[0].latex},\r\n                                    {text: `but the player selected the equation`},\r\n                                    {latex: val.latex},\r\n                                    {text: `With no variables to solve for the unknown total work rate.`}\r\n                                ]));\r\n                                actions.push({type: 'set', path: 'temp.mistake', \r\n                                value: {key: 'noVar', employee}\r\n                                //value: 'noVar'\r\n                                });\r\n                                actions.push({end:true});\r\n                            }else if(getVariables(rhs).length > 0){\r\n                                actions.push(MCQ(keys.acGameMCQ, keys.qTotalEq, 'rhsVar', 0, [\r\n                                    {text: `The player had to pick the work rate formula that would allow them \r\n                                    to solve for the employee's combined work rate. The answer was`},\r\n                                    {latex: eqs[0].latex},\r\n                                    {text: `but the player selected the equation`},\r\n                                    {latex: val.latex},\r\n                                    {text: `with variables on the right hand side of the equation, \r\n                                    indicating they misunderstood what they were solving for.`}\r\n                                ]));\r\n                                actions.push({type: 'set', path: 'temp.mistake',\r\n                                    value: {key: 'rhsVar', employee}\r\n                                 //value: 'rhsVar'\r\n                                });\r\n                                actions.push({end:true});\r\n                            }\r\n                        }\r\n                        makeChange(id, actions);\r\n                        //else if eq contains on rhs, ask how that solves for total time\r\n                        //else if doesnt contain x at all, ask how it solves for anything\r\n                        //else if contains the wrong numbers, ask how it solves for the current employees\r\n                    },\r\n                    options: eqs.map((eq, i) => {\r\n                    return <Text {...eq} i={i} />\r\n                })}\r\n            });\r\n            case 'noneAssigned': return Scene('dgSolveJob-noneAssigned', {settings, viewProps, makeChange,\r\n                    text: [\r\n                        {text: `You need to assign employees before a job can be done`},\r\n                    ],\r\n                    choice: {\r\n                        options: [\r\n                            <Text text=\"okay\"  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'start'}\r\n                            ]} />\r\n                        ]\r\n                    }\r\n                    \r\n                });\r\n            case 'noSkills': return Scene('dgSolveJob-noSkills', {settings, viewProps, makeChange,\r\n                    text: [\r\n                        {text: `There is a job skill mismatch. The job requires specializations in\r\n                        ${listToEnglish(job.specs)}, the workers you currently have assigned have skills\r\n                        in ${listToEnglish(skills)}`},\r\n                    ],\r\n                    choice: {\r\n                        options: [\r\n                            <Text text=\"okay\"  out={[\r\n                                {type: 'set', path: 'temp.node', value: 'start'}\r\n                            ]} />\r\n                        ]\r\n                    }\r\n                    \r\n                });\r\n            default: \r\n                let rand = `${Math.random()}`;\r\n                // let isSomeoneAssigned = false;\r\n                // Object.keys(assigned).map(e => {\r\n                //     if(assigned[e]) isSomeoneAssigned = true;\r\n                // })\r\n                let employeeText = partialEmployeeView(employee, viewProps);\r\n                return Scene('dgSolveJob', {settings, viewProps, makeChange,\r\n                textClassName: 'text-left',\r\n              //  textId: `assigned${Object.keys(assigned).length}`,\r\n                text: [\r\n                    {text: `Job skill requirements: ${listToEnglish(job.specs)}`, tag: 'h4', className:'text-center'},\r\n                    {text: `Current skills: ${listToEnglish(skills)}`, tag: 'h4', className:'text-center'},\r\n                    {text: 'Assign some employees to the task', className: 'text-center block'},\r\n                    {divide: true},\r\n                    ...employeeText.text,\r\n                    //...eText\r\n                ],\r\n                img: employeeText.img,\r\n                // extras: [\r\n                //     <Text key={`assigned${rand}`} id={`assigned${rand}`} text={eText} \r\n                //         settings={settings} viewProps={viewProps} mergeInput={makeChange} />\r\n                // ],\r\n                choice: {options: [\r\n                    <Text text={`back`} out={{end: true}}/>,\r\n                    <Text text={`next ${remainder+1}/${employeeNames.length}`} out={[\r\n                        {type: 'set', path: 'temp.index', value: index + 1}\r\n                    ]}/>,\r\n                    <Text key={`assigned${rand}`} id={`assigned${rand}`} text={assigned[employee.name]?`remove`:`assign`}\r\n                        employee={employee}\r\n                        assigned={assigned[employee.name]}\r\n                        onInput={(id, v) => {\r\n                            let skills = {};\r\n                            let nAss = {...assigned};\r\n                            if(v.assigned){\r\n                                delete nAss[employee.name];\r\n                            }else{\r\n                                nAss[employee.name] = true;\r\n                            }\r\n                            employees.map(e => {\r\n                                if(nAss[e.name]){\r\n                                    e.specs.map(s => {\r\n                                        skills[s] = true;\r\n                                    })\r\n                                }\r\n                            })\r\n                            log(`dgSolveJob current skills `, skills)\r\n                            log(`dgSolveJob current assigned employee.name ${employee.name} assigned? ${v.assigned}`, assigned)\r\n                            makeChange(id, [\r\n                                {type: 'set', path:'temp.assigned', value: nAss},\r\n                                {type: 'set', path:'temp.skills', value: Object.keys(skills)}\r\n                            ])\r\n                        }}\r\n                        //out={{type: 'set', path:'temp.assigned.' + employee.name, value: !assigned[employee.name]?true:false}} \r\n                        />,\r\n                <Text text={\"start job\"} // disabled={!isSomeoneAssigned} \r\n                    onInput={(id, val) => {\r\n                        log(`dgSolveJob id ${id} val`, val);\r\n                        //check skills for every job\r\n                        if(skills.length === 0){\r\n                            makeChange(id, [\r\n                                {type: 'set', path: 'temp.node', value: 'noneAssigned'},\r\n                            ])\r\n                            return;\r\n                        }\r\n                        let valid = true;\r\n                        log(`dgSolveJob validating job specs`, job.specs)\r\n                        job.specs.map(e => {\r\n                            \r\n                            if(skills.indexOf(e) === -1){\r\n                                valid = false;\r\n                            }\r\n                            log(`dgSolveJob validating job spec ${e} index in skills ${skills.indexOf(e)} valid ${valid} skills`, skills)\r\n                        })\r\n                        if(!valid){\r\n                            makeChange(id, [\r\n                                {type: 'set', path: 'temp.node', value: 'noSkills'},\r\n                            ])\r\n                            return;\r\n                        }\r\n                        let assignedEmployees = employees.filter(f =>  assigned[f.name]);\r\n                        log(`dgSolveJob start job assignedEmployees`, assignedEmployees);\r\n                        let eqs = [], nums = [], numerator = 1; //can substitute whatever the workload is in\r\n                        for(let j = 0; j<4; j++){\r\n                            eqs.push(\r\n                                {\r\n                                workRates: assignedEmployees.map(e =>{\r\n                                    return e[keys.pPwr];\r\n                                }),\r\n                                eq: `${numerator}/${j%2===0?'x':'10'}=${assignedEmployees.map((e, i) => {\r\n                                    return `${i>0?'+':''}${numerator}/\r\n                                    ${j-1===i?'x':roundTo(e[keys.pPwr], keys.dp)}`\r\n                                }).join('')}`,\r\n                                latex: `${getFraction(numerator, j%2===0?'x':'10')}=${assignedEmployees.map((e, i) => {\r\n                                    return `${i>0?' + ':''}${getFraction(numerator, \r\n                                        j-1===i?'x':roundTo(e[keys.pPwr], keys.dp))}`\r\n                                }).join(' ')}`\r\n                            })\r\n                        };\r\n                        log(`dgSolveJob eqs latexed`, eqs);\r\n                        makeChange(id, [\r\n                            {type: 'set', path: 'temp.node', value: 'pickFormula'},\r\n                            {type: 'set', path: 'temp.eqs', value: eqs},\r\n                            {type: 'set', path: 'temp.skills', value: skills},\r\n                        ])\r\n                    }} \r\n                />]}});\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* MISTAKE DIALOGUES */\r\nexport const getMistakeDialogue = (mistake) => {\r\n    //sort to alphabetical, join to key, check flags\r\n    log(`mistake getMistakeDialogue ${mistake}`, mistake)\r\n    switch(mistake){\r\n        case 'varOnLhs': return dgVarOnLhs;\r\n       // case 'dgWorkRateNeg': return dgWorkRateNeg;\r\n        case 'rhsVar':\r\n        case 'noVar': \r\n        case 'nonXVar': \r\n        case 'dgWorkRateZero': \r\n        default:\r\n            return dgGeneric(mistake);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/* WORKER DIALOGUES */\r\nexport const getWorkerDialogue = (assigned, flags) => {\r\n    //sort to alphabetical, join to key, check flags\r\n    log(`getWorkerDialogue flags`, flags);\r\n    log(`getWorkerDialogue assigned`, assigned);\r\n    let sorted = assigned.sort();\r\n    log(`getWorkerDialogue sorted`, sorted);\r\n    let key = sorted.join('-');\r\n    log(`getWorkerDialogue key`, key);\r\n    if(!flags[key]){\r\n        switch(key){\r\n            case `${keys.nJo}-${keys.nSt}`: return nStnJo;\r\n            case `${keys.nJo}-${keys.nNe}-${keys.nSt}`: return nJonNenSt;\r\n            case `${keys.nNe}-${keys.nRh}-${keys.nSt}`: return nJonRhnSt;\r\n            case `${keys.nRh}-${keys.nSh}`: return nRhnSh;\r\n            case `${keys.nSt}`: return nSt;\r\n        }\r\n    }\r\n}\r\nexport const nSt = {\r\n    key: keys.nSt,\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene(keys.nSt, {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `We really should get more workers on board.`},\r\n                ],\r\n                img: [\r\n                    {id:  keys.nSt, src: getImg(viewProps.meta, keys[`${keys.nSt}-neutral`]), \r\n                    animate: ['activeRight']},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\nexport const nRhnSh = {\r\n    key: `${keys.nRh}-${keys.nSh}`,\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene(`${keys.nRh}-${keys.nSh}`, {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `scene ${keys.nRh}-${keys.nSh}.`},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\nexport const nJonNenSt = {\r\n    key: `${keys.nJo}-${keys.nNe}-${keys.nSt}`,\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene(`${keys.nJo}-${keys.nNe}-${keys.nSt}`, {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `test worker dialogue nJonNenSt`},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\nexport const nJonRhnSt = {\r\n    key: `${keys.nNe}-${keys.nRh}-${keys.nSt}`,\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene(`${keys.nNe}-${keys.nRh}-${keys.nSt}`, {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `test worker dialogue ${keys.nNe}-${keys.nRh}-${keys.nSt}`},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\nexport const nStnJo = {\r\n    key: `${keys.nJo}-${keys.nSt}`,\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene(`${keys.nJo}-${keys.nSt}`, {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `test worker dialogue`},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**CLIENT INTRODUCTIONS */\r\nexport const getClientDialogue = (id) => {\r\n    switch(id){\r\n        case 'dgRadVibToxicFratBoys': return dgRadVibToxicFratBoys;\r\n        default: return dgClientGeneric;\r\n    }\r\n}\r\n\r\nexport const dgClientGeneric = {\r\n    key: 'dgClientGeneric',\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('dgClientGeneric', {settings, viewProps, makeChange,\r\n                text: [\r\n                    {text: `Generic Client intro`},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}\r\nexport const dgRadVibToxicFratBoys = {\r\n    key: 'dgRadVibToxicFratBoys',\r\n    pull: (r, w) => {\r\n        return {};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('dgRadVibToxicFratBoys', {settings, viewProps, makeChange,\r\n                // dialogue: keys.nSt, dialogueColor: keys[`${keys.nSt}-color`],\r\n                // text: [\r\n                //     {text: `\"Oh, an urgent demand for cleansing from the Skitcher boys. Their parents must be out of town again.\"`},\r\n                // ],\r\n                // img: [\r\n                //     {id:  keys.nSt, src: getImg(viewProps.meta, keys[`${keys.nSt}-neutral`]), \r\n                //     initial: ['passiveRight'], animate: ['activeRight']},\r\n                // ],\r\n                img: [\r\n                    {id:  keys.nSt, //src: getImg(viewProps.meta, keys[`${keys.nMc}-neutral`]), \r\n                    imageId: keys.getImg('nSt'), pose: 'neutral',\r\n                    convoId: 'mistake', textId: 'tdef1', text: [\r\n                        {text: `\"Oh, an urgent demand for cleansing from the Skitcher boys. Their parents must be out of town again.\"`},\r\n                    ], initial: ['pR'], animate: ['aR']},\r\n                ],\r\n                choice: {options: [<Text text={\"next\"}  out={{end: true}} />]}});\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\nexport const getRequestText = (read, write) => {\r\n    let requests = get('requests', read, write, {});\r\n    let texts = [], request;\r\n    for(let key in requests){\r\n        request = requests[key];\r\n        texts.push({text: getClientText(request.clientId), className: 'text-underline block', out: [\r\n                    {type: 'set', path: 'meta.requestId',value: request.id},\r\n                    {type: 'set', path: 'move', value: {location: 'work'}}\r\n                ]})\r\n        texts.push({divide: true})\r\n    }\r\n    return texts;\r\n}\r\n/*\r\n\r\n\r\n    cliCorrosion: 'cliCorrosion',\r\n    cliParanormal: 'cliParanormal',\r\n    cliPlantDisease: 'cliPlantDisease',\r\n    cliMagicMold: 'cliMagicMold',\r\n    cliFratBoys: 'cliFratBoys',\r\n    cliTempFlux: 'cliTempFlux',\r\n*/\r\nconst getClientText = (id) => {\r\n    switch(id){\r\n        case keys.cliCorrosion: return `A companies rotating machinery is decaying faster the normal. A lot faster.`;\r\n        case keys.cliParanormal: return `A rather novel request to deal with paranormal thieving activity at the company mines.`;\r\n        case keys.cliPlantDisease: return `A request to deal with a disease that's making infected plants floppy.`;\r\n        case keys.cliMagicMold: return \"There's a plea to handle an outbreak of glittering mold. At least it sounds pretty~\";\r\n        case keys.cliFratBoys: return \"Some teenagers went to the desert to party...\";\r\n        case keys.cliTempFlux: return \"A company is experiencing abnormal temperature fluctations at their dig site.\";\r\n        default:\r\n            return `A standard sounding request, nothing all that noteable about it.`\r\n    }\r\n}","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\nexport const getBusinessState = (read, write) => {\r\n    log(`view text getRequestText read`, read);\r\n    let money = get('values.money.value', read, write, 0);\r\n    let reviews = get('values.reviewAggregate', read, write, 0);\r\n    let numReviews = get(`meta.numReviews`, read, write, 0);\r\n    let texts = [];\r\n    texts.push({text: `Objective`, tag: 'h5', className: 'block text-center'});\r\n    texts.push({text: `\"If we don't have an average review score greater tha 4 by the time we have ${numReviews} reviews, I'm out of this business.\"`, className: 'block text-center'});\r\n    texts.push({space:true});\r\n    texts.push({text: `Reviews`, tag: 'h3', className: 'block text-center'});\r\n    texts.push({text: `Review Count: ${reviews.total} review average: ${reviews.avg}`, className: 'block text-center'});\r\n\r\n    return texts;\r\n}","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\n\r\nconst getAnswerText = (answer, userAnswer, baseText) => {\r\n    if(answer != userAnswer){\r\n        return `${baseText} The answer was actually ${answer}`;\r\n    }\r\n    return baseText;\r\n}\r\nexport const getReviewReportText = (read, write) => {\r\n    let review = get('review', read, write, {});\r\n    console.log(`getReviewReportText read`, read);\r\n    // let scores = review.scores; //sis 1, sis 2, combined\r\n    // let sAnswers = review.answers;\r\n    // let uAnswers = review.userAnswers;\r\n    let texts = [];\r\n    let name;\r\n    texts.push({tag: 'h3', text: `Work Rate Report`, className: 'block text-center'})\r\n\r\n    texts.push({divide:true})\r\n    //combined rate\r\n    texts.push({tag: 'h4', text: `Combined Work Rate`, className: 'block text-center'})\r\n    texts.push({text: `You scored`});\r\n    texts.push({text: `${roundTo(review.scoreCombinedTime*100, 2)}%`, color: 'secondary'});\r\n    // texts.push(getAnswerText(review.simCombinedTime, review.combinedTime, `for their combined work rate \r\n    //     you answered that their total combined time to \r\n    //     break down the ${review.sampleSize.value}${review.sampleSize.unit} \r\n    //     was ${roundTo(review.combinedTime, keys.roundTime)} seconds.`\r\n    // ))\r\n    texts.push(`for their combined work rate \r\n    you answered that their total combined time to \r\n    break down the ${review.sampleSize.value}${review.sampleSize.unit} \r\n    was ${roundTo(review.combinedTime, keys.roundTime)} seconds. \r\n    The answer was ${roundTo(review.simCombinedTime, keys.roundTime)} seconds.`)\r\n\r\n    texts.push({divide:true})\r\n    //converted to hours\r\n    texts.push({tag: 'h4', text: `Converted Combined Seconds On Sample To Hours On Site`, className: 'block text-center'})\r\n    texts.push({text: `You scored`});\r\n    texts.push({text: `${roundTo(review.scoreSolutionHours*100, 2)}%`, color: 'secondary'});\r\n    // texts.push(getAnswerText(review.simSolutionHours, review.solutionHours, `\r\n    //     When converting your combined work rate, ${roundTo(review.solutionHours, keys.roundTime)} seconds, \r\n    //     for the sample size ${review.sampleSize.value}${review.sampleSize.unit}\r\n    //     to the hours for the entire job, ${review.siteSize.value}${review.siteSize.unit},\r\n    //     you answered ${roundTo(review.solutionHours, keys.roundTime)} hours.\r\n    // `))\r\n    texts.push(`\r\n    When converting your combined work rate, ${roundTo(review.solutionHours, keys.roundTime)} seconds, \r\n    for the sample size ${review.sampleSize.value}${review.sampleSize.unit}\r\n    to the hours for the entire job, ${review.siteSize.value}${review.siteSize.unit},\r\n    you answered ${roundTo(review.solutionHours, keys.roundTime)} hours.\r\n    The answer was ${roundTo(review.simSolutionHours, keys.roundTime)} hours.\r\n`)\r\n    \r\n\r\n    texts.push({divide:true})\r\n    return texts;\r\n}\r\n\r\nconst getReviewString = (score) => {\r\n    let counter = 0;\r\n    let str = ``;\r\n    while(counter < score){\r\n        counter += 1;\r\n        str+=`\\u2605`;\r\n    }\r\n    while(counter < 5){\r\n        counter += 1;\r\n        str+= `\\u2606`;\r\n    }\r\n    return str;\r\n}\r\n\r\nconst SCORE_THRESHOLD = 3;\r\nconst getClientComment = (id, score, userAns, simAns) => {\r\n    log(`getClientComments id ${id} score ${score} userAns ${userAns} simAns ${simAns}`);\r\n    let comment = 'generic client comment';\r\n    switch(id){\r\n        case keys.cliCorrosion: \r\n            if(score > SCORE_THRESHOLD){\r\n                comment = `So glad the machinery is back to normal! I was horrified by the \r\n                new machinery depreciation schedules with that crazy corrosion problem.`;\r\n            }else{\r\n                comment = `While I'm glad the machinery is back to normal, a huge amount of it is now missing\r\n                or stolen thanks to your time estimates being way off.`;\r\n            }\r\n        case keys.cliParanormal:\r\n            if(score > SCORE_THRESHOLD){\r\n                comment = `Thanks for dealing with the haunted mines, the workers feel a lot more comfortable now.`;\r\n            }else{\r\n                comment = `Thanks for dealing with the haunted mines, but you were so unprofessional \r\n                in your scheduling that another scavenger got there first. I almost wish the ghost was still there now.`;\r\n            }\r\n        case keys.cliPlantDisease:\r\n            if(score > SCORE_THRESHOLD){\r\n                comment = `The plants are looking healthy again, good job.`;\r\n            }else{\r\n                comment = `Your time estimates were so far off scavengers had a go at my site. `;\r\n            }\r\n        case keys.cliMagicMold:\r\n            if(score > SCORE_THRESHOLD){\r\n                comment = `Great job! Though I'm almost sad to see the mold go... It was really pretty^^`;\r\n            }else{\r\n                comment = `Next time try to be a little better with those estimates. \r\n                I actually lost a fair bit of money thanks to your mistake.`;\r\n            }\r\n        case keys.cliFratBoys:\r\n            if(score > SCORE_THRESHOLD){\r\n                comment = `You guys are pro's! the 'rents have no idea!!`;\r\n            }else{\r\n                comment = `Lost a lot of gear thanks to your out of this world guesses!!!!!!!!!`;\r\n            }\r\n        case keys.cliTempFlux:\r\n            if(score > SCORE_THRESHOLD){\r\n                comment = `Excellent job, the site feels relatively comfortable once more.`;\r\n            }else{\r\n                comment = `Awful job. If my archeology was as bad as your estimates, I'd have hit the planet core by now.`;\r\n            }\r\n        default: \r\n            comment = `-`;\r\n    }\r\n    return comment;\r\n}\r\nexport const getReviewClientText = (read, write) => {\r\n    let review = get('review', read, write, {});\r\n    let texts = [];\r\n    // let sAnswers = review.answers;\r\n    // let uAnswers = review.userAnswers;\r\n    // let scores = review.scores;\r\n    //get clientId comment\r\n    let {clientId, reviewScore} = review;\r\n    texts.push({text: `Review`, tag: 'h2', className: 'text-center block'});\r\n    texts.push({text: getReviewString(reviewScore), className: 'text-center block', fontSize: 'remL'});\r\n    texts.push(getClientComment(clientId, review.scoreSolutionHours, review.solutionHours, review.simSolutionHours));\r\n    texts.push({text: `You earned $${review.fee} with a $${review.tip} tip`, className: 'text-center block'});\r\n    texts.push({divide: true});\r\n    return texts;\r\n}","import React from 'react';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport Text from 'game/Views/TextManager/TextManager';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport {log} from 'utilities/Measure';\r\nimport {MCQ,Operation, GaEvent} from 'utilities/Create.js';\r\nimport {getEqSide, getImg, roundTo, listToEnglish, shuf} from 'utilities/Format.js';\r\nimport {operate, EQLR, expand, toLatex, solveFor, evaluate, toNum, \r\n        least_common_multiple, getVariables} from 'utilities/Game/MathFun';\r\nimport { MULT, POW, DIV, DIFF, doOperation} from 'utilities/Game/TreeMath.js';\r\nimport {getEmployeeDescription} from './../texts.js';\r\nimport {partialEmployeeView} from './../views.js';\r\nimport {getFraction} from 'utilities/Game/Latex';\r\nimport {getWorkRateEqs} from './../definitions';\r\nimport keys from './../keys';\r\nimport {getRequestText} from './requestText';\r\nimport {getBusinessState} from './stateText';\r\nimport {getReviewClientText, getReviewReportText} from './ReviewText';\r\n\r\n\r\nexport const getText = (key) => {\r\n    let result;\r\n    switch(key){\r\n        case 'getRequest': result = getRequestText; break;\r\n        case 'getBusinessState': result = getBusinessState; break;\r\n        case 'getReviewClientText': result = getReviewClientText; break;\r\n        case 'getReviewReportText': result = getReviewReportText; break;\r\n        default: result = noTextFound; break;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const noTextFound = () => {\r\n    return [`No text view found`];\r\n}","import React from 'react';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Dialogue from 'game/Views/Dialogue/Dialogue.js';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport Choice from 'views/Choices/v1/Choices.js';\r\nimport keys from './keys';\r\nimport simulation from './sim.js';\r\nimport {getImg, getPar, roundTo} from 'utilities/Format.js';\r\nimport {MCQ} from 'utilities/Create.js';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport {getNewEmployeeText, getMoneyText, getKnownEmployeeText, getJobsText, \r\n        getReviewText,getReviewJobText, getReviewAggregateText} from './texts';\r\nimport {solveWorkRate} from './views';\r\nimport {dgEmployeeWorkRate,  dgCharacters, dgWorkRateVarRhs, //dgWorkRateReal, \r\n       getDialogue, getClientDialogue, dgSolveJob, \r\n       getWorkerDialogue} from './dialogues/index';\r\nimport {log, sendError} from 'utilities/Measure';\r\nimport { makeChange } from 'utilities/Merge';\r\nimport {getText} from './views/index';\r\n\r\nvar o = {\r\n    //n keys must match k values\r\n    sim: simulation,\r\n    n: {},\r\n    k: keys,\r\n    start: 'intro',\r\n    ['trees']: { //dgWorkRateTheory\r\n        ['intro']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue('dgIntro');\r\n            return {node: 'intro', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, `dgIntro`)}\r\n                            dialogue={dialogue} \r\n                            move=\"dgWorkRateTheory\"\r\n                            //move=\"endgame\"\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write)}\r\n                        />\r\n                }\r\n            }\r\n        },\r\n        ['dgWorkRateTheory']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue('dgWorkRateTheory');\r\n            return {node: 'dgWorkRateTheory', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, `dgWorkRateTheory`)}\r\n                            dialogue={dialogue} \r\n                            move=\"hub\"\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write)}\r\n                        />\r\n                }\r\n            }\r\n        },\r\n        // ['dgSampleSiteSize']: function(read, settings, viewProps){\r\n        //     let dialogue = getDialogue('dgSampleSiteSize');\r\n        //     return {node: 'dgSampleSiteSize', label: keys.aclocStory,\r\n        //         view: (write, makeChange) => {\r\n        //             return <Dialogue {...getPar(settings, viewProps, makeChange, `dgSampleSiteSize`)}\r\n        //                     dialogue={dialogue} \r\n        //                     move=\"hub\"\r\n        //                     write={write}\r\n        //                     read={read}\r\n        //                     addons={dialogue.pull(read, write)}\r\n        //                 />\r\n        //         }\r\n        //     }\r\n        // },\r\n        ['testDialogue']: function(read, settings, viewProps){\r\n            let dgKey = 'dgWorkRateNeg';\r\n            let mistake = {key: dgKey, eq: -4, employee: {name: 'Whesker', workTotal: 3, \r\n                            eq: \"1/2.222=1/5+1/x\", specs: [\"dark\", \"mold\"], playerWorkRate: 4}}\r\n            let dialogue = getDialogue(dgKey);\r\n            return {\r\n                node: 'testDialogue', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                                dialogue={dialogue} \r\n                                move=\"hub\"\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dialogue.pull(read, write, mistake)}\r\n                            />\r\n                }\r\n            }\r\n        },\r\n        ['hub']: function(read, settings, viewProps){\r\n            return {node: 'hub', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return Scene('hub',{\r\n                        settings, viewProps, makeChange,\r\n                        textClassName: 'text-left',\r\n                        audio: [\r\n                            {id:  keys.mainTheme, stop:true},\r\n                            {id: keys.mainTheme, loop: true},\r\n                        ],\r\n                        text: [\r\n                            ...getText('getBusinessState')(read, write),\r\n                            {text: 'todays jobs', tag: 'h3', className: 'text-center'},\r\n                            ...getText('getRequest')(read, write)\r\n                        ],\r\n                        choice: {options: [\r\n                            //dgHeadSister\r\n     \r\n                            <Text text={`Talk to ${keys.sis0}`} out={[\r\n                                {type: 'set', path:'move', value: {location: 'sis0'}},\r\n                            ]} />,\r\n                            <Text text={`Talk to ${keys.sis1}`} out={[\r\n                                {type: 'set', path:'move', value: {location: 'sis1'}},\r\n                            ]} />,\r\n                            <Text text={`Talk to ${keys.sis2}`} out={[\r\n                                {type: 'set', path:'move', value: {location: 'sis2'}},\r\n                            ]} />,\r\n                            // <Text text={\"end\"} out={[\r\n                            //     {type: 'set', path:'move', value: {location: 'endgame'}},\r\n                            // ]} />,\r\n                            // <Text text={\"test loop\"} out={[\r\n                            //     {type: 'set', path:'move', value: {location: 'testLoop'}},\r\n                            // ]} />,\r\n                            // <Text text={\"check business stats\"} out={[\r\n                            //     {type: 'set', path:'move', value: {location: 'business'}},\r\n                            // ]} />\r\n                        ]}\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['sis0']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue(`dgHeadSister`);\r\n            return {\r\n                node: 'sis0', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                                dialogue={dialogue} \r\n                                move=\"hub\"\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dialogue.pull(read, write)}\r\n                            />\r\n                }\r\n            }\r\n        },\r\n        ['sis1']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue(`dgFastSisterDenominator`);\r\n            return {\r\n                node: 'sis1', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                                dialogue={dialogue} \r\n                                move=\"hub\"\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dialogue.pull(read, write)}\r\n                            />\r\n                }\r\n            }\r\n        },\r\n        ['sis2']: function(read, settings, viewProps){\r\n            let dialogue = getDialogue(`dgSister2`);\r\n            return {\r\n                node: 'sis2', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                                dialogue={dialogue} \r\n                                move=\"hub\"\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dialogue.pull(read, write)}\r\n                            />\r\n                }\r\n            }\r\n        },\r\n        ['testLoop']: function(read, settings, viewProps){\r\n            return {node: 'testLoop', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    if(read.sentHash !== read.recievedHash){\r\n                        return Scene('loopWait', {\r\n                            settings, viewProps, makeChange, \r\n                            text: 'Waiting for results...'\r\n                        })\r\n                    }else{\r\n                        let next = get('meta.move.location', read, write, 'hub');\r\n                        return Scene('testLoop',{\r\n                            settings, viewProps, makeChange,\r\n                            text: [\r\n                                {text: 'test loop', tag: 'h3', className: 'text-center'}\r\n                            ],\r\n                            choice: {options: [\r\n                                <Text text={\"go to \" + next} out={[\r\n                                    {type: 'set', path:'move', value: {location: next}},\r\n                                ]} />\r\n                            ]}\r\n                        })\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        },\r\n        ['work']:function(read, settings, viewProps){\r\n            return {node: 'work', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let fsm = get(`temp.fsm`, read, write, 'problemStory');\r\n                    let requestId = get(`meta.requestId`, read, write, null);\r\n                    let requests = get(`requests`, read, write, null);\r\n                    let request = requests[requestId];\r\n                    let problemDialogue = getDialogue('dgClientStory');\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, problemDialogue.key)}\r\n                        dialogue={problemDialogue} \r\n                        onExit={(id,v) => {\r\n                            return [\r\n                                {type: 'set', path:'move', value: {location: 'combinedTime'}},\r\n                            ]\r\n                        }}\r\n                        write={write}\r\n                        read={read}\r\n                        addons={problemDialogue.pull(read, write, request)}\r\n                    />\r\n                    // if(fsm === 'problemStory'){\r\n                    //     let sceneDialogue = (getDialogue(request.clientId));\r\n                    //     return <Dialogue {...getPar(settings, viewProps, makeChange, request.clientId)}\r\n                    //                     dialogue={sceneDialogue} \r\n                    //                     onExit={(id,v) => {\r\n                    //                         return [\r\n                    //                             {type: 'set', path:'temp.fsm', value: 'problemSetup'},\r\n                    //                             {type: 'set', path:`flags.${request.clientId}`, value: true},\r\n                    //                         ]\r\n                    //                     }}\r\n                    //                     write={write}\r\n                    //                     read={read}\r\n                    //                     addons={sceneDialogue.pull(read, write, request)}\r\n                    //                 />\r\n                    // }else if(fsm === 'problemSetup'){\r\n                    //     let problemDialogue = getDialogue('problemSetupInventor0');\r\n                    //     return <Dialogue {...getPar(settings, viewProps, makeChange, problemDialogue.key)}\r\n                    //         dialogue={problemDialogue} \r\n                    //         onExit={(id,v) => {\r\n                    //             return [\r\n                    //                 {type: 'set', path:'move', value: {location: 'combinedTime'}},\r\n                    //             ]\r\n                    //         }}\r\n                    //         write={write}\r\n                    //         read={read}\r\n                    //         addons={problemDialogue.pull(read, write, request)}\r\n                    //     />\r\n                    // }\r\n                }\r\n            }\r\n        },\r\n        ['combinedTime']: function(read, settings, viewProps){\r\n            return {node: 'combinedTime', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let requestId = get(`meta.requestId`, read, write, null);\r\n                    let requests = get(`requests`, read, write, null);\r\n                    let request = requests[requestId];\r\n                    let mistake = get('temp.mistake', read, write, false);\r\n                    let flags = get('flags', read, write, false);\r\n                    if(mistake){\r\n                        let dialogue = getDialogue(mistake.key);\r\n                    \r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                            dialogue={dialogue} \r\n                            onExit={(id,v)=>{\r\n                                return [\r\n                                    {type: 'set', path:'temp.mistake', value: DELETED},\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, mistake)}\r\n                        />\r\n                    }\r\n                    else{\r\n                        let dgCombinedWorkRate = getDialogue('dgCombinedWorkRate');\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, 'dgCombinedWorkRate')}\r\n                                dialogue={dgCombinedWorkRate} \r\n                                onExit={(id,v) => {\r\n                                    //get workRate from value, push onto sisterWorkRates\r\n                                    //combinedWorkRate\r\n                                    if(v.temp.mistake){\r\n                                        return [\r\n                                            {type: 'set', path: 'temp.mistake', value: v.temp.mistake}\r\n                                        ]\r\n                                    }else if(v.temp.combinedWorkRate){\r\n                                    \r\n                                        let nRequest = {...request, combinedTime: v.temp.combinedWorkRate.eq};\r\n                                        return [\r\n                                            {type: 'set', path:`requests.${requestId}`, value: nRequest},\r\n                                            {type: 'set', path:`move`, value: {location: 'convertTime'}},\r\n                                        ];\r\n                                    }\r\n                                    return [];\r\n                                }}\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dgCombinedWorkRate.pull(read, write, request)}\r\n                            />\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        ['convertTime']: function(read, settings, viewProps){\r\n            return {node: 'convertTime', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let requestId = get(`meta.requestId`, read, write, null);\r\n                    let requests = get(`requests`, read, write, null);\r\n                    let request = requests[requestId];\r\n                    let mistake = get('temp.mistake', read, write, false);\r\n                    let flags = get('flags', read, write, false);\r\n                    if(mistake){\r\n                        let dialogue = getDialogue(mistake.key);\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                            dialogue={dialogue} \r\n                            onExit={(id,v)=>{\r\n                                return [\r\n                                    {type: 'set', path:'temp.mistake', value: DELETED},\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, mistake)}\r\n                        />\r\n                    }else {\r\n                        let dgUnitConversion = getDialogue('dgUnitConversion');\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, 'dgUnitConversion')}\r\n                                dialogue={dgUnitConversion} \r\n                                onExit={(id,v) => {\r\n                                    if(v.temp.mistake){\r\n                                        return [\r\n                                            {type: 'set', path: 'temp.mistake', value: v.temp.mistake}\r\n                                        ]\r\n                                    }else if(v.temp.solutionHours){\r\n                                        let nRequest = {...request, solutionHours: v.temp.solutionHours};\r\n                                        return [\r\n                                            {type: 'set', path:`requests.${requestId}`, value: nRequest},\r\n                                            {type: 'set', path:`flags.dgUnitConversion`, value: (flags.dgUnitConversion + 1) || 1 },\r\n                                            {type: 'set', path:`move`, value: {location: 'loop'}},\r\n                                        ];\r\n                                    }\r\n                                    return [];\r\n                                }}\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dgUnitConversion.pull(read, write, request)}\r\n                            />\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        ['loop']: function(read, settings, viewProps){\r\n            return {node: 'loop', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    if(read.sentHash !== read.recievedHash){\r\n                        return Scene('loopWait', {\r\n                            settings, viewProps, makeChange, \r\n                            text: 'Waiting for results...'\r\n                        })\r\n                    }else{\r\n                        let review = get(`review`, read, write, null);\r\n                        let reviewAggregate = get(`values.reviewAggregate`, read, write, null);\r\n                        return Scene('loop-jobs',{\r\n                            settings, viewProps, makeChange,\r\n                            text: [\r\n                                ...getText('getReviewClientText')(read, write),\r\n                                ...getText('getReviewReportText')(read, write)\r\n                            ],\r\n                            choice: {options: [\r\n                                <Text text={\"back to hub\"} out={[\r\n                                    {type: 'set', path:'move', value: {location: 'hub'}},\r\n                                ]} />\r\n                            ]}\r\n                        })\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        },\r\n        ['playDialogue']: function(read, settings, viewProps){\r\n            return {\r\n                node: 'playDialogue', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let dialogueKey = get('meta.dialogue', read, write, 'dgWin');\r\n                    let dialogue = getDialogue(dialogueKey);\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, dialogueKey)}\r\n                                dialogue={dialogue} \r\n                                move={dialogue.move || 'hub'}\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dialogue.pull(read, write)}\r\n                            />\r\n                }\r\n            }\r\n        },\r\n        ['assignJob']: function(read, settings, viewProps){\r\n            return {node: 'assignJob', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let workerScene = get('temp.workerScene', read, write, null);\r\n                    let mistake = get('temp.mistake', read, write, null);\r\n                    let flags = get('flags', read, write, null);\r\n                    let generic = get('temp.generic', read, write, null);\r\n                    let jobId = get('meta.jobId', read, write, null);\r\n                    let clients = get('clients', read, write, {});\r\n                    let job = clients[jobId];\r\n                    //play cutscene, show dialogue to solve problem\r\n                    let clientId = job.client;\r\n                    //set flag on completion\r\n                    if(mistake){\r\n                        let dialogue = getDialogue(mistake.key);\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                            dialogue={dialogue} \r\n                            onExit={(id,v)=>{\r\n                                // makeChange(dialogue.key, [\r\n                                //     ...a,\r\n                                //     {type: 'set', path:'temp.mistake', value: DELETED},\r\n                                // ])\r\n                                return [\r\n                                    {type: 'set', path:'temp.mistake', value: DELETED},\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, mistake)}\r\n                        />\r\n                    }else if(workerScene){\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, workerScene.key)}\r\n                            dialogue={workerScene} \r\n                            onExit={(id,v)=>{\r\n                                // makeChange(`node-intro`, [\r\n                                //     {type: 'set', path: 'move', value: {location: 'loop'}},\r\n                                //     {type: 'set', path: 'flags.' + workerScene.key, value: true}\r\n                                // ])\r\n                                return [\r\n                                    {type: 'set', path: 'move', value: {location: 'loop'}},\r\n                                    {type: 'set', path: 'flags.' + workerScene.key, value: true}\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={workerScene.pull(read, write)}\r\n                        />\r\n                    }else if(generic || flags[clientId]){\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, `dgSolveJob`)}\r\n                            dialogue={dgSolveJob} \r\n                            onExit={(id,v)=>{\r\n                                let actions;\r\n                                if(v.temp.mistake){\r\n                                    // makeChange(id, [\r\n                                    //     {type: 'set', path: 'temp.mistake', value: v.temp.mistake}\r\n                                    // ])\r\n                                    actions = [\r\n                                        {type: 'set', path: 'temp.mistake', value: v.temp.mistake}\r\n                                    ]\r\n                                }else if(v.temp.totalTime){\r\n                                    //is the solution\r\n                                    let solution = v.temp.totalTime.eq;\r\n                                    //check if there's a scene for this assigned workers\r\n                                    let names = Object.keys(v.temp.assigned).filter(f => v.temp.assigned[f]);\r\n                                    let workerScene = getWorkerDialogue(names, flags);\r\n                                    actions = [\r\n                                        {type: 'set', path: `clients.${jobId}`, \r\n                                        value: {...job, workEndReal: v.temp.totalTime.eq, \r\n                                            workEnd: roundTo(v.temp.totalTime.eq, 2), \r\n                                            assigned: v.temp.assigned}},\r\n                                        workerScene?{type: 'set', path: 'temp.workerScene', value: workerScene}\r\n                                            :{type: 'set', path: 'move', value: {location: 'loop'}}\r\n                                    ]\r\n                                }else{\r\n                                    // makeChange(id, [\r\n                                    //     {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                                    // ])\r\n                                    actions = [\r\n                                        {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                                    ]\r\n                                }\r\n                                return actions;\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dgSolveJob.pull(read, write)}\r\n                        />\r\n                    }else{\r\n                        let clientDialogue = getClientDialogue(clientId);\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, `dgAssignJob`)}\r\n                            dialogue={clientDialogue} \r\n                            onExit={(id,v)=>{\r\n                                if(clientId){\r\n                                    // makeChange(`node-intro`, [\r\n                                    //     {type: 'set', path:'flags.'+clientId, value: true},\r\n                                    // ])\r\n                                    return [\r\n                                        {type: 'set', path:'flags.'+clientId, value: true},\r\n                                    ]\r\n                                }else{\r\n                                    //is generic\r\n                                    // makeChange(`node-intro`, [\r\n                                    //     {type: 'set', path: 'temp.generic', value: true},\r\n                                    // ])\r\n                                    return [\r\n                                        {type: 'set', path: 'temp.generic', value: true},\r\n                                    ]\r\n                                }\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={clientDialogue.pull(read, write)}\r\n                        />\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        },\r\n        ['employees']:function(read, settings, viewProps){\r\n            return {node: 'employees', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let dialogue = getDialogue('dgEmployeeSection');\r\n                    return  <Dialogue {...getPar(settings, viewProps, makeChange, `dgEmployeeSection`)}\r\n                                dialogue={dialogue} \r\n                                //move='hub'\r\n                                onExit={(id, val) => {\r\n                                   if(val.temp.retry){\r\n                                    return [\r\n                                        {type: 'set', path: 'meta.newEmployee', value: val.temp.retry},\r\n                                        {type: 'set', path:'move', value: {location: 'newEmployee'}}\r\n                                    ]\r\n                                   }else{\r\n                                    return [\r\n                                        {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                                    ]\r\n                                   }\r\n                                }}\r\n                                write={write}\r\n                                read={read}\r\n                                addons={dialogue.pull(read, write)}\r\n                            />\r\n                }\r\n            }\r\n        },\r\n        ['newEmployee']: function(read, settings, viewProps){\r\n            return {node: 'newEmployee', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    let mistake = get('temp.mistake', read, write, null, true);\r\n                    if(mistake){\r\n                        let dialogue = getDialogue(mistake.key);\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                            dialogue={dialogue} \r\n                            onExit={(id,v)=>{\r\n                                // makeChange(dialogue.key, [\r\n                                //     {type: 'set', path:'temp.mistake', value: DELETED},\r\n                                // ])\r\n                                return [\r\n                                    {type: 'set', path:'temp.mistake', value: DELETED},\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, mistake)}\r\n                        />\r\n                    }else{\r\n                        return  <Dialogue {...getPar(settings, viewProps, makeChange, `dg-newEmployee`)}\r\n                        dialogue={dgEmployeeWorkRate} \r\n                      //  move='employees'\r\n                        write={write}\r\n                        read={read}\r\n                        onExit={(id, v) => {\r\n                            if(v.temp.mistake){\r\n                                return [\r\n                                    {type: 'set', path: 'temp.mistake', value: v.temp.mistake}\r\n                                ]\r\n                            }else if(v.temp.solved){\r\n                                let workRate = v.temp.solved;\r\n                                if(isNaN(workRate)) throw Error(`newEmployee onExit error: workRate should be a number`);\r\n                                let employee = {...v.temp.employee};\r\n                                employee.playerWorkRate = workRate;\r\n                                let employees = get('employees', read, write, null);\r\n                                // makeChange(id, [\r\n                                //     {type: 'set', path: 'employees.' + employee.name, value: employee},\r\n                                //     //{type: 'set', path: 'employees', value: employees},\r\n                                //     {type: 'set', path: 'move', value: {location: 'employees'}},\r\n                                // ])\r\n                                return [\r\n                                    {type: 'set', path: 'employees.' + employee.name, value: employee},\r\n                                    {type: 'set', path: 'move', value: {location: 'employees'}},\r\n                                ]\r\n                            }else{\r\n                                // makeChange(id, [\r\n                                //     {type: 'set', path: 'move', value: {location: 'employees'}},\r\n                                // ])\r\n                                return [\r\n                                    {type: 'set', path: 'move', value: {location: 'employees'}},\r\n                                ]\r\n                            }\r\n                            \r\n                        }}\r\n                        addons={dgEmployeeWorkRate.pull(read, write)}\r\n                    />\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        },\r\n        ['endgame']: function(read, settings, viewProps){\r\n            return {node: 'endgame', label: keys.aclocStory,\r\n               // out: () => {return {gameover:true}},\r\n                view: (write, makeChange) => {\r\n                    if(false || read.sentHash !== read.recievedHash){\r\n                        return Scene('endgameWait', {\r\n                            settings, viewProps, makeChange, \r\n                            text: 'Waiting for server...'\r\n                        })\r\n                    }else{\r\n                        // {type: 'set', path: 'meta.gameover', value: true}\r\n                        let reviewAggregate = get('values.reviewAggregate', read, write, null);\r\n                        // reviewAggregate = {\r\n                        //     total: 3,\r\n                        //     value: 2*5,\r\n                        //     avg: roundTo(1/3*5, 2)\r\n                        // }\r\n                        //game.review\r\n                        let review = get('review', read, write, null);\r\n                        // review = {\r\n                        //     reviewScore: 5,\r\n                        //     fee: 300,\r\n                        //     tip:30\r\n                        // }\r\n                        if(!review || !reviewAggregate){\r\n                            sendError(`invalid endgame state review ${review} or reviewAggregate ${reviewAggregate} \r\n                                is not defined`);\r\n                            throw Error(`Invalid game state`);\r\n                        }\r\n                        let dialogue;\r\n                        if(reviewAggregate.avg > keys.reviewThreshold){\r\n                            dialogue = getDialogue('dgGoodEnd');\r\n                            return <Dialogue {...getPar(settings, viewProps, makeChange, `dgGoodEnd`)}\r\n                            dialogue={dialogue} \r\n                            //move=\"hub\"\r\n                            onExit={(id,v)=>{\r\n                                return [{type: 'set', path: 'meta.gameover', value: true}]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, review, reviewAggregate)}\r\n                        />\r\n                        }else{\r\n                            dialogue = getDialogue('dgBadEnd');\r\n                            return <Dialogue {...getPar(settings, viewProps, makeChange, `dgBadEnd`)}\r\n                            dialogue={dialogue} \r\n                            //move=\"hub\"\r\n                            onExit={(id,v)=>{\r\n                                return [{type: 'set', path: 'meta.gameover', value: true}]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dialogue.pull(read, write, review, reviewAggregate)}\r\n                        />\r\n                        }\r\n                        \r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\nconst output = o;\r\nexport default output;"],"sourceRoot":""}