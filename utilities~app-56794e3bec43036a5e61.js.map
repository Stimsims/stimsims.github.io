{"version":3,"sources":["webpack:///./src/utilities/Game/Scoring.js","webpack:///./src/utilities/Create.js","webpack:///./src/utilities/Polyfills.js","webpack:///./src/utilities/Validation.js","webpack:///./src/utilities/Measure.js","webpack:///./src/utilities/Game/MathFun.js","webpack:///./src/utilities/Format.js"],"names":["SCORE_TYPE_MATH","SCORE_TYPE_GAME","ScoreSrc","name","description","sections","registerQuestions","type","id","items","hasOwnProperty","Error","markMarks","marks","kMarks","Object","keys","score","map","e","total","roundTo","AssessmentScore","weight","notes","markModel","model","values","modelValue","userValue","range","key","value","scoreDistance","log","target","answer","r","Math","abs","distance","fraction","a","max","min","squared","rounded","getFinalScore","finalScore","reduce","i","length","getGrade","n","isNaN","toNum","floor","gradeAnswers","game","assessment","sim","scores","mcq","groupAnswers","answers","modelmarks","finalMark","finalTotal","weightedScore","weightedTotal","kAss","measureScores","s","k","sendEvent","Event","divideObj","divide","grouped","g","note","isNoteUnique","splitByElem","Array","isArray","ray","elem","section","splitIndex","nRay","slice","push","unique","compareNotes","b","equal","latex","text","all","Dataset","dataKey","data","AXIS_TYPE_NUMBER","Axis","x","xType","y","yType","labels","Mark","count","Score","modelScore","valueScore","valueSim","valueUser","MCQ","category","label","isPersistent","random","GaEvent","round","event","action","GameInstance","location","meta","simFields","measurements","inventory","flags","quests","mathMap","math","move","merge","sendToSim","questions","entities","Dialogue","pull","dialogue","Operation","operation","operands","Model","String","prototype","includes","indexOf","apply","this","arguments","isDevelopment","process","DEFAULT_PROPERTY","getHost","ERROR","message","object","level","style","console","error","warn","PROPERTY","isGtagReady","window","gtag","getClient","setupProperty","property","isOptedOut","optOut","persistent","getPersistentValues","loadPersistent","trackPersistent","labelAction","clearPersistantValues","setOut","gaOptout","localStorage","setItem","getItem","sendError","fatal","sendPageView","url","sendTime","variable","hitType","measurement","split","join","decimals","Number","nerdamer","set","getParabolaFromVertex","xVar","vertex","positive","steep","offset","distanceFromVertex","getDataMinMax","getMinMaxDifferenceRange","rangeA","rangeB","maxd","getRangeFraction","isValidValue","v","buildLinearEquations","lhs","coefficients","eq","counter","toLatex","solveEquations","equations","solveFor","removeZero","exp","mathToText","filter","f","getVariables","expression","symbol","variables","transformData","defaults","varName","result","variableValues","evaluate","subEqByString","replace","RegExp","subMathEq","constants","useLatex","sub","getEqSide","getAlts","EQLR","EQL","EQR","operate","equation","alternates","eqSide","eqs","textToMath","altInputs","ei","calculate","fill","altOps","rhs","getOpText","className","joinOperands","nudgeDown","alts","altOp","inputs","multiply","add","subtract","pow","diff","substitute","var","val","checkLHSValid","options","parts","trim","integrate","getRegressionSlope","filtered","d","xMean","getMean","yMean","sod","sos","sum","getAreaUnderCurve","integral","fuel","f0","parseFloat","regexNerdNum","getNumbers","nums","matches","matchAll","from","m","uniqueRay","getSymbol","terms","LHS","RHS","symbols","roundString","match","charAt","truncateNumbers","str","JSON","stringify","mtt","isValidSolution","getMagnitude","getValue","isWeak","isStrong","async","rand","makeQuadratic","seedX","seedY","limits","variableName","executeNerdamer","nonNerdCalcPoly","ints","mapToRange","fMin","fMax","tMin","tMax","varyValue","variancePercent","notNegative","variance","getSSE","v1","res","sse","v2","getAnsAlts","difficulty","vp","generator","methods","ans","rangeSmall","range2","mod","mod2","NaN","measure","expand","mathToTextObj","simplify","execute","operand","randomizeValues","ivs","nV","gcd_two_numbers","t","gcd","least_common_multiple","gcd_more_than_two_numbers","input","toString","call","len","getDialogueCategory","getUrlString","getUrl","globalHistory","pathname","getFullUrl","origin","getUrlHash","hash","getParentUrl","removeSections","remove","getRatio","SyntaxError","Infinity","getScore","getRandomIndex","onlyNumbers","convertToNum","test","parseInt","stringToNum","params","getPar","settings","viewProps","makeChange","mergeInput","isInvalid","validator","validate","single","shuf","array","temporaryValue","randomIndex","currentIndex","getRandomSelection","sel","lis","number","Set","selection","list","item","addAnswer","prev","markMCQs","simAnswerPath","userAnswerPath","answerStorePath","changes","answerStore","loGet","simAnswers","userAnswers","rmcqa","addToArray","concat","filterObjectAByB","objA","objB","nObj","toMMSS","sec_num","minutes","seconds","side","simplifyValues","getEquationSelectionOptions","mathEquations","extra","transforms","convertUnit","unitFrom","unitTo","getUnitName","unit","getItemParamText","user","p","getUserP","getUnitP","deleteEmptyKeys","obj","undefined","getRange","getImg","images","src","mixAndMatch","fun","variants1","variants2","c1","c2","mapSimValues","listToEnglish","transform"],"mappings":"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","file":"utilities~app-56794e3bec43036a5e61.js","sourcesContent":["import {roundTo} from './../Format';\r\nimport {log, sendEvent} from './../Measure.js';\r\nimport {AssessmentScore, Event} from './../Create';\r\nimport {toNum} from './MathFun';\r\n\r\nexport const SCORE_TYPE_MATH = 'math';\r\nexport const SCORE_TYPE_GAME = 'game';\r\nvar ScoreSrc = {\r\n    [SCORE_TYPE_MATH]: {name: 'Math Questions', \r\n        description: 'Questions asked during game play, depending on the operations the student chose.',\r\n        sections: {}},\r\n    [SCORE_TYPE_GAME]: {name: 'Game Context Questions',\r\n        description: `Questions asked relating to the game story`,\r\n        sections: {}}\r\n};\r\nexport const registerQuestions = (type, id, items, name, description) => {\r\n    if(!ScoreSrc.hasOwnProperty(type)) throw Error(`registerQuestions requires a known type, recieved ${type}`);\r\n\r\n    ScoreSrc[type].sections[id] = {items, name, description};\r\n}\r\n\r\n\r\nexport const markMarks = (marks) => {\r\n    let kMarks = Object.keys(marks);\r\n    let score = 0;\r\n    return kMarks.map(e => {\r\n        if((marks[e].score || marks[e].score === 0) && marks[e].total){\r\n            score = roundTo( marks[e].score/marks[e].total, 2);\r\n        }else{\r\n            score = 0;\r\n        }\r\n        return AssessmentScore(e.id, score, marks[e].total || 0, e.weight || 1, e.notes);\r\n    })\r\n} \r\n\r\nexport const markModel = (model, values) => {\r\n    let marks = {};\r\n    let modelValue = 0;\r\n    let userValue = 0;\r\n    let range = 0;\r\n    let score = 0, distance = 0;\r\n    let notes = [];\r\n    for(let key in model){\r\n        modelValue = model[key].value;\r\n        range = model[key].range;\r\n        notes = model[key].notes || [];\r\n        userValue = values.hasOwnProperty(key)?values[key].value:null;\r\n        score = (userValue || userValue===0)?scoreDistance(modelValue, range, userValue):0;\r\n        marks[key] = new AssessmentScore(key, score, 1, model[key].weight || 1, [...notes,\r\n            modelValue ===userValue? `Player answered ${roundTo(userValue, 2)}. Score: ${score*100}%`:\r\n            `Player answered ${roundTo(userValue, 2)}, the real answer was ${roundTo(modelValue, 2)}. Score: ${score*100}%`\r\n        ]);\r\n    }\r\n\r\n    log(`score markModel marks`, marks);\r\n    //needs name, description, userValue, valueScore\r\n    return marks;\r\n}\r\nexport const scoreDistance = (target, range, answer) => {\r\n    if(!answer && answer !== 0) return 0; //undefined answer gets 0 score\r\n    let r = 1 + Math.abs(target*2);\r\n    let distance = target - answer;\r\n\r\n    let fraction = Math.abs(distance/r);\r\n    let a = Math.max(Math.min(1, 1 - fraction), 0);\r\n    let squared = a*a;\r\n    let rounded = roundTo(squared, 2);\r\n    log(`scoreDistance target ${target} answer ${answer} range ${range} r ${r} \r\n            distance ${distance} fraction ${fraction} a ${a} squared ${squared} rounded ${rounded}`);\r\n    return rounded;\r\n}\r\n//type and weight\r\nexport const getFinalScore = (model) => {\r\n    let finalScore = null;\r\n    let r = model.reduce((a, e,i) => {\r\n        log(`MyTree Gate aggregating final score a ${a} e ${e.score || e} `, e);\r\n        if(e.score || e.score === 0){\r\n            return e.score + a;\r\n        }else{\r\n            return e + a;\r\n        }\r\n    },0);\r\n    if(r){\r\n        finalScore = roundTo(r/model.length, 2);\r\n    }else if(r === 0){\r\n        finalScore = 0;\r\n    }\r\n    log(`MyTree Gate getFinalScore finalScore ${finalScore} r ${r} model`, model);\r\n    return finalScore;\r\n}\r\n\r\nexport const getGrade = (n) => {\r\n    //return roundTo(score, 1) + \"\"; \r\n    if(isNaN(n)) throw Error(`getGrade was passed a non number ${n}`);\r\n    let score = toNum(n);\r\n    let r = 0;\r\n    if(score > 1){\r\n        if(score === 100){\r\n            r = '100';\r\n        }else if(score > 90){\r\n            r = '90'\r\n        }else if(score > 80){\r\n            r = '80';\r\n        }else if(score > 70){\r\n            r = '70';\r\n        }else if(score > 60){\r\n            r = '60'\r\n        }else if(score > 50){\r\n            r = '50';\r\n        }else if(score > 40){\r\n            r = '40';\r\n        }else if(score > 30){\r\n            r = '30'\r\n        }else if(score > 20){\r\n            r = '20';\r\n        }else if(score > 10){\r\n            r = '10';\r\n        }else{\r\n            r = '0'\r\n        }\r\n    }else{\r\n        r = Math.floor(score*10); \r\n    }\r\n    log(`sendEvent getGrade score ${score} return ${r}`)\r\n    return r;\r\n}\r\nexport const gradeAnswers = (game) => {\r\n    log(`Scoring gradeAnswers game`, game)\r\n    let assessment = {...game.sim.scores};\r\n    let mcq = groupAnswers(game.sim.answers|| {}, game.game.mcq || {});\r\n    assessment = {...assessment, ...mcq};\r\n    //mark objects\r\n    if(game.sim.model){\r\n        let modelmarks = markModel(game.sim.model, game.game.values);\r\n        assessment = {...assessment, ...modelmarks};\r\n    }\r\n    let finalMark = 0, finalScore = 0, finalTotal = 0, weightedScore = 0, weightedTotal = 0;\r\n    //score and total are multiplier by weight\r\n    for(let kAss in assessment){\r\n        if(game.sim.scores[kAss]){\r\n            weightedScore = assessment[kAss].score * game.sim.scores[kAss].weight;\r\n            weightedTotal = assessment[kAss].total * game.sim.scores[kAss].weight;\r\n        }else{\r\n            weightedScore = assessment[kAss].score * assessment[kAss].weight;\r\n            weightedTotal = assessment[kAss].total * assessment[kAss].weight;\r\n        }\r\n\r\n        finalScore += weightedScore;\r\n        finalTotal += weightedTotal;\r\n    }\r\n    finalMark = finalTotal > 0?(finalScore/finalTotal):0;\r\n    let r = {assessment, finalMark};\r\n    measureScores(r);\r\n    log(`Scoring gradeAnswers finalScore ${finalScore} finalTotal ${finalTotal} \r\n                finalMark ${finalMark}  returning`, r)\r\n                \r\n    return r;\r\n}\r\n\r\nexport const measureScores = (score) => {\r\n    let {assessment, finalMark} = score;\r\n  \r\n    let s = 0;\r\n    for (let k in assessment){\r\n        s = assessment[k].total?(assessment[k].total):0;\r\n        sendEvent(Event(\"score\", `${k}-total`, getGrade(s), s));\r\n    }\r\n    sendEvent(Event(\"score\", 'finalMark', getGrade(finalMark), finalMark));\r\n}\r\nconst divideObj = {divide: true};\r\nexport const groupAnswers = function(grouped, answers){\r\n    if(answers){\r\n        let g = null, e = null;\r\n        for(let key in answers){\r\n            e = answers[key];\r\n            g = grouped[e.id] || new AssessmentScore(key, 0, 0, 0, []); //{total: 0, score: 0, notes: [], t: e.type}\r\n            g.total += 1;\r\n           // g.score += e.score?1:0;\r\n            g.score += e.score;\r\n            if(e.note && isNoteUnique(splitByElem(g.notes, divideObj), e.note)) {\r\n                if(Array.isArray(e.note)){\r\n                    g.notes = [...g.notes, ...e.note, divideObj];\r\n                }else{\r\n                    g.notes = [...g.notes, e.note, divideObj];\r\n                }\r\n            }\r\n            grouped[e.id] = g;\r\n        }\r\n    };\r\n    return grouped;\r\n}\r\nconst splitByElem = (ray, elem) => {\r\n    let r = [], section, splitIndex = 0;\r\n    let nRay = [...ray];\r\n    ray.map((e, i) => {\r\n        if(e === elem || i === ray.length - 1){\r\n           //only want the last element when its not triggered by the elem\r\n            section = nRay.slice(splitIndex, e !== elem?i+1:i); \r\n            r.push(section);\r\n            splitIndex = i + 1;\r\n        }\r\n    });\r\n    return r;\r\n}\r\n\r\nconst isNoteUnique = (notes, note) => {\r\n    //filter out any text with {{x2}}\r\n    let unique = true;\r\n    notes.map(n => {\r\n        let result = compareNotes(n, note);\r\n        if(result){\r\n            unique = false;\r\n        }\r\n    });\r\n    return unique;\r\n}\r\nconst compareNotes = (a, b) => {\r\n    if(a && b && typeof a === typeof b){\r\n        if(Array.isArray(a)){\r\n            let equal = true;\r\n            if(a.length === b.length){\r\n                a.map((e, i) => {\r\n                  \r\n                    if(e && e.latex && b[i] && b[i].latex){\r\n                        if(e.latex !== b[i].latex){\r\n                            equal = false;\r\n                        }\r\n                    }else if(e && e.text && b[i] && b[i].text){\r\n                        if(e.text !== b[i].text){\r\n                            equal = false;\r\n                        }\r\n                    }else{\r\n                        if(e !== b[i]){\r\n                            equal = false;\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            return equal;\r\n        }else if(typeof a === 'string'){\r\n            return a === b; //is a string\r\n        }else{\r\n            throw Error(`compareNotes: invalid note of type ${typeof a}`)\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\nexport const all = {\r\n     getFinalScore, groupAnswers, scoreDistance, markModel, \r\n     registerQuestions,\r\n    //getRegisteredQuestions\r\n}","import {log} from './Measure.js';\r\nimport {roundTo} from './Format';\r\nexport function Dataset(dataKey){\r\n  ///  if(!title) throw Error(`Dataset must have a title`);\r\n    if(!dataKey) throw Error(`Dataset must have a dataKey`);\r\n    var d = {\r\n        data: [], //title,\r\n        dataKey,// axis, \r\n    }\r\n    return d;\r\n};\r\n\r\nexport const AXIS_TYPE_NUMBER = 'number';\r\nexport function Axis(x, xType, y, yType, labels = {}){\r\n    //labels are for whatever x and y will equal, their values will be used as keys to find a label if one exists\r\n    return {x, y, xType, yType, ...labels};\r\n}\r\n\r\nexport function Mark(key, name, description, total, score){\r\n    return {description, \r\n    total, count: total , score, \r\n    key, name};\r\n}\r\n\r\n export function Score(id, name, modelScore, valueScore, valueSim, valueUser, description){\r\n    return {\r\n        id, name, modelScore, valueScore, valueSim, valueUser, description\r\n    }\r\n }\r\n\r\n export function AssessmentScore (id, score, total, weight = 0, notes = []){\r\n     return {id, score, total, weight, notes}\r\n }\r\n\r\n \r\n/**\r\n * \r\n * @param {*} category \r\n * @param {*} id \r\n * @param {*} label \r\n * @param {*} score translated to an integer value\r\n * @param {*} note an array intended for textManager, can include text, latex, divide, space\r\n * @param {boolean|string} isPersistent used as action id for action that is retriggered on play, if bool, will use action id\r\n */\r\nexport function MCQ(category, id, label, score, note, isPersistent){\r\n   // log(`MyMCQ create score ${score}`);\r\n    //let sc = score;\r\n\r\n    if(score === true){\r\n        score = 1;\r\n      //  sc = 100;\r\n    }else if(score === false){\r\n        score = 0;\r\n        //sc = 0;\r\n    }else if(score > 0 && score < 1){\r\n       // score = score*100;\r\n        //score = score*100;\r\n    }\r\n    let e  = { //    c: 'c', act: 'act', lab: 'lab', ev: 'ev',\r\n            key: `${Math.random()}`,\r\n            type: 'mcq', //for the merge to identify\r\n            category, id, label, score, isPersistent,\r\n            note,\r\n           \r\n            //type: 'mcq', event: new Event(category, id, label, score), note\r\n        }\r\n    return e;\r\n}\r\nexport function GaEvent(category, id, label, score, isPersistent){\r\n    if(score > 0 && score < 1){\r\n        score = Math.round(score*100);\r\n    }\r\n    return { //    c: 'c', act: 'act', lab: 'lab', ev: 'ev',\r\n            key: `${Math.random()}`, type: 'gaevent', event: new Event(category, id, label, score), isPersistent\r\n        }\r\n\r\n}\r\n// export function GaCustom(dimension, value){\r\n//     return {key: `${Math.random()}`, type: 'gacustom', dimension, value }\r\n\r\n// }\r\nexport function Event(category, action, label, value, isPersistent){\r\n    if(!action|| !category){\r\n        return null;\r\n    }else{\r\n        let e = {category, action, isPersistent};\r\n        if(label || label === 0) e.label = label + \"\";\r\n        if(value || value === 0) {\r\n            if(value >= 0 && value <= 1){\r\n                value = Math.round(value*100);\r\n            }\r\n            e.value = value\r\n        };\r\n        return e;\r\n    }\r\n}\r\n\r\nexport function GameInstance(location){\r\n    if(!location) throw Error(`every Game needs a start location`);\r\n    return {\r\n        game: {\r\n            meta: {//location, \r\n                //merge: false\r\n                simFields: ['values', 'flags', 'mcq'],\r\n                measurements: []\r\n            },\r\n            answers: [],\r\n            mcq: {},\r\n            inventory: {},\r\n            flags: {},\r\n            quests: {},\r\n            mathMap: {},\r\n            math: {},\r\n            move: {location, merge: false},\r\n            data: {},\r\n            values: {},\r\n            sendToSim: {}\r\n        },\r\n        sim: {\r\n            questions: {}, \r\n            scores: {},\r\n            values: {},\r\n            model: {},\r\n            entities:{},\r\n            marks: {}\r\n        }\r\n    }\r\n}\r\n\r\nexport const Dialogue = (key, pull, dialogue) => {\r\n    return {key, pull, dialogue};\r\n}\r\n\r\nexport const Operation = (operation, operands) => {\r\n    return {operation, operands}\r\n}\r\n\r\nexport const Model = (key, name, description, range, value) => {\r\n    /**\r\n     *       modelValue = model[key].value;\r\n        range = model[key].range;\r\n     */\r\n    //userValue used for testing purposes\r\n    return {\r\n        key, description, value, range\r\n    }\r\n}\r\nexport const all = {\r\n    GameInstance, \r\n    MCQ, Score,\r\n    Dataset, Event,\r\n    Model, \r\n    Dialogue\r\n}","if (!String.prototype.includes) {\r\n    String.prototype.includes = function() {\r\n        'use strict';\r\n        return String.prototype.indexOf.apply(this, arguments) !== -1;\r\n    };\r\n}","\r\nexport const propsAllowNullOrUndefined = (props, propName) => {\r\n    if (props[propName] === null) return null;\r\n    if (props[propName] === undefined) return null;\r\n  }\r\n\r\nexport const isDevelopment = () => {\r\n  return process.env.GATSBY_MY_ENV === 'development';\r\n  //return true;\r\n // return false;\r\n}\r\n","//import React from 'react';\r\n//import ReactGA from 'react-ga';\r\nimport {isDevelopment} from './Validation.js';\r\nimport {Event} from './Create';\r\nimport {roundTo, getHost} from './Format';\r\nimport {getGrade} from './Game/Scoring';\r\n\r\n// export const PROPERTY_WEB = 'UA-149526395-1';\r\n// export const PROPERTY_POSTS = 'UA-149526395-3';\r\n// export const OPTIMIZE = 'GTM-P5D8PMJ';\r\n\r\nexport const TRACKER_WEB = 'web';\r\nexport const TRACKER_GAMES = 'games';\r\nexport const TRACKER_POSTS = 'posts';\r\n\r\n\r\nconst optOutKey = 'stimsims-analytics-opt-out';\r\nconst MAIN_DOMAIN = 'https://stimsims.com';\r\n\r\nconst DEFAULT_PROPERTY = getHost() === MAIN_DOMAIN?'UA-149526395-4':'UA-149526395-5'; \r\n\r\n\r\nexport const WARN = 'warn';\r\nexport const ERROR = 'error';\r\nexport const log = (message, object, level, style) => {\r\n    if(isDevelopment()){\r\n        switch(level){\r\n            case 'error': console.error(message, style, object);\r\n            case 'warn': console.warn(message, style, object);\r\n            case 'log':\r\n            default:\r\n                    console.log(message, style, object);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n        //use testing property if not main domain\r\nvar PROPERTY = DEFAULT_PROPERTY;\r\n\r\nexport const getPropertyId = () => PROPERTY;\r\n\r\nconst isGtagReady = () => {\r\n    return window && window.gtag;\r\n}\r\nconst getClient = () => {\r\n    if(!window || !window.gtag) return ()=>{log(`error: gtag not available, returned mock method`, 'error')};\r\n    return window.gtag;\r\n}\r\n\r\n\r\n\r\n\r\nexport const setupProperty = (property) => {\r\n\r\n    if(property){\r\n        PROPERTY = property;\r\n    }else{\r\n        PROPERTY = DEFAULT_PROPERTY;\r\n    }\r\n    if(isOptedOut()){\r\n        optOut(true);\r\n    }\r\n    if(isGtagReady()){\r\n        getClient()('config', PROPERTY, {'anonymize_ip': true} );\r\n    }\r\n}\r\n\r\n\r\nexport const getDimensionKey = (key) => {\r\n    switch(key){\r\n        case 'game': return 'dimension3';\r\n        case 'difficulty': return 'dimension5';\r\n        default:\r\n            throw new Error(`getDimensionKey ${key} isn't recognized`);\r\n    }\r\n}\r\n/**\r\n * To set values that will be sent with every event for a web page, update the config for your property with the values that you want to send.\r\n */\r\nvar persistent = {};\r\nexport const getPersistentValues = () => {return persistent}\r\nexport const loadPersistent = (values) => {\r\n    persistent = values;\r\n    for(let k in values){\r\n            if(isNaN(values[k])){\r\n                throw Error(`loadPersistent all key-value pairs must be numbers, key ${k} is not`);\r\n            }\r\n            sendEvent(new Event('persistent', k, null, values.value));\r\n    }\r\n}\r\nexport const trackPersistent = (labelAction) => {\r\n      if(!labelAction){\r\n          debugger;\r\n        throw Error(`trackPersistent error: action must be defined`)\r\n      };\r\n      if(persistent[labelAction]){\r\n        persistent[labelAction] = persistent[labelAction] + 1;\r\n      }else{\r\n        persistent[labelAction] = 1;\r\n      }\r\n      sendEvent(new Event('persistent', labelAction, null, persistent[labelAction]));\r\n  }\r\n  export const clearPersistantValues = () => {\r\n      persistent = {};\r\n  }\r\n\r\n\r\n\r\n\r\n\r\nexport const optOut = (setOut) => {\r\n    //TODO: <a href=\"javascript:gaOptout();\">Deactive Google Tracking</a>\r\n    if(window &&  window.gaOptout){\r\n        window.gaOptout();\r\n         window.localStorage.setItem(optOutKey, 'true');\r\n    }\r\n}\r\nexport const isOptedOut = ()=>{\r\n    if(window){\r\n       return window.localStorage.getItem(optOutKey) === 'true';\r\n    }\r\n}\r\n\r\n\r\nexport const sendError = (description, fatal = false) => {\r\n    log(`sendError ${description}`, 'error');\r\n    if(isGtagReady()){\r\n        getClient()('event', 'exception', {\r\n            'send_to': PROPERTY,\r\n            'description': description,\r\n            'fatal': fatal   \r\n          });\r\n          //if in a game, also send error to base website\r\n        if(PROPERTY !== DEFAULT_PROPERTY){\r\n            getClient()('event', 'exception', {\r\n                'send_to': DEFAULT_PROPERTY,\r\n                'description': description,\r\n                'fatal': fatal \r\n              });\r\n        }\r\n    }\r\n}\r\nexport const sendPageView = (url) => {\r\n    if(isGtagReady()){\r\n        getClient()('send', url);\r\n    }\r\n}\r\n\r\n\r\nexport const sendTime = (category = null, variable = null, label = null, value = 0) => {\r\n    let e = {};\r\n    if(variable) e.name = variable;\r\n    if(value || value === 0) e.value = value;\r\n    if(category) e['event_category'] = category;\r\n    if(label) e['event_label'] = label;\r\n    if(isGtagReady()){\r\n        getClient()('event', 'timing_complete', e)\r\n    }\r\n}\r\n\r\n//export const sendEvent = (category = null, action = null, label = null, value, custom, customTracker) => {\r\nexport const sendEvent = (event, isPersistent) => {\r\n        \r\n        let e = {\r\n            hitType: 'event',\r\n            ['event_category']: event.category,\r\n            ['event_action']: event.action,\r\n            'send_to': PROPERTY\r\n        };\r\n        let measurement = '';\r\n        if(event.hasOwnProperty('label')){\r\n            measurement = `${event.label}-${event.action}`;\r\n            if(event.hasOwnProperty('value')){\r\n                //  e.value = event.value;\r\n                if(event.value > 0 && event.value < 1){\r\n                    event.value = Math.round(event.value*100);\r\n                }\r\n                e['event_value'] = event.value;\r\n                e['value'] = event.value;\r\n            }\r\n        }else if(event.hasOwnProperty('value')){\r\n            //send event value in case this event is used as a goal, ex finalScore, important questions\r\n            if(event.value > 0 && event.value < 1){\r\n                event.value = Math.round(event.value*100);\r\n            }\r\n            e['event_value'] = event.value;\r\n            e['value'] = event.value;\r\n\r\n            measurement = `${getGrade(event.value)}-${event.action}`;\r\n        }\r\n        measurement = measurement.split(' ').join('-');\r\n        if(isPersistent || event.isPersistent){\r\n            trackPersistent(measurement);\r\n        }\r\n        //most events will be used as a label\r\n        e['event_label'] = measurement;\r\n       \r\n        if(isGtagReady()){\r\n            getClient()('event', event.action, e);\r\n            if(PROPERTY !== DEFAULT_PROPERTY){\r\n                e['send_to'] = DEFAULT_PROPERTY;\r\n                getClient()('event', event.action, e);\r\n            }\r\n        }\r\n\r\n  }\r\n\r\n  export const sendTestEvent = (event) => {\r\n        \r\n    let e = {\r\n        hitType: 'event',\r\n        ['event_category']: event.category,\r\n        ['event_action']: event.action,\r\n        ['event_value']: event.value,\r\n        ['value']: event.value,\r\n        'event_label': event.label,\r\n        'label': event.label,\r\n        'send_to': PROPERTY\r\n    };\r\n   \r\n    if(isGtagReady()){\r\n        getClient()('event', event.action, e);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const EXP_1 = 'myExp1';\r\nexport const addToDataLayer = (key, value, overwrite) => {\r\n    //log(`MyMeasureAnalytics datalayer window`, window.dataLayer);\r\n    window.dataLayer = window.dataLayer || [];\r\n    window.dataLayer.push({[key]: value});\r\n    window.dataLayer.push(['set', key, value]);\r\n}\r\n\r\n// var experiments = [];\r\n// var setExperiments = false;\r\n// export const clearExperiments = (url) => {\r\n//     experiments = [];\r\n//     getClient()('config', PROPERTY, { experiments });\r\n//     sendPageView(url);\r\n// }\r\n// export const setExperimentVariant = (experiment, variant, url) => {\r\n//     let v = Array.isArray(variant)?variant.join('-'):variant;\r\n//     let k = `${experiment}.${v}`;\r\n//     if(!setExperiments){\r\n//         getClient()('config', PROPERTY, { experiments });\r\n//         setExperiments = true;\r\n//     }\r\n//     experiments.push({id: experiment, variant: v, 'experiment_id': k});\r\n   \r\n// }\r\n\r\n\r\n\r\n","\r\n\r\nimport nerdamer from 'nerdamer/all';\r\nimport {getEqSide, uniqueRay} from './../Format';\r\nimport {log} from './../Measure';\r\n\r\nnerdamer.set('SOLUTIONS_AS_OBJECT', true);\r\n\r\nexport function roundTo(value, decimals) {\r\n  return Number(Math.round(toNum(value)+'e'+decimals)+'e-'+decimals) || Math.round(toNum(value));\r\n}\r\n\r\nexport const getParabolaFromVertex = (xVar, vertex, positive = true, steep, offset, distanceFromVertex = 0.5) => {\r\n  return `${positive?'':'-'}${steep}(${xVar} - ${offset})^2 + ${vertex - vertex*distanceFromVertex}`;\r\n}\r\n\r\nexport const getDataMinMax = (key, data) => {\r\n  let min = data[0][key];\r\n  let max = data[0][key];\r\n  data.map(e => {\r\n    if(e[key]<min) min = e[key];\r\n    if(e[key]>max) max = e[key];\r\n  })\r\n  return [min,max];\r\n}\r\n\r\n\r\n\r\n\r\nexport const getMinMaxDifferenceRange = (rangeA, rangeB) => {\r\n  let mind, maxd;\r\n  let min = Math.min(rangeA[0], rangeB[0]);\r\n  //must be the other ranges max, for cases where 1 range encompasses the other\r\n  let max = rangeA[0]<rangeB[0]?rangeB[1]:rangeA[1]; \r\n  maxd = max-min;\r\n  if(Math.min(rangeA[1], rangeB[1]) >= Math.max(rangeA[0], rangeB[0])){\r\n    //when the lower max is less than the greater min, the ranges overlap\r\n    mind = 0;\r\n  }else{\r\n    //when there is no overlap, subtract the lower max from the greater min\r\n    mind =  Math.max(rangeA[0], rangeB[0]) - Math.min(rangeA[1], rangeB[1]);\r\n  }\r\n  return [mind, maxd];\r\n}\r\n\r\n\r\n\r\n\r\n// export const getRangeDegree = (min,max, nSegments, value) => {\r\n//   if(value < min) return 0;\r\n//   if(value > max) return nSegments;\r\n//   let segmentLength = (max - min)/nSegments;\r\n//   return Math.floor((value - min)/segmentLength);\r\n// }\r\nexport const getRangeFraction = (min,max, value) => {\r\n  if(value <= min) return 0;\r\n  if(value >= max) return 1;\r\n  if(max - min === 0) return 1; \r\n  return (value - min)/(max - min)\r\n}\r\n\r\n\r\nexport const isValidValue = (v) => {\r\n    return (typeof v  === \"string\" || !isNaN(v));\r\n}\r\nexport const buildLinearEquations = (lhs, coefficients) => {\r\n  let eq = '';\r\n  let counter = 0;\r\n  for(let key in coefficients){\r\n    if(coefficients[key]){\r\n      if(counter > 0) eq += \" + \";\r\n      eq += `${coefficients[key]}*${key}`;\r\n      counter++;\r\n    }\r\n  }\r\n  return {eq: `${lhs} = ${eq}`, latex: `${toLatex(lhs)} = ${eq?toLatex(eq):''}`};\r\n}\r\nexport const solveEquations = (equations) => {\r\n  return nerdamer.solveEquations([...equations]); //nerdamer mutates the objects\r\n}\r\nexport const solveFor = (eq, v,removeZero) => {\r\n  let exp = nerdamer(eq).solveFor(v);\r\n  if(!Array.isArray) exp = [exp];\r\n\r\n  exp = exp.map(e => {\r\n    return {\r\n      eq: mathToText(e, false), latex: mathToText(e, true)\r\n    }\r\n  })\r\n  if(removeZero){\r\n    exp - exp.filter(f => f.eq === \"0\");\r\n  }\r\n  return exp;\r\n}\r\n\r\n\r\n\r\nexport const getVariables = (expression) => {\r\n  if(!expression.symbol) expression = nerdamer(expression);\r\n  return expression.variables();\r\n}\r\nexport const transformData = (expression, data, defaults = {}, varName = \"y\") => {\r\n    //defaults could be simulation variables not present in dataset\r\n    if(!expression) throw {name: 'noExpression', message: 'An expression is required to transform the data into the answer'};\r\n    if(!Array.isArray(data)) data = [data];\r\n    if(!expression.symbol) expression = nerdamer(expression);\r\n    let variables = expression.variables();\r\n    let result = null;\r\n    let variableValues = {};\r\n    let results = data.map((e, i) => {\r\n      result = expression;\r\n      variables.map(v => {\r\n          if(e[v] || e[v]===0 || defaults[v] || defaults[v] === 0){\r\n            variableValues[v] = isValidValue(e[v])?e[v]:defaults[v]\r\n          }else{\r\n              //skip = true;\r\n              variableValues[v] = 0;\r\n          }\r\n      })\r\n      try{\r\n        result = expression.evaluate(variableValues);\r\n       if(isNaN(result)){\r\n       // e[varName] = toNum(mathToText(nerdamer(result).evaluate()));\r\n        return toNum(mathToText(nerdamer(result).evaluate()));\r\n       }else{\r\n        //e[varName] = toNum(mathToText(result), 2);\r\n        return toNum(mathToText(result), 2);\r\n       }\r\n      }catch(e){\r\n        log(`nerdTrig transformData error ${e.message}`, e);\r\n        if(e.name ==='UndefinedError'){\r\n          return null; //throwing a result back that will tell viewer there is something wrong without crashing program\r\n        }\r\n      }\r\n      \r\n    }) //dont filter results, index is important\r\n    //debugger;\r\n    return results;\r\n  }\r\n\r\n  export const subEqByString = (eq, values) => {\r\n    let r = eq;\r\n    for(let v in values){\r\n      r = r.replace(new RegExp(`${v}{1}`, \"g\"), values[v]);\r\n    }\r\n    return r;\r\n  }\r\n  //transformData handles the application of expression to data\r\n  //this needs to convert the math expression to data keys and constant values\r\n  export const subMathEq = (eq, constants, useLatex) => {\r\n   if(!eq) return null;\r\n     if(eq.constants) constants = eq.constants;\r\n     if(eq.eq && !eq.symbol) eq = eq.eq;\r\n    //substitute variables for their values in constants and names\r\n    let expression = eq;\r\n    if(!expression.symbol){\r\n      expression = nerdamer(expression);\r\n    }\r\n    let variables = expression.variables();\r\n    variables.map(v => {\r\n      if(constants && (constants[v] || constants[v] === 0)){\r\n        expression = expression.sub(v, constants[v].eq?constants[v].eq:constants[v]);\r\n      }\r\n    });\r\n    return {eq: mathToText(expression, false), latex: mathToText(expression, true)};\r\n  }\r\n\r\n  export const toLatex = (e, fraction) => {\r\n      if(typeof e !== 'string') e = e + \"\";\r\n      if(e.indexOf('=')>-1){\r\n        let lhs = mathToText(nerdamer(getEqSide(e, 0)), true, fraction);\r\n        let rhs = mathToText(nerdamer(getEqSide(e, 1)), true, fraction);\r\n        return `${lhs}=${rhs}`;\r\n      }else{\r\n        return mathToText(nerdamer(e), true, fraction);\r\n      }\r\n  }\r\n  \r\n\r\n  export const getAlts = (n) => {\r\n    let a = [];\r\n    for(let i=0; i<n; i++){\r\n      if(i === 0){\r\n        a.push(1);\r\n      }else{\r\n        a.push(Math.round(Math.random >0.5?-1:1*Math.random()*20))\r\n      }\r\n    }\r\n    return a;\r\n  }\r\n  //prior to this, could have another function that checks for eq, splits them, runs this on each part, then sticks them back together\r\n  export const EQLR = 0, EQL = 1, EQR = 2;\r\n  export const operate = (operation, equation, alternates = 1, eqSide = EQLR) => {\r\n    let eqs = [];\r\n    if(equation.includes('=')){ //if the equation contains only numbers ed 12 = 19, then nerdamer will throw an error\r\n      let sides = equation.split('=');\r\n      sides.map((e, i) => {\r\n        eqs.push(textToMath(e));\r\n      })  \r\n    }else{\r\n      eqs.push(textToMath(equation))\r\n    }\r\n    let altInputs = getAlts(alternates);\r\n    //run the calculations on equation sides\r\n    let result = eqs.map((eq, ei) => {\r\n      //if eq has sides, restricti which side gets processed\r\n      if(eqSide === 0 || eqs.length <= 1 || ((eqSide === 1) && ei === 0) || (eqSide === 2 && ei === 1)){\r\n        return calculate(operation, eq, altInputs);\r\n      }else{ //this part of the equation isnt being operating on, just fill\r\n        //return Array(alternates).fill({eq: mathToText(eq, false), latex: mathToText(eq, true), altOps: null}); //copied across later\r\n        return Array(alternates).fill({eq: nerdamer(eq).text(), latex: mathToText(eq, true), altOps: null}); //copied across later\r\n      }\r\n    })\r\n    if(result.length > 1){\r\n      //for each result, merge the lhs and rhs for all results and both eq and latex if present\r\n      let lhs = result[0];\r\n      let rhs = result[1]; //there may be n results, \r\n      \r\n      result = lhs.map((e, i) => {\r\n          return {...e, ...rhs[i], eq: `${e.eq}=${rhs[i].eq}`, latex:  `${e.latex}=${rhs[i].latex}`};\r\n      })\r\n    }else{\r\n      result = result[0]; //no merging required if there is only 1 equation\r\n    }\r\n    result = result.map(e => {\r\n      return getOpText(operation, e);\r\n    })\r\n    return result;\r\n  };\r\n  export const getOpText = (operation, result) => {\r\n    let r = {}\r\n    switch(operation.operation){\r\n      case 'add': r.text = [{text: `plus `, className: 'inline-block'}, ...joinOperands(operation.operands)]; break;\r\n      default: r.text = [{text: `${operation.operation} with operands `, className: 'inline-block'}, ...joinOperands(operation.operands)]; break;\r\n    }\r\n    r.equation = {eq: result.eq, latex: result.latex};\r\n    return r;\r\n  }\r\n  export const joinOperands = (operands) => {\r\n    return operands.map((e,i) => {\r\n        if(e.eq){\r\n          return {latex: `${i > 0?', ': ''} ${e.latex}`, nudgeDown: true, className: 'inline-block'};\r\n        }else{\r\n          return {text: `${i > 0?', ': ''} ${e}`, className: 'inline-block'}\r\n        }\r\n    })\r\n  }\r\n  export const calculate = (operation, eq, alts) => {\r\n    let result = []; //{eq: null, latex: null}\r\n    //set to actual value on last maneuver\r\n    let alternates = [];\r\n    let altOp = null;\r\n    alts.map((a, i) => {\r\n      altOp = {...operation};\r\n      switch(operation.operation){\r\n          case 'multiply':\r\n            if(!operation.operands[0] && operation.operands[0] !== 0) throw {name: 'invalidArguments', message: `multiply requires 2 arguments, but recieved ${operation.inputs}`};\r\n            altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}*${a}`];\r\n            result.push(eq.multiply(altOp.operands[0]));\r\n            break;\r\n          case 'divide':\r\n              if(!operation.operands[0]) throw {name: 'invalidArguments', message: `divide requires 2 arguments, but recieved ${operation.inputs}`};\r\n              //if the value is 0, then adjust to either 0.1 or -0.1\r\n              if(a === 0){\r\n                if(a > 0){\r\n                  result.push(eq.divide(0.1));\r\n                }else{\r\n                  result.push(eq.divide(-0.1));\r\n                }\r\n              }else{\r\n                result.push(eq.divide(`${operation.operands[0].eq || operation.operands[0]}*${a}`));\r\n              }\r\n              break;\r\n          case 'add':\r\n            if(!operation.operands[0] && operation.operands[0] !== 0) throw {name: 'invalidArguments', message: `add requires 2 arguments, but recieved ${operation.operands}`};\r\n            altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}*${a}`];\r\n            result.push(eq.add(altOp.operands[0])); \r\n            break;\r\n          case 'subtract':\r\n              if(!operation.operands[0] && operation.operands[0] !== 0) throw {name: 'invalidArguments', message: `subtract requires 2 arguments, but recieved ${operation.operands}`};\r\n              altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}*${a}`];\r\n              result.push(eq.subtract(altOp.operands[0])); \r\n              break;\r\n          case 'power':\r\n            if(!operation.operands[0] && operation.operands[0] !== 0) throw {name: 'invalidArguments', message: `pow requires 2 arguments, but recieved ${operation.operands}`};\r\n            altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}*${a}`];\r\n            result.push(eq.pow(altOp.operands[0])); \r\n            break;\r\n          case 'root':\r\n            if(!operation.operands[0] && operation.operands[0] !== 0) throw {name: 'invalidArguments', message: `root requires 2 arguments, but recieved ${operation.operands}`};\r\n            altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}*${a}`];\r\n            result.push(eq.pow(`1/${altOp.operands[0]}`)); \r\n            break;\r\n          case 'simplify':\r\n            altOp.operands = [eq.multiply(a)];\r\n            result.push(nerdamer(`simplify(${altOp.operands})`)); \r\n            break;\r\n          case 'log':\r\n            if(!operation.operands[0]) throw {name: 'invalidArguments', message: `log requires 3 arguments, but recieved ${operation.operands}`};\r\n\r\n            if(operation.operands[0] === 'e'){\r\n              altOp.operands= [`${eq}*${a}`]; \r\n              result.push(nerdamer(`log(${altOp.operands[0]})`).evaluate());\r\n            }else if(operation.operands[0] === '10'){\r\n              altOp.operands = [`${eq}*${a}`];\r\n              result.push(nerdamer(`log10(${altOp.operands[0]})`).evaluate());\r\n            }else{\r\n              \r\n              if(i === 0 || Math.random()>0){ //change whether the base or the target is modified\r\n                altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}*${a}`];\r\n                result.push(nerdamer(`log10(${eq})/log10(${altOp.operands[0]})`).evaluate());\r\n              }else{\r\n                altOp.operands = [`${eq}*${a}`];\r\n                result.push(nerdamer(`log10(${altOp.operands[0]})/log10(${operation.operands[0].eq || operation.operands[0]})`).evaluate());\r\n              }\r\n              \r\n            }\r\n           \r\n            break;\r\n          case 'differentiate':\r\n              if(!operation.operands[0]) throw {name: 'invalidArguments', message: `differentiate requires 1 argument, but recieved ${operation.operands}`};\r\n              altOp.operands = [`${operation.operands[0].eq || operation.operands[0]}`];\r\n              result.push(nerdamer.diff(eq, altOp.operands[0])); \r\n              break;\r\n              \r\n          default:\r\n              throw Error(`calculate doesn't recognise operation of type ${operation.type}`);\r\n      }\r\n      alternates.push(altOp);\r\n    })\r\n    if(result.length === 0){\r\n      result.push(eq);\r\n    }\r\n    //if names or constants, send through latex funnel, else convert to text\r\n    return result.map((r, i) => {\r\n      //mathToText(r, false, operation.operation === 'divide' || operation.operation === 'diff')\r\n      return {\r\n        eq: r.text(), \r\n        latex: mathToText(r, true, operation.operation === 'divide' || operation.operation === 'diff'), \r\n        //altOp: alternates[i]\r\n      }\r\n    });\r\n  }\r\n\r\n  export const substitute = (eq, values) => {\r\n  if(!Array.isArray(values)) values = [values];\r\n  if(!eq.symbol){\r\n    eq = nerdamer(eq);\r\n  }\r\n  values.map(v => {\r\n    eq = eq.sub(v.var, v.val);\r\n  })\r\n  let r = {eq: mathToText(eq), latex: mathToText(eq, true)};\r\n  return r;\r\n}\r\n\r\n\r\nexport const checkLHSValid = (equation, options) =>{\r\n  let parts = equation.split('=');\r\n  if(parts.length !== 2) return false;\r\n  let lhs = parts[0].trim();\r\n  if(options.hasOwnProperty(lhs)) return {lhs, rhs: parts[1].trim()};\r\n  return false\r\n}\r\nexport const evaluate = (eq, values ={}) => {\r\n  //mathToText \r\n  let n = nerdamer(eq).evaluate({...values});\r\n  return toNum(mathToText(n));\r\n}\r\n\r\nexport const integrate = (eq, variable) => {\r\n  let r = nerdamer(`integrate(${eq})`, variable);\r\n // return mathToText(r);\r\n return mathToText(r);\r\n}\r\nexport const getRegressionSlope = (data, x, y) => {\r\n  //find the means\r\n  let filtered = data.filter(d => (d[x] || d[x] === 0) && (d[y] || d[y] === 0));\r\n  if(filtered.length === 0) return null;\r\n  let xMean = getMean(filtered, x);\r\n  let yMean = getMean(filtered, y);\r\n  //get the sum of the differences\r\n  let sod = 0, sodCount = 0, sos = 0;\r\n  filtered.map(d => {\r\n    sod += ((d[x]-xMean)*(d[y]-yMean));\r\n    sodCount++;\r\n    sos += Math.pow((d[x]-xMean), 2);\r\n  });\r\n  return sod/sos;\r\n}\r\nexport const getMean = (data, variable) => {\r\n  let count = 0, sum = 0;\r\n  data.map(d => {\r\n    if(d[variable] || d[variable] === 0){\r\n      sum += d[variable];\r\n      count++;\r\n    }\r\n  });\r\n  if(count === 0) return 0;\r\n  return sum/count;\r\n}\r\nexport const getAreaUnderCurve = (eq, variable, range) => {\r\n  let integral = nerdamer(`integrate(${eq})`, [variable]);\r\n  //let range = [{x: 0}, {x: 8}];\r\n  let fuel = transformData(integral, range);\r\n  let f0 = parseFloat(fuel[0]);\r\n  let f1 = parseFloat(fuel[1]); //144 constant vs 12 root\r\n  fuel = f1 - f0;\r\n  return fuel;\r\n}\r\nlet regexNerdNum = /[-]?(\\d)+(\\.\\d+)?(\\/([+-])?(\\d)+(\\.\\d+)?)?/g;\r\nexport const getNumbers = (eq) => {\r\n  if(!eq) throw Error(`getNumbers requires string to operate on but was given ${typeof eq}`);\r\n  if(typeof eq !== 'string') throw Error(`getNumbers requires a string but was given ${typeof eq}`);\r\n  //uses a regular expression to find all numbers in an eq ([+-]?\\d)+(\\.\\d+)?(\\/)?([+-]?\\d)*(\\.\\d+)?\r\n  //TODO find regexp that will also return fraction parts\r\n  let nums = [];\r\n  let split = null;\r\n  //IE error //TypeError: Object doesn't support property or method 'matchAll'\r\n  let matches = eq.matchAll(regexNerdNum);\r\n  Array.from(matches, m => {\r\n    nums.push({eq: m[0], latex: m[0]})\r\n    if(m[0].includes('/')){\r\n      split = m[0].split('/');\r\n      nums.push({eq: split[0], latex: split[0]});\r\n      nums.push({eq: split[1], latex: split[1]});\r\n    }\r\n    //return {eq: m[0], latex: m[0]};\r\n  });\r\n   //log(`getNumbers matched eq ${eq} got nums`, nums);\r\n   nums = uniqueRay(nums);\r\n  return nums;\r\n}\r\n\r\nexport const getSymbol = (symbol, terms = []) => {\r\n  \r\n  if(symbol.symbol){\r\n      terms = [...terms, ...getSymbol(symbol.symbol)]\r\n  };\r\n  if(symbol.LHS || symbol.RHS){\r\n      terms = [...terms, ...getSymbol(symbol.LHS)]\r\n      terms = [...terms, ...getSymbol(symbol.RHS)]\r\n  }\r\n  if(symbol.symbols){\r\n      for(let v in symbol.symbols){\r\n          terms = [...terms, ...getSymbol(symbol.symbols[v])];\r\n      }\r\n  }\r\n  if(symbol.value){\r\n     // terms.push(getSymbol(symbol));\r\n      terms.push({eq: `${symbol}`, latex: mathToText(symbol, true)});\r\n  }\r\n  //log(`nerdamer getTerms terms ${terms} symbol ${symbol} value ${symbol.value}`, symbol);\r\n  return terms;\r\n}\r\n\r\nlet rounded = null;\r\nexport const roundString = (match) => {\r\n \r\n  if(match.includes('/')){\r\n    //do not truncate fractions, completely changes their meaning\r\n    rounded = match; \r\n  }else if(match.includes('0.0')){\r\n    for (var i = 2; i < match.length; i++) {\r\n      if(match.charAt(i) !== '0'){\r\n        rounded = roundTo(match, i+1); \r\n        break;\r\n      }\r\n    }\r\n    //return formatter.roundTo(match, 5); //increase limit for very small numbers\r\n  }else{\r\n    rounded = roundTo(match, 2);\r\n  }\r\n  return rounded;\r\n}\r\n\r\nexport const truncateNumbers = (str) => {\r\n  let neq = str.replace(regexNerdNum, roundString);\r\n  //log(`nerdamer truncateNumbers str ${str} neq ${neq}`);\r\n  return neq;\r\n}\r\n\r\nexport const toNum = (v, round) => {\r\n  if(typeof v === \"number\"){\r\n    return round?roundTo(v, round):v;\r\n  }else if(v.text){\r\n      //is nerdamer\r\n      return round?roundTo(Number(mathToText(v)), round):Number(mathToText(v));\r\n  }else if(typeof v === \"string\"){\r\n      return round?roundTo(Number(v), round):Number(v);\r\n  }else{\r\n      throw {name: 'invalidNumber', message: 'an invalid object was asked to be turned toNum' + JSON.stringify(v)};\r\n  }\r\n}\r\n\r\nexport const mathToText = (eq, latex = false, fraction = false) => {\r\n  //TODO: write tests\r\n  let r, mtt;\r\n  if(latex){\r\n    mtt = nerdamer(eq).latex(fraction?'fraction':'decimal'); //decimals will resolve to fractions unless specified\r\n    if(fraction){\r\n      r = mtt;\r\n    }else{\r\n      //if decimal, it'll need to be truncated or rounded in some instances\r\n      r = isNaN(mtt)?truncateNumbers(mtt):`${roundTo(mtt,3)}`;\r\n    }\r\n  }else{\r\n    r = nerdamer(eq).text(fraction?'fraction':''); //forcing decimal can give some nan results\r\n  }\r\n  // console.log(`mathToText eq ${eq} latex ${latex} fraction ${fraction} mtt ${mtt} decimal ${nerdamer(eq).text('decimal')} \r\n  //   fraction ${nerdamer(eq).text('fraction')} empty ${nerdamer(eq).text()} r ${r}`);\r\n  return r;\r\n}\r\n  \r\n/*\r\nexport const mathToText = (eq, latex = false, fraction = false) => {\r\n  console.log(`mathToText eq ${eq} latex ${latex}`);\r\n  let mtt = null;\r\n  if(eq.text){\r\n    mtt = latex?eq.latex(fraction?'fraction':'decimal')\r\n                :eq.text(fraction?'fraction':'decimal'); \r\n                //cannot accept fractions, as truncation will mess up their value\r\n  }else if(typeof eq === \"string\"){\r\n    if(latex){\r\n      //throws error if already latex\r\n      try{\r\n        mtt = nerdamer(eq).latex(fraction?'fraction':'decimal')\r\n      }catch(e){\r\n        mtt = eq;\r\n      }\r\n    }else{\r\n      mtt = eq;\r\n    }\r\n  }else{\r\n    throw {name: 'invalidMathObject', message: 'An invalid math object was passed to mathToText method'};\r\n  }\r\n  let r;\r\n  if(latex){\r\n    r = isNaN(mtt)?truncateNumbers(mtt):`${roundTo(mtt,3)}`;\r\n  }else{\r\n    r = mtt;\r\n  }\r\n  return r;\r\n}\r\n*/\r\nexport const textToMath = (eq) => {\r\n  if(eq.symbol) return eq;\r\n  return nerdamer(eq);\r\n}\r\n\r\nexport const isValidSolution = (eq, variable) => {\r\n  if(eq.includes('=')){\r\n    //checkLHSValid = (equation, options)   parts[0].trim();\r\n    let split = eq.split('=');\r\n    if(split[0].trim()===variable && !isNaN(split[1].trim())){\r\n      return toNum(split[1].trim());\r\n    }\r\n  }\r\n  return false;\r\n}\r\nexport const getMagnitude = (getValue, min, max, isWeak, isStrong, async = false) => {\r\n  //creates clearer distinction between strong and weak relations\r\n  if(isWeak){\r\n      let w = getValue(Math.random(), 0.3, 0.45)*max - min;\r\n    //  log(`getMagnitude max ${max} min ${min} weak ${w}`);\r\n      return w;\r\n  }else if(isStrong){\r\n      let s = getValue(Math.random(), 0.55, 0.75)*max - min;\r\n     // log(`getMagnitude max ${max} min ${min} strong ${s}`);\r\n      return s;\r\n  }\r\n  let rand = Math.random()>0.5;\r\n  return getMagnitude(getValue,  min, max, rand, !rand);\r\n}\r\nexport const makeQuadratic = (getValue, seedX, seedY, limits, variableName = 'x') =>{\r\n  //aMax, aMin, bMax, bMin\r\n  let a = getValue(seedX, seedY, limits?limits[0]:-5, limits?limits[1]:5);\r\n      let b = getValue(seedX, seedY, limits?limits[2]:-10, limits?limits[3]:10);\r\n      let c = getValue(seedX, seedY, limits?limits[4]:-20, limits?limits[5]:20);\r\n   \r\n  return `${a}*${variableName}*${variableName} + ${b}*${variableName} + ${c}`;\r\n}\r\n\r\nexport const executeNerdamer = (eq, toLatex) => {\r\n  let e = nerdamer(eq);\r\n  return {\r\n    eq: mathToText(e, false), latex: mathToText(e, true)\r\n  }\r\n}\r\n\r\nexport const  nonNerdCalcPoly = (ints, x) => {\r\n  let r = ints.reduce((a, e, i) => {\r\n    return a + e*Math.pow(x, i);\r\n  }, 0)\r\n  return r;\r\n}\r\nexport const  mapToRange = (value, fMin, fMax, tMin, tMax) => {\r\n  let p = Math.max(Math.min(value/(fMax-fMin), 1), 0);\r\n  let r = (tMax - tMin)*p + tMin;\r\n  return r;\r\n}\r\nexport const  varyValue = (value, variancePercent, notNegative) => {\r\n  let variance = value*(Math.random()*variancePercent);\r\n  if(Math.random()>0.5) variance = variance * -1;\r\n  let r = value + variance;\r\n  if(notNegative && r < 0) r = 0;\r\n  return r;\r\n}\r\n\r\nexport const getSSE = (data, eq, key) => {\r\n    let res = transformData(eq, data, {}, key);\r\n    \r\n    let sse = 0;\r\n    let v1, v2 = 0;\r\n    res.map((e, i) => {\r\n      v1 = e;\r\n      v2 = data[i][key];\r\n      sse += Math.pow(v1-v2, 2);\r\n    })\r\n    return sse;\r\n}\r\n\r\n\r\nexport const getAnsAlts = (answer, difficulty, vp) => {\r\n  //.methods.generator, vp.methods.format.roundTo\r\n  let generator = vp.methods.generator;\r\n  let roundTo = roundTo;\r\n  let ans = answer===0?(16/difficulty):answer;\r\n  let type =  generator.getValue(false);\r\n  let diff = (10/difficulty);\r\n  let rangeSmall = 0.2*diff;\r\n  let range = 2*diff;\r\n  let range2 = 0.5*diff;\r\n  let mod = roundTo(generator.getValue(false)*range, 2);\r\n  let mod2 = roundTo(generator.getValue(false)*range2, 2);\r\n  let alts = null;\r\n  if(answer === 0){\r\n    alts = [answer, answer + 10*range, answer - 10*range2, answer + 100*range];\r\n  }else{\r\n    if(type > 0.3){\r\n      alts = [answer, roundTo(ans*mod*-1, 2), roundTo(ans*-1*mod2, 2), roundTo(ans/mod, 2)]\r\n    }else if(type > 0.6){\r\n      alts = [answer, roundTo(ans/mod*-1, 2), roundTo(ans*mod2, 2), roundTo(ans*mod, 2)]\r\n    }else{\r\n      alts = [answer, roundTo(ans*mod, 2), roundTo(ans/mod2, 2), roundTo(Math.pow(ans, rangeSmall), 2)]\r\n    }\r\n  }\r\n  //nan check, can remove after nans stop appearing\r\n  let nans = alts.filter(e => e === NaN || e === 'NaN');\r\n  if(nans.length > 0){\r\n    vp.methods.measure.sendError(`getAnsAlts nans found, answer ${answer} alts ${alts}`, false);\r\n  }\r\n  return alts;\r\n}\r\n\r\nexport const expand = (eq) => {\r\n  if(eq.includes('=')){\r\n    let lhs = getEqSide(eq, 0);\r\n    let rhs = getEqSide(eq, 1);\r\n    lhs = nerdamer(`expand(${lhs})`);\r\n    rhs = nerdamer(`expand(${rhs})`);\r\n    return mathToTextObj(`${lhs}=${rhs}`);\r\n   }else{\r\n    return mathToTextObj(nerdamer(`expand(${eq})`));\r\n   }\r\n}\r\nexport const simplify = (eq) => {\r\n // let m = textToMath(eq);\r\n if(eq.includes('=')){\r\n  let lhs = getEqSide(eq, 0);\r\n  let rhs = getEqSide(eq, 1);\r\n  lhs = nerdamer(`simplify(${lhs})`);\r\n  rhs = nerdamer(`simplify(${rhs})`);\r\n  return mathToTextObj(`${lhs}=${rhs}`);\r\n }else{\r\n  return mathToTextObj(nerdamer(`simplify(${eq})`));\r\n }\r\n}\r\nexport const mathToTextObj = (eq) => {\r\n  //return {eq: mathToText(eq, false), latex: mathToText(eq, true)};\r\n  return {eq, latex: mathToText(eq, true)};\r\n}\r\nexport const execute = (eq, operation, operand) => {\r\n  let m = textToMath(eq);\r\n  let r = null;\r\n  switch(operation){\r\n    case 'add': r = m.add(operand); break;\r\n    case 'subtract': r = m.subtract(operand); break;\r\n    case 'multiply': r = m.multiply(operand); break;\r\n    case 'divide': r = m.divide(operand); break;\r\n  }\r\n  return mathToTextObj(r);\r\n}\r\n\r\n\r\nexport const randomizeValues = (values, ivs) => {\r\n  let keys = ivs || Object.keys(values);\r\n  let nV = {...values};\r\n  let item;\r\n  keys.map(k =>{\r\n    item = values[k];\r\n    if(values[k].hasOwnProperty('min') && values[k].hasOwnProperty('max')){\r\n      nV[k] = {...values[k], value:  roundTo(Math.random()*(values[k].max - values[k].min) + values[k].min, 2)}\r\n    }else{\r\n      nV[k] = {...values[k]}\r\n    }\r\n    \r\n  })\r\n  return nV;\r\n}\r\n\r\nexport function gcd_two_numbers(x, y) {\r\n  if ((typeof x !== 'number') || (typeof y !== 'number')) \r\n    return false;\r\n  x = Math.abs(x);\r\n  y = Math.abs(y);\r\n  while(y) {\r\n    var t = y;\r\n    y = x % y;\r\n    x = t;\r\n  }\r\n  return x;\r\n}\r\nexport function gcd(a, b) {\r\n  return a ? gcd(b % a, a) : b;\r\n}\r\nexport function least_common_multiple(a, b) {\r\n  return a * b / gcd(a, b);\r\n}\r\nexport function gcd_more_than_two_numbers(input) {\r\n  if (toString.call(input) !== \"[object Array]\")  \r\n        return  false;  \r\n  var len, a, b;\r\n    len = input.length;\r\n    if ( !len ) {\r\n        return null;\r\n    }\r\n    a = input[ 0 ];\r\n    for ( var i = 1; i < len; i++ ) {\r\n        b = input[ i ];\r\n        a = gcd_two_numbers( a, b );\r\n    }\r\n    return a;\r\n}\r\n/*\r\nsubEqByString, subMathEq\r\n*/","// var validate = require('validate.js');\r\n// var loGet = require('lodash/get');\r\nimport validate from 'validate.js';\r\nimport loGet from 'lodash/get';\r\nimport {log} from './Measure';\r\nimport { globalHistory } from \"@reach/router\"\r\n\r\nexport const getDialogueCategory = (flags, key) => {\r\n    return `fraction-${flags[key] || 0}`;\r\n}\r\nexport const getUrlString = (str) => {\r\n    return str.split(' ').join('-');\r\n}\r\nexport const getUrl = () => {\r\n    return globalHistory.location.pathname;\r\n}\r\n\r\nexport const getFullUrl = () => {\r\n    return getHost() + getUrl();\r\n}\r\n\r\nexport const getHost = () => {\r\n    return globalHistory.location.origin;\r\n}\r\n\r\nexport const getUrlHash = () => {\r\n    return globalHistory.location.hash;\r\n}\r\n\r\nexport const getParentUrl = (url, removeSections) => {\r\n    let lastChar = url.charAt(url.length - 1);\r\n    let remove = lastChar === '/'?(removeSections + 1):removeSections;\r\n    url = url.split('/');\r\n    url = url.slice(0, -(remove)).join('/');\r\n    return url;\r\n}\r\n\r\nexport function getRatio(a, b){\r\n    //should throw errors or just convert to num?\r\n    if(isNaN(a) && isNaN(parseFloat(a)) || isNaN(b) && isNaN(parseFloat(b))){\r\n        throw new SyntaxError('getRatio demands a and b be things that are or can be converted to numbers, you passed a: ' + a + ' and b: ' + b);\r\n    }\r\n    if(b === 0) return Infinity;\r\n    return a/b;\r\n}\r\n\r\nexport function getScore(input, answer, range){\r\n    //if greater than 1, fail, if near 0, very good\r\n    return roundTo(1 - Math.min(Math.abs(answer - input)/range, 1), 1);\r\n}\r\n\r\n//todo function rounding\r\nexport function roundTo(value, decimals) {\r\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals) || Math.round(value);\r\n}\r\nexport const getRandomIndex = (max) => {\r\n    return Math.floor(Math.random()*max);\r\n}\r\n\r\nexport const onlyNumbers = /^(-?[0-9]+(?:\\.[0-9]+)?)$/;\r\nexport function convertToNum(v){\r\n    try{\r\n        //if matches regex\r\n        if(onlyNumbers.test(v)){\r\n            return v.includes(\".\")?parseFloat(v):parseInt(v);\r\n        }else{\r\n            return v;\r\n        }\r\n    }catch(e){\r\n        return v;\r\n    }\r\n}\r\nexport function stringToNum(s){\r\n    //there are multiple copies of this function, found in MathWorker.js, for convenience - should fix later\r\n    if(s === 0 || s === '0' || s === '-0')  return 0;\r\n   // if(s === true || s === false) return null; //as long as it isnt an object or function like\r\n    if(typeof s !== 'string' && typeof s !== 'number') return null;\r\n    return Number(s)?Number(s):0;\r\n}\r\n\r\n\r\nexport const params = {};\r\nexport const getPar = (settings, viewProps, makeChange, id) => {\r\n    //sim can be null, \r\n    if(!settings || !viewProps || !makeChange) throw Error(`getPar missing required prop`);\r\n    let params = {};\r\n    params.settings = settings;\r\n    params.viewProps = viewProps;\r\n    params.mergeInput = makeChange;\r\n    if(id){\r\n        params.id = id;\r\n        params.key = id;\r\n    }\r\n    \r\n    return params;\r\n}\r\n\r\nexport const isInvalid = (validator, value) => {\r\n    try{\r\n        if(value && typeof value === 'object'){\r\n            return validate(value, validator);\r\n        }else{\r\n            return validate.single(value, validator);\r\n        }\r\n    }catch(e){\r\n        throw new Error(`validation error: ${e.message}`)\r\n    }\r\n}\r\n\r\nexport const shuf = (array) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n}\r\n\r\n\r\nexport function getRandomSelection (sel, lis = [], number) {   \r\n//Array.from(new Set(ray));\r\n    if((lis.length + sel.length) < number){\r\n        return Array.from(new Set([...sel, ...lis]));\r\n    }\r\n    if(sel.length === number) return sel;\r\n    if(sel.length > number) return sel.slice(0, number);\r\n    let selection = [...sel];\r\n    let list = shuf([...lis]);\r\n    let item = null;\r\n    for(let i = 0; i<list.length; i++){\r\n        item = list[i];\r\n        if(selection.length < number && selection.indexOf(item) <= -1){\r\n            selection.push(item);\r\n        }\r\n    }\r\n    return selection;\r\n}\r\n\r\n\r\nexport function addAnswer (type, questions, id, score, note) {\r\n    let prev = questions[id]?questions[id]:{total: 0, score: 0, notes: []};\r\n    prev.total += 1; \r\n    prev.score += score;\r\n    prev.t = type;\r\n    if(note) prev.notes.push(note); \r\n    return prev;\r\n    // answers[id] = prev;\r\n    // return answers;\r\n}\r\nexport function markMCQs (game, simAnswerPath, userAnswerPath, answerStorePath){\r\n    //questionStore - where totals for questions are accumulated\r\n    //gameAnswers - the randomly generated answers to questions\r\n    //userAnswers - the array of answers user has made\r\n    let changes = {};\r\n    let answerStore = {...loGet(game, answerStorePath, {})};\r\n    let simAnswers = {...loGet(game, simAnswerPath, {})};\r\n    let userAnswers = [...loGet(game, userAnswerPath, [])];\r\n    let answers = {...answerStore}; //have to override whole object, or long paths willbe mixed with short ones\r\n    userAnswers.map((e, i) => {\r\n        if(e.type === 'mcq'){\r\n            answers[e.id] = addAnswer(e.type, answers, e.id, e.score, e.note);\r\n        }else if(e.type === 'rmcq'){\r\n           // answers[e.id] = addAnswer(e.type, answers, `${answerStorePath}.${e.id}`, a.rmcqa === loGet(simAnswerPath, e.id)?1:0, a.note);\r\n            answers[e.id] = addAnswer(e.type, answers, e.id, a.rmcqa === simAnswers[e.id]?1:0, a.note);\r\n        }\r\n    });\r\n    changes[userAnswerPath] = [];\r\n    changes[answerStorePath] = answers;\r\n    return changes;\r\n}\r\n\r\nexport function addToArray(items){\r\n    let ray = [];\r\n    items.map(e =>{\r\n        ray = ray.concat(e);\r\n    });\r\n    return ray;\r\n}\r\n\r\nexport const uniqueRay = (ray) => {\r\n    return Array.from(new Set(ray));\r\n}\r\n\r\nexport const filterObjectAByB = (objA, objB) => {\r\n    let nObj = {};\r\n    for(let k in objA){\r\n        if(objB[k]) nObj[k] = objA[k];\r\n    }\r\n    return nObj;\r\n}\r\nexport const toMMSS = (sec_num) => {\r\n           var minutes = Math.floor((sec_num ) / (60*60));\r\n           var seconds = (sec_num - (minutes * (60*60)) / 60);\r\n       \r\n          // if (hours   < 10) {hours   = \"0\"+hours;}\r\n           if (minutes < 10) {minutes = \"0\"+minutes;}\r\n           if (seconds < 10) {seconds = \"0\"+seconds;}\r\n           return minutes+':'+seconds;\r\n   }\r\n\r\n//lhs = 0, rhs = 1\r\nexport const getEqSide = (eq, side) => { //can be passed a null if eq doesnt exist or match dv request\r\n    if(eq){\r\n        if(eq.eq) eq = eq.eq;\r\n        let s = eq.split('=');\r\n        if(side === 0 && s[0]){\r\n            return s[0].trim();\r\n        }else if(s[1]){ //if there is a side 1\r\n            return s[1].trim();\r\n        }else{\r\n            return eq; //return as is if isnt valid form\r\n        }\r\n    }\r\n}\r\nexport const simplifyValues = (values) => {\r\n    let v = {};\r\n    for(let key in values){\r\n        v[key] = values[key].value;\r\n    }\r\n    return v;\r\n}\r\nexport const getEquationSelectionOptions = (mathEquations, extra) => {\r\n    let options = [...extra];\r\n    let equation = null;\r\n    for(let k in mathEquations){\r\n        equation = mathEquations[k].transforms[mathEquations[k].transforms.length - 1].equation;\r\n        options.push({label: equation.latex, value: equation, latex: equation.latex});\r\n\r\n    }\r\n    return options;\r\n}\r\n\r\nexport const scoreDistance = (target, range, answer) => {\r\n    if(!range || range === 0) throw Error(`scoreDistance needs a valid range to score, range: ${range}`);\r\n    let distance = target - answer;\r\n    let fraction = Math.abs(distance/range);\r\n    return 1 - fraction;\r\n}\r\n\r\n//convertUnit(item[keys.pWeight], item[keys.getUnitP(keys.pWeight)], keys.uWeight) //value from, to\r\nexport const convertUnit = (value, unitFrom, unitTo) => {\r\n    if(unitFrom === unitTo) return value;\r\n    if(unitFrom === 'g' || unitFrom === 'kg' || unitFrom === 'mg'){\r\n        if(unitTo === 'g'){\r\n            if(unitFrom === 'kg') return value*1000;\r\n            if(unitFrom === 'mg') return value/1000;\r\n        }else if(unitTo === 'kg'){\r\n            if(unitFrom === 'g') return value/(1000);\r\n            if(unitFrom === 'mg') return value/(1000*1000);\r\n        }else if(unitTo === 'mg'){\r\n            if(unitFrom === 'kg') return value*(1000*1000);\r\n            if(unitFrom === 'g') return value*1000;\r\n        }\r\n    } \r\n    throw Error(`formatter convertUnit error for value ${value}, invalid unit pair from ${unitFrom} to ${unitTo}`);\r\n}\r\n\r\nexport const getUnitName = (unit) => {\r\n    switch(unit){\r\n        case 'g': return 'grams';\r\n        case 'kg': return 'kilograms';\r\n    }\r\n}\r\n\r\nexport const getItemParamText = (item, keys) => {\r\n    if(!item.params) return '';\r\n    let s = '';\r\n    let user, unit = null;\r\n    item.params.map((p, i) => {\r\n        //if the user param is defined, display that (whether a value is there or not), or display the real value\r\n        //if the unit param is present, display it\r\n        user = keys.getUserP(p);\r\n        unit = keys.getUnitP(p);\r\n        s +=  `${i>0?', ':''}${p}: ${item.hasOwnProperty(user)?(item[user]||'-'):item[p]}${item[unit]||''}`;\r\n    });\r\n    return s;\r\n}\r\nexport const deleteEmptyKeys = (obj) => {\r\n    if(!obj) return null;\r\n    let keys = Object.keys(obj);\r\n    let nObj = {...obj};\r\n    keys.map(k => {\r\n        if(nObj[k] === null || nObj[k] === undefined) delete nObj[k];\r\n    })\r\n    return nObj;\r\n}\r\nexport const getRange = (data, key) => {\r\n    let min = 0, max= 0;\r\n    data.map(d => {\r\n        if(d[key] < min) min = d[key];\r\n        if(d[key] > max) max = d[key];\r\n    })\r\n    return [min, max];\r\n}\r\nexport const getImg = (meta, id) => {\r\n    let f = meta.images.filter(f => f.id === id);\r\n    if(f.length === 0) throw Error(`no such image with id ${id} exists in game meta`);\r\n    return f[0].src;\r\n}\r\n\r\nexport const mixAndMatch = (fun, count, variants1, variants2, vp) => {\r\n    //make list count long of fun results\r\n    //feed in variant 1, iterating over as many time as needed\r\n    //if iterating more than once, iterate over variants 2 as well if exists\r\n    let c1 = 0, c2 = 0, list = [];\r\n    for(let i = 0; i<count;i++){\r\n        list.push(fun(variants1[c1], variants2[c2] || null, vp));\r\n        c1 = c1 + 1 >= variants1.length?0:c1+1;\r\n        if(variants2.length - 1) c2 = c2 + 1 >= variants2.length?0:c2+1;\r\n    }\r\n    return list;\r\n}\r\nexport const mapSimValues = (values) => {\r\n    let v = {};\r\n    for(let k in values){\r\n        v[k] = values[k].value;\r\n    }\r\n    return v;\r\n}\r\n\r\nexport const listToEnglish = (src, transform) => {\r\n    let str = '';\r\n    let item;\r\n    let list = Array.isArray(src)?src:Object.keys(src);\r\n    list.map((e, i) => {\r\n        item = Array.isArray(src)?e:src[e]; //if is key on src, else just use item directly\r\n        str += transform?transform(e, item):item;\r\n        if(i < list.length - 1){\r\n            str += i < (list.length - 2)?', ':' and ';\r\n        }\r\n        \r\n    })\r\n    return str;\r\n}\r\nexport const all = {\r\n    mixAndMatch, getImg, getRange, deleteEmptyKeys, getItemParamText,  \r\n    getUnitName, convertUnit, scoreDistance, getEquationSelectionOptions,\r\n    getEqSide, toMMSS, filterObjectAByB, uniqueRay, addToArray, markMCQs,\r\n    addAnswer, getRandomSelection, shuf, isInvalid, getPar, stringToNum,\r\n    convertToNum, getRandomIndex, roundTo, getScore, getRatio, listToEnglish\r\n}"],"sourceRoot":""}