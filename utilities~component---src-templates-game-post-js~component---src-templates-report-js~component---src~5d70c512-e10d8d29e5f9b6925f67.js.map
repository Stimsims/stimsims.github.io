{"version":3,"sources":["webpack:///./src/utilities/Storage.js"],"names":["storeItem","k","item","encryptKey","window","localStorage","key","string","JSON","stringify","encryptString","setItem","Error","getItem","decryptKey","log","gameState","decryptString","parse","getSaveKey","title","isMeta","getEncKey","metaKey","startDate","encryptionKey","SimpleCrypto","encrypt","decrypt"],"mappings":"4FAAA,iPAGaA,EAAY,SAACC,EAAGC,EAAMC,GAC/B,GAAGC,QAAUA,OAAOC,aAAa,CAC7B,IAAIC,EAAML,EAAI,IAAK,UACfM,EAASC,KAAKC,UAAUP,GAM5B,OAJGC,IACCI,EAASG,EAAcP,EAAYI,IAEvCH,OAAOC,aAAaM,QAAQL,EAAKC,IAC1B,EAEX,MAAM,IAAIK,MAAJ,wCAGGC,EAAU,SAACZ,EAAGa,GACxB,GAAGV,QAAUA,OAAOC,aAAa,CAC5B,IAAIC,EAAML,EAAI,IAAK,UACnBc,YAAI,uBAAuBT,EAAxB,eAA0CQ,GAC7C,IAAIE,EAAYZ,OAAOC,aAAaQ,QAAQP,GAK5C,OAJGQ,IACCE,EAAYC,EAAcH,EAAYE,IAEvCA,IAAWA,EAAYR,KAAKU,MAAMF,IAC9BA,EAEZ,MAAM,IAAIJ,MAAJ,wCAEIO,EAAa,SAACC,EAAOC,GAC9B,MAAM,MAAOD,EAAb,KAAsBC,EAAO,IAAI,MAExBC,EAAY,SAACF,GACtB,GAAGhB,QAAUA,OAAOC,aAAa,CAC7B,IAAIkB,EAAUJ,EAAWC,GAAO,GAEhC,OADWZ,KAAKU,MAAMd,OAAOC,aAAaQ,QAAQU,IACtCC,YAIPd,EAAgB,SAACJ,EAAKC,GAC/B,IAAID,EAAK,MAAMM,MAAM,uCAAuCN,GAC5D,IAAImB,EAAgBnB,EAAM,GAG1B,OAFa,IAAIoB,IAAaD,GACPE,QAAQpB,IAItBU,EAAgB,SAACX,EAAKC,GAC/B,IAAID,EAAK,MAAMM,MAAM,uCAAuCN,GAC5D,IAAImB,EAAgBnB,EAAM,GAG1B,OAFa,IAAIoB,IAAaD,GACPG,QAAQrB","file":"utilities~component---src-templates-game-post-js~component---src-templates-report-js~component---src~5d70c512-e10d8d29e5f9b6925f67.js","sourcesContent":["import {log} from 'utilities/Measure';\r\nimport SimpleCrypto from \"simple-crypto-js\";\r\n\r\nexport const storeItem = (k, item, encryptKey) => {\r\n    if(window && window.localStorage){\r\n        let key = k + \"\" ||'fakekey';\r\n        let string = JSON.stringify(item);\r\n       \r\n        if(encryptKey){\r\n            string = encryptString(encryptKey, string);\r\n        }\r\n        window.localStorage.setItem(key, string);\r\n        return true;\r\n    }\r\n    throw new Error(`storage facilities aren't available`);\r\n}\r\n\r\nexport const getItem = (k, decryptKey) => {\r\n   if(window && window.localStorage){\r\n        let key = k + \"\" ||'fakekey';\r\n        log(`storage getItem key ${key} decryptKey ${decryptKey}`);\r\n        let gameState = window.localStorage.getItem(key);\r\n        if(decryptKey){\r\n            gameState = decryptString(decryptKey, gameState);\r\n        }\r\n        if(gameState) gameState = JSON.parse(gameState);\r\n        return gameState;\r\n   }\r\n   throw new Error(`storage facilities aren't available`);\r\n}\r\nexport const getSaveKey = (title, isMeta) => {\r\n    return `ss-${title}-${isMeta?'m':'g'}`;\r\n}\r\nexport const getEncKey = (title) => {\r\n    if(window && window.localStorage){\r\n        let metaKey = getSaveKey(title, true);\r\n        let meta = JSON.parse(window.localStorage.getItem(metaKey));\r\n        return meta.startDate;\r\n    }\r\n}\r\n\r\nexport const encryptString = (key, string) => {\r\n    if(!key) throw Error(`encryption requires a key, recieved ${key}`);\r\n    let encryptionKey = key + \"\";\r\n    let crypto = new SimpleCrypto(encryptionKey);\r\n    let encrypted = crypto.encrypt(string);\r\n    return encrypted;\r\n}\r\n\r\nexport const decryptString = (key, string) => {\r\n    if(!key) throw Error(`encryption requires a key, recieved ${key}`);\r\n    let encryptionKey = key + \"\";\r\n    let crypto = new SimpleCrypto(encryptionKey);\r\n    let decrypted = crypto.decrypt(string);\r\n    return decrypted;\r\n}"],"sourceRoot":""}