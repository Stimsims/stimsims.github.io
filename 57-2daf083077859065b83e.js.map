{"version":3,"sources":["webpack:///./src/games/LovecraftLoop/keys.js","webpack:///./src/games/LovecraftLoop/functions.js","webpack:///./src/games/LovecraftLoop/flags.js","webpack:///./src/games/LovecraftLoop/texts.js","webpack:///./src/games/LovecraftLoop/dialogues.js","webpack:///./src/games/LovecraftLoop/scenes.js","webpack:///./src/games/LovecraftLoop/index.js","webpack:///./src/games/LovecraftLoop/sim.js"],"names":["DefaultKeys","require","keys","eqPyth","figureNames","uVol","uLi","uT","uMin","uEn","uHz","uWeight","uG","uEpg","uMat","uDist","uKm","uSpeed","uKmph","vBirds","vBees","eqOxy","vT","vDw","vHc","vSd","vChh","vChm","vMv","vFd","vLl","vLr","vLb","vLg","vGp","vLrb","vLrg","vLbg","vL","vLhs","vScore","lhsPuzA","lhsPuzM","module","exports","roundTo","value","decimals","Number","Math","round","calculateLinearEquation","coefficients","variables","sum","c","mapSimValues","values","v","k","reverseCoefficients","lhs","ivs","dvs","solution","lb","ivKeys","Object","solutions","iv","map","key","random","coefficient","sort","a","b","log","dv","dvIndex","i","length","abs","getCoefficientsRange","ranges","min","max","extreme1","extreme2","generateCoefficients","positive","counter","e","giveAnswer","state","problem","modifier","ansModS","game","models","sim","model","range","description","name","incrementFlag","src","flag","hasOwnProperty","getVariableText","result","getHubLightText","unlockedIvs","text","className","color","listToEnglish","getBrokenDoorText","read","write","get","score","red","getRangeFraction","indexOf","blue","green","hallwayDescription","getRoomEffectText","node","dvRanges","texts","push","getTextVariableObservation","isUnlocked","flags","ivFraction","txt","hasSeenExtremeWeather","unit","getEndingText","getEndingHallwayText","getGradientDg","data","live","formulas","eq","latex","toLatex","gradient","getRegressionSlope","direction","out","MCQ","acGameMCQ","type","path","dataGradient","dialogue","id","makeChange","settings","viewProps","points","Scene","choice","options","end","fontSize","temp","gradientValues","subbedEqs","calculatingInput","val","actions","g","transformData","index","x","y","onInput","formula","x1","y1","x2","y2","setDiff","geq","eqs","subEqByString","pointsText","p","extras","Slider","getPar","step","descentToMadeness1","descentToMadeness2","descentToMadeness3","descentToMadeness4","changedMultipleVariables1","dgBadGradient","dgIntro","equations","getEquations","block","getLhsPuzzleView","dgPhoneCall","pull","allIvs","dgMirror","hasTalkedToMirror","angle","canTalk","dgHallway","userModel","buildLinearEquations","correlationView","returnNode","getGradient","ivValue","isInSystem","dataset","isNaN","tag","dvDomain","plots","set","onClick","a1","array","Dialogue","compact","minHeight","onExit","scoreDistance","rounded","ceil","merge","addons","DELETED","location","userLhs","gameAnswer","add","mult","riddle","replace","lhscore","output","simulation","n","checkFlags","set1","set2","meta","room","time","dw","changedMultipleVariablesLastRound","trigger","methods","label","aclocStory","view","move","error","roomText","getRoomText","sentHash","recievedHash","changedMultipleVariables","badGradientAnswer","getDgByState","updated","system","solutionKeys","solutionText","difficulty","solveEquations","leave","href","sliderInput","LinearSystemSolver","solVal","updateValues","functions","dvsValues","selectSubset","dest","blacklist","count","shuffle","dSet","Set","Array","isArray","sSet","bl","delete","sumSet","size","from","has","slice","getUnlockCount","activeIvs","f","gameSim","simInit","create","generate","format","math","iterators","GameInstance","PI","solutionLhs","getRange","randIndex","allIvsKeys","loopCounter","getRandomIndex","mMv","shuf","correctIvs","coefficientRanges","lightCoefficients","minMaxRanges","res","randVals","Dataset","loopMax","randomizeValues","lights","lastDp","loop","inputs","change","simIv","simModel","solutionScores","coefficientScores","getFinalScore","cScore","simEq","equationSumScores","usV","scores","unlockScores","simKey","eqKey","simCoeffFinal","nextUnlock","toUnlock","ivsIndex","unlockedMoreIvs","dp","differences","ks","countDifferences","light"],"mappings":"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","file":"57-2daf083077859065b83e.js","sourcesContent":["const DefaultKeys = require('./../keys');\r\n\r\nconst keys =  {...DefaultKeys, \r\n    eqPyth: 'eqPyth',\r\n    figureNames: ['AB', 'BC', 'AC', 'BD', 'AD', 'DC'],\r\n    uVol: 'volume', uLi: 'litres',\r\n    uT: 'time', uMin: 'minutes',\r\n    uEn: 'energy', uHz: 'hertz',\r\n    uWeight: 'weight', uG: 'grams', uEpg: 'energyPerGram',\r\n    uMat: 'material',\r\n    uDist: 'distance', uKm: 'km', uSpeed: 'speed', uKmph: 'kmph',\r\n    vBirds: 'birds', vBees: 'bees',\r\n    eqOxy: 'eqOxy',\r\n    vT: 'time',\r\n    vDw: 'doorWardrobe',\r\n    vHc: 'heightChart',\r\n    vSd: 'showerDrip',\r\n    vChh: 'clockHandHour',\r\n    vChm: 'clockHandMin',\r\n    vMv: 'musicVol',\r\n    vFd: 'fanDial',\r\n    vLl: 'lampLight',\r\n    vLr: 'red',\r\n    vLb: 'blue',\r\n    vLg: 'green',\r\n    vGp: 'gamePiece',\r\n    vLrb: 'redblue',\r\n    vLrg: 'redgreen',\r\n    vLbg: 'bluegreen',\r\n    vL:'lights',\r\n    vLhs: 'lhs',\r\n    vScore: 'score',\r\n    lhsPuzA: 'lhsPuzzleAdd',\r\n    lhsPuzM: 'lhsPuzzleMult'\r\n};\r\n\r\nmodule.exports = keys;\r\n\r\n// [vp.keys.c]: vp.keys.acMath, [vp.keys.act]\r\n\r\n/*\r\n        state.sim.ranges.heightChart = [0, 220];\r\n        state.sim.ranges[keys.vGp] = [0, 50];\r\n        state.sim.ranges[keys.vDw] = [0, 120];\r\n        state.sim.ranges.clockHandHour = [0, Math.PI*2];\r\n        state.sim.ranges.clockHandMinute = [0, Math.PI*2];\r\n        state.sim.ranges.musicVolume = [0, 20];\r\n        state.sim.ranges.lampLight = [0, 15];\r\n*/","const calculateLinearEquation = (coefficients, variables) => {\r\n    let sum = 0;\r\n    for(let c in coefficients){\r\n      sum += coefficients[c] * variables[c];\r\n    }\r\n    return sum;\r\n}\r\n\r\nconst generateCoefficients = (ranges, positive) => {\r\n    //ranges is an object with keys that equal variable values, and tuple of min max values\r\n    let keys = Object.keys(ranges);\r\n    //for all but the last range, select random coefficients, for the last, use whatever makes the sum equal lhs\r\n    let sum = 0, k = 0, counter = 0;\r\n    let coefficients = {};\r\n    keys.map((e, i) => {\r\n        k = 0;\r\n        while(k === 0 && counter < 10){\r\n          k = Math.random()*(ranges[e][1]- ranges[e][0]) + ranges[e][0];\r\n          counter++;\r\n        }\r\n        if(counter >= 10){\r\n           k = Math.random()*5 + 5;\r\n        }\r\n        if(!positive && Math.random()>0.5) k = k*-1;\r\n        coefficients[e] = roundTo(k, 2);\r\n        sum += k;\r\n    });\r\n    return coefficients;\r\n  }\r\n  \r\nconst getCoefficientsRange = (coefficients, ranges) => {\r\n    let variables = Object.keys(coefficients);\r\n    let min = 0;\r\n    let max = 0;\r\n    let extreme1 = 0;\r\n    let extreme2 = 0;\r\n    variables.map(v => {\r\n      extreme1 += coefficients[v]*ranges[v][0];\r\n      extreme2 += coefficients[v]*ranges[v][1];\r\n      if(extreme1 > extreme2){\r\n        max += extreme1;\r\n        min += extreme2;\r\n      }else{\r\n        max += extreme2;\r\n        min += extreme1;\r\n      }\r\n    });\r\n    log(`math getCoefficientRange min ${min} max ${max} coefficients`, coefficients);\r\n    return [min, max];\r\n  }\r\n  \r\n  \r\nconst reverseCoefficients = (lhs, ivs, dvs, roundTo) => {\r\n    let ivKeys = Object.keys(ivs);\r\n    let solutions = {}, solution, lb;\r\n    let iv = null;\r\n    ivKeys.map(key => {\r\n      iv = ivs[key];\r\n      lb = (iv[1]-iv[0])/4;\r\n      //lb = iv[0];\r\n      solutions[key] = roundTo(Math.random()*(iv[1]-lb) + lb, 2);\r\n    })\r\n    let sum = 0, coefficient = 0;\r\n    let coefficients = {};\r\n    ivKeys = ivKeys.sort((a, b) => {\r\n      return solutions[a] > solutions[b]?1:-1;\r\n    })\r\n    log(`reverseCoefficients solutions`, solutions);\r\n    dvs.map((dv, dvIndex) => {\r\n      sum = 0;\r\n      coefficients[dv] = {};\r\n      ivKeys.map((key, i) => {\r\n        iv = ivs[key];\r\n        solution = solutions[key];\r\n        if(i === ivKeys.length - 1){\r\n          coefficient = (lhs-sum)/solutions[key]; //cant round, or solutions are innaccurate\r\n        }else{\r\n          //random coefficient\r\n         // coefficient = roundTo(Math.random()*9 + 1, 2);\r\n        // let c = 1/Math.pow(solution, 1/2)*50;\r\n         let c = (1/(solution*0.1))*10;\r\n         log(`reverseCoefficients dv ${dv} iv ${iv} c ${c}`); //*(Math.random()>0.5?1:-1)\r\n          coefficient = (Math.random()*c + c);\r\n          if(dvIndex%2 === 0)coefficient = coefficient*-1;\r\n          if(Math.abs(coefficient*solutions[key] - lhs) < 10 || Math.abs(coefficient*solutions[key]) < 2){\r\n            //must avoid solutions that make one of the variables have no effect on the outcome - either close to answer or close to 0\r\n            if(coefficient > 0 && Math.abs(coefficient) < 2){\r\n              coefficient = 5/coefficient;\r\n            }else{\r\n              coefficient = coefficient*2;\r\n            }\r\n          }\r\n          coefficient = roundTo(coefficient, 2);\r\n          sum += coefficient*solutions[key];\r\n          \r\n        }\r\n        coefficients[dv][key] = coefficient;\r\n      })\r\n      log(`reverseCoefficients coefficients for ${dv}`,  coefficients[dv]);\r\n    })\r\n    return {\r\n      coefficients, solutions\r\n    }\r\n  }\r\nconst mapSimValues = (values) => {\r\n    let v = {};\r\n    for(let k in values){\r\n        v[k] = values[k].value;\r\n    }\r\n    return v;\r\n}\r\nfunction roundTo(value, decimals) {\r\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals) || Math.round(value);\r\n}\r\n\r\nfunction giveAnswer(state, problem, modifier, roundTo){\r\n  let ansModS = modifier;\r\n  let ansModC = modifier;\r\n  let {solutions, coefficients} = problem;\r\n  let dvs = Object.keys(coefficients);\r\n   for(let k in solutions){\r\n       //GIVE USER ANSWERS FOR TESTING\r\n       state.game.values[k] = {...state.game.values[k], value: roundTo(solutions[k]*ansModS, 2)};\r\n       for(let c in coefficients){\r\n           if(!state.game.models[c]) state.game.models[c]={}; \r\n           state.game.models[c][k] = coefficients[c][k]; //format.roundTo(res.coefficients[c][k]*ansModC, 2);\r\n           state.game.values[c] = {...state.game.values[c], value: coefficients[c][k]}; //{value: format.roundTo(res.coefficients[c][k]*ansModC, 2)}\r\n           state.game.values[`${k}-${c}`] = {value:coefficients[c][k]}; //{value: format.roundTo(res.coefficients[c][k]*ansModC, 2)}\r\n       }\r\n       state.sim.model[k] = {value: solutions[k], range: Math.max(solutions[k]*0.1, 5), \r\n           description: `The solution for the variable ${k}`, name: `the ${k} solution`}\r\n       dvs.map(dv => {\r\n           state.sim.model[`${k}-${dv}`] = {\r\n               value: coefficients[dv][k], range: 10,\r\n               description: `The coefficient relating ${k} to ${dv}`, \r\n               name: `the ${k}-${dv} light coefficient` \r\n           }\r\n       })\r\n   }\r\n   return state;\r\n}\r\n\r\nmodule.exports = {\r\n    calculateLinearEquation, mapSimValues, reverseCoefficients, getCoefficientsRange, generateCoefficients, roundTo, giveAnswer\r\n};","import {log} from 'utilities/Measure';\r\nimport {getRangeFraction} from 'utilities/Game/MathFun';\r\nimport keys from './keys.js';\r\n\r\nexport const MAX = 1;\r\nexport const HIGH = 0.7;\r\nexport const LOW = 0.3;\r\nexport const MIN = 0;\r\n\r\nconst incrementFlag = (src, flag) => {\r\n    src[flag] = src.hasOwnProperty(flag)? src[flag] + 1:0; //0 is the first time a scene type is triggered\r\n}\r\n\r\nconst countDifferences = (set1, set2, ks) => {\r\n    let keys = ks || Object.keys(set1);\r\n    let counter = 0;\r\n    keys.map(k => {\r\n        if(set1[k] !== set2[k]){\r\n            log(`checkFlags countDifferences k ${k} s1 ${set1[k]} s2 ${set2[k]}`);\r\n            counter++;\r\n        }\r\n    });\r\n    return counter;\r\n}\r\n\r\nexport const checkFlags = (state) => {\r\n    let node = state.meta.location;\r\n\r\n    let flags = {...state.flags};\r\n    let data = state.data.room.data\r\n    let allIvs = state.meta.allIvs;\r\n    let values = state.values;\r\n    let time = values[keys.vT].value;\r\n    let dvs = state.meta.dvs;\r\n    let dvRanges = dvs.map(dv => {\r\nlet dw = getRangeFraction(values[keys.vDw].min, values[keys.vDw].max,  values[keys.vDw].value);        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    \r\n    incrementFlag(flags, 'testFlag');\r\n\r\n    if(!flags.hasSeenExtremeWeather && node === 'wardrobeDoor' && (dvRanges[0] > HIGH || dvRanges[0] < LOW) &&  dw > MIN){ \r\n        incrementFlag(flags, 'hasSeenExtremeWeather');\r\n    }\r\n\r\n    if(time > 1){\r\n        let differences = countDifferences(data[data.length - 1], data[data.length - 2], allIvs);\r\n        if(differences > 1){\r\n            incrementFlag(flags, 'changedMultipleVariables');\r\n            flags.changedMultipleVariablesLastRound = true;\r\n        }else{\r\n            flags.changedMultipleVariablesLastRound = false;\r\n        }\r\n\r\n    }\r\n\r\n    return flags;\r\n}","import keys from './keys';\r\nimport {log} from 'utilities/Measure';\r\nimport {get} from 'utilities/Merge';\r\nimport {getRangeFraction} from 'utilities/Game/MathFun';\r\nimport {getPar, listToEnglish, roundTo} from 'utilities/Format';\r\nimport {MAX, HIGH, LOW, MIN} from './flags';\r\n//getRangeDegree = (max, min, nSegments, value)\r\n\r\n/*\r\n    [keys.vHc]: true,\r\n    [keys.vGp]: true,\r\n    [keys.vDw]: true,\r\n    [keys.vMv]: true,\r\n    [keys.vLl]: true,\r\n    [keys.vSd]: true,\r\n    [keys.vFd]: true\r\n*/\r\nexport const getVariableText = (key) => {\r\n    let result = '';\r\n    switch(key){\r\n        case keys.vMv: result = 'my music player volume'; break;\r\n        case keys.vHc: result = 'my height chart';break;\r\n        case keys.vGp: result = 'my game piece';break;\r\n        case keys.vDw: result = 'my wardrobe door';break;\r\n        case keys.vLl: result = 'my lamp';break;\r\n        case keys.vSd: result = 'my shower drip';break;\r\n        case keys.vFd: result = 'my fan dial';break;\r\n        default: result = 'unknown key: ' + key;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const getHubRiddle = (dvs, lhs) => {\r\n \r\n    return [\r\n        {text:`apon the wall, there are ${dvs.length} equations, \r\n            You feel the equations are important. \r\n            Perhaps if they were true, the world would right itself again.`, className: 'block'}, \r\n        {text: `There is a`, className: 'inline'},\r\n        {text: `riddle`, color: 'secondary', className: 'inline text-underlined', out: [\r\n                {type: 'set', path: 'meta.lhsRiddle', value: 'hub'},\r\n                {type: 'set', path: 'move', value: {location: 'lhsRiddle'}}\r\n            ]\r\n        },\r\n        {text: `above the equations`, className: 'inline'},\r\n        { text: 'Your equations:', color: 'pink', className: 'block'},\r\n    ]\r\n}\r\nexport const getHubLightText = (lhs, unlockedIvs) => {\r\n    return [\r\n        {text: `The strange lights are glowing on`, className: 'inline', color: 'primary'},\r\n        {text: listToEnglish(unlockedIvs, getVariableText), className: 'inline', color: 'primary'},\r\n        {text: `. Changing these glowing things seems to cause impossible, unfathomable changes around the room. \r\n        You must find the values for these that cause the lights to equal ${lhs || 'that poem'}`, className: 'inline'}\r\n    ];\r\n}\r\n\r\nexport const getBrokenDoorText = (read, write) => {\r\n    let values = get('values', read, write, null, true);\r\n    let flags = get('flags', read, write, null, true);\r\n    let score = values.score.value;\r\n    log(`getBrokenDoorText score ${score}`);\r\n    let dvs = get('meta.dvs', read, write, []);\r\n    let dvRanges = dvs.map(dv => {\r\n        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    let red = dvs.indexOf(keys.vLr);\r\n    let blue = dvs.indexOf(keys.vLb);\r\n    let green = dvs.indexOf(keys.vLg);\r\n    let firstTime = true;\r\n    let hallwayDescription = 'On the top floor, you can see the hallway rug.';\r\n    if(red && red > HIGH){\r\n        hallwayDescription += ' The walls are on fire, each painting a furnace.';\r\n    }else if(red && red < LOW){\r\n        hallwayDescription += ' Piles of snow accumulate on the floor.';\r\n    }\r\n    if(blue && blue > HIGH){\r\n        hallwayDescription += ` The hallway table opposite your door is massive, way bigger than it usually is. \r\n                                You'll struggle to squeeze past it.`;\r\n    }else if(blue && blue < LOW){\r\n        hallwayDescription += ` The hallway table opposite your door is tiny, like a piece of dolls furniture.`\r\n    }\r\n    if(green && green > HIGH){\r\n        hallwayDescription += ` The walls are a blinding flourescent white, as if they were light panels.`\r\n    }else if(green && green < LOW){\r\n        hallwayDescription += ` The hallway floor is so dark, it almost looks like a void. You'd be afraid to step on it.`\r\n    }\r\n    let result = [\r\n        {className: 'block', color: 'pink', text: `\r\n            Where your room should lead to the family hallway, it instead looks like an elevator\r\n            stuck halfway between two floors. The door itself is missing. \r\n            ${hallwayDescription}\r\n            On the bottom floor, you can see the tiles of your bathroom. Your dual entry\r\n            bathroom somehow impossibly connects right back to your bedroom. If you drop down,\r\n            you'll simply find yourself there again. `},\r\n        {className: 'block', text: ` ${dvs.length} lights speckle the door frame. Their intensity seems to \r\n        change with every loop. They seem related to the state of the broken room. \r\n        Though you don't know if they are the cause or the effect. It's possible\r\n        their effect has something to do with the equations.`},\r\n        score > 0.9?{text: `Something feels better about it though, you're sure you're getting very close`}:\r\n            {text: `It still doesn't feel right. You don't think you've got the answer yet. `}\r\n        // {text: `You've recorded the amount of light they give off,\r\n        // and graphed it. You are still figuring out what effects them.`}\r\n    ];\r\n    //I need some sort of object to represent the score, the more normal, the higher the score\r\n    \r\n    return result;\r\n}\r\n\r\nexport const getIVChangeText = (read, write, iv) => {\r\n    let data = get('data.room.data', read, write, null, true);\r\n    let flags = get('flags', read, write, null, false);\r\n     let hasChanged = data[data.length-1][iv] !== data[data.length-2][iv];\r\n    let changedMultipleVariablesLastRound = flags.changedMultipleVariablesLastRound;\r\n    if(hasChanged && changedMultipleVariablesLastRound){\r\n        return `The room has changed, but as I changed multiple variables during the last loop, \r\n        I can't be sure the rooms changes in this loop are because of the ${iv}`;\r\n    }else if(hasChanged){\r\n        return `The room has changed. Since I only changed the ${iv} in the last loop, \r\n                any change should be a direct result of it.`\r\n    }else{\r\n        return `I didn't change the ${iv} last loop, so the changes in the room must be a result of something else.`\r\n    }\r\n}\r\n\r\nexport const getRoomText = (read, write) => {\r\n    //describes the room at a glance, esp anything in the HIGH or LOW regions\r\n    let values = get('values', read, write, null, true);\r\n    let flags = get('flags', read, write, null, true);\r\n    let dvs = get('meta.dvs', read, write, []);\r\n    let dvRanges = dvs.map(dv => {\r\n        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    let red = dvs.indexOf(keys.vLr);\r\n    let blue = dvs.indexOf(keys.vLb);\r\n    let green = dvs.indexOf(keys.vLg);\r\n    let dw = getRangeFraction(values[keys.vDw].min, values[keys.vDw].max,  values[keys.vDw].value);\r\n    let texts = [];\r\n    if(values.time.value === 10){\r\n        texts.push({className: 'block', text: `My mind cracked a little the first time I saw my room. Though I'm fine now.`})\r\n    }\r\n    if(dvRanges[red] >= MAX){\r\n        if(dw < LOW){\r\n            texts.push({text: `The wardrobe door is cracking, you can see flames reaching through the door crack. The teapot is`});\r\n        }else{\r\n            texts.push({text: `The wardrobe is on fire, though the room never fills with smoke.`});\r\n        }\r\n        texts.push({text: `The teapot is bubbling over with water, it's dripping down your desk.`})\r\n    }else if(dvRanges[red] >= HIGH){\r\n        if(dw < LOW){\r\n            texts.push({text: `Smoke is escaping through the wardrobe door crack.`});\r\n        }else{\r\n            texts.push({text: `Smoke is billowing out of the wardrobe.`});\r\n        }\r\n        texts.push({text: `Steam is coming out of the teapot.`})\r\n    }else if(dvRanges[red] >= LOW){\r\n       \r\n    }else{\r\n        if(dw < LOW){\r\n            texts.push({text: `The wardrobe door is frozen and cracked.`});\r\n        }else{\r\n            texts.push({text: `Snow flakes blow out of the wardrobe door`});\r\n        }\r\n        texts.push({text: `The teapot is cracked.`});\r\n    }\r\n    log(`getRoomText dvFractions ${dvRanges} values`, values);\r\n    return texts;\r\n}\r\nexport const getRoomEffectText = (node, read, write) => {\r\n    let values = get('values', read, write, {}, true);\r\n    log(`getText getRoomEffectText values`, values);\r\n    let dvs = get('meta.dvs', read, write, []);\r\n    \r\n    let dvRanges = dvs.map(dv => {\r\n        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    let red = dvRanges[dvRanges[dvs.indexOf(keys.vLr)]];\r\n    let texts = [];\r\n    let txt = '';\r\n    if(node === 'teapot'){\r\n        if(red >= HIGH){\r\n            texts.push({text: `The teapot is overflowin, it's creating a stain on the desk.`});\r\n        }else if(red <= LOW){\r\n            texts.push({text: `The teapot is frozen solid, and has a crack running down its side.`});\r\n        }else{\r\n            texts.push({text: `The teapot is fine.`});\r\n        }\r\n    }\r\n    return texts;\r\n}\r\nexport const getTextVariableObservation = (iv, dv, isUnlocked, read, write, flags) => {\r\n    //red -> fire, blue -> flood, green -> shadow, ry -> size, rb ->, yb -> mirror\r\n    log(`getText getTextVariableObservation flags`, flags);\r\n    //values[keys.vLb].value = values[keys.vLb].max;\r\n    let values = get('values', read, write, {}, true);\r\n    log(`getText getTextVariableObservation values`, values);\r\n    let dvs = get('meta.dvs', read, write, []);\r\n    \r\n    let dvRanges = dvs.map(dv => {\r\n        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    let red = dvRanges[dvs.indexOf(keys.vLr)];\r\n    let blue = dvRanges[dvs.indexOf(keys.vLb)];\r\n    let green = dvRanges[dvs.indexOf(keys.vLg)];\r\n    let ivFraction = roundTo(getRangeFraction(values[iv].min, values[iv].max,  values[iv].value), 2);\r\n    let texts = [];\r\n    let txt = '';\r\n    switch(iv){\r\n        case keys.vDw:\r\n            //first time seen?\r\n            texts.push({text: `Your wardrobe seems highly responsive to the room conditions.`});\r\n            if(red >= MAX){\r\n                txt += 'Flames sprout from the back of the wardrobe. ';\r\n            }else if(dvRanges[0] > HIGH){\r\n                txt += 'The wardrobe is a source of endless black smoke. ';\r\n            }else if(dvRanges[0] > LOW){\r\n                txt += 'The wardrobe is normal. ';\r\n            }else{\r\n                txt += 'The wardrobe is ice cold, with small snowflakes floating out. ';\r\n            }\r\n            if(ivFraction > MAX){\r\n                txt += `It billows out into the room, yet they never accumulate, nor have any visible effect. `;\r\n            }else if(ivFraction > HIGH){\r\n                txt += `It migrates out into the room, yet they never accumulate. `;\r\n            }else if(ivFraction > LOW){\r\n                txt += `It seeps out through the small opening in the door. `;\r\n            }else{\r\n                txt += `It is are contained by the closed door. `;\r\n            }\r\n            //if flag === 0, \r\n            if(!flags.hasSeenExtremeWeather){\r\n                txt += 'It alarmed you at first, but eventually it was clear no lasting damage accumulated from the bizarre effects.'\r\n                //set flag for first observation of strange wardrobe effects\r\n            }\r\n            texts.push({text: txt});\r\n            break;\r\n        case keys.vFd:\r\n            texts.push({text: `The fan dial is at ${ivFraction} radians. There aren't any obvious effects occuring here.`})\r\n            break;\r\n        case keys.vHc:\r\n            texts.push({text: `The height chart sits at ${values[keys.vHc].value} ${values[keys.vHc].unit}`});\r\n            if(blue >= HIGH){\r\n                texts.push({text: `The height chart still has the same number of units, but it looks like \r\n                it has been stretched. It almost looks like it's actually moving, very slowly toward the ceiling.`});\r\n            }else if(blue <= LOW){\r\n                texts.push({text: `The height chart still has the same number of units, but it looks shrunken.`});\r\n            }\r\n            break;\r\n        case keys.vSd: //shower drip\r\n        texts.push({text: `The shower is ${ivFraction > HIGH?'running':'dripping'} at around ${values[keys.vSd].value} ${values[keys.vSd].unit} per minute.`});\r\n            break;\r\n        case keys.vLl:\r\n            if(ivFraction > HIGH){\r\n                texts.push({text: `The lamp is bright at about ${ivFraction} of its brilliance.`});\r\n            }else{\r\n                texts.push({text: `The lamp is dimly lit, at about ${ivFraction} of its brilliance.`});\r\n            }\r\n            break;\r\n        case keys.vMv:\r\n            if(ivFraction > HIGH){\r\n                texts.push({text: `The music volume is loud, at about ${ivFraction} of its maximum.`});\r\n            }else{\r\n                texts.push({text: `The music volume is quiet, at about ${ivFraction} of its maximum.`});\r\n            }\r\n            break;\r\n        case keys.vGp:\r\n            if(ivFraction > HIGH){\r\n                texts.push({text: `The game piece is close to the end, at about ${ivFraction} of the board.`});\r\n            }else if(ivFraction > LOW){\r\n                texts.push({text: `The game piece is in the middle, at about ${ivFraction} of the board.`});\r\n            }else{\r\n                texts.push({text: `The game piece is at the start, at about ${ivFraction} of the board.`});\r\n            }\r\n            break;\r\n        default:\r\n            texts.push({text: `No text found for iv ${iv} dv ${dv} pair`});\r\n            break;\r\n    }\r\n    if(isUnlocked){\r\n        texts.push({text: `It's covered in multi-colored stars. \r\n                They're the same color as those on the door.`, className: 'block'})\r\n    }else{\r\n        texts.push({text: `Only the objects covered the multi-colored stars appear to cause an effect. \r\n            I'll leave this alone for now`, className: 'block'})\r\n    }\r\n    log(`getText getTextVariableObservation iv ${iv} dv ${dv} \r\n        red ${dvRanges[0]} blue ${dvRanges[1]} texts`,  texts);\r\n    return texts;\r\n}\r\n\r\nexport const getEndingText = (read, write) => {\r\n    let values = get('values', read, write, null, true);\r\n    let flags = get('flags', read, write, null, true);\r\n    let dvs = get('meta.dvs', read, write, []);\r\n    let dvRanges = dvs.map(dv => {\r\n        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    let red = dvs.indexOf(keys.vLr);\r\n    let blue = dvs.indexOf(keys.vLb);\r\n    let green = dvs.indexOf(keys.vLg);\r\n    let redScore = get(`values.${keys.vLr}Score.value`, read, write, 0, true);\r\n    let blueScore = get(`values.${keys.vLb}Score.value`, read, write, 0, true);\r\n    let greenScore = get(`values.${keys.vLg}Score.value`, read, write, 0, true);\r\n    let score = get(`values.score.value`, read, write, 0, true);\r\n    //takes into account extremity - either normal end, slightly bad end, insane end\r\n    let texts = [];\r\n    if(score > 0.95){\r\n        texts.push({text: `While I couldn't forget the broken reality, I've also never seen it since. \r\n        Though When I enter a room, I'm still afraid that I'll never be able to leave it again.\r\n        But that's the only I'll effect I've suffered since.`})\r\n    }else if(score > 0.7){\r\n        if(red && red > HIGH){\r\n            texts.push({text: `Even in the coldest winters, the air feels swealtering to me. People give me odd looks when\r\n                I wear a singlet in the snow, and I still sweat.`})\r\n        }else if(red && red < LOW){\r\n            texts.push({text: `I still feel cold, even when inches away from an open flame. I gave up trying to get warm long ago. \r\n                Though people still look at me strangely when I shiver in the hottest heat waves.`})\r\n        }\r\n        if(blue && blue > HIGH){\r\n            texts.push({text: `Everything was a little too large, including people. While I looked normal to others, I was always a little bit too small for every chair, every table, every bed. \r\n                I was able to hide my struggles though, over compensating for my losses.`})\r\n        }else if(blue && blue < LOW){\r\n            texts.push({text: `Everything was too small, including the people. Though I did learn to adjust how I moved, how I acted, \r\n                in such a way that it must have looked only slightly odd to people around me.`})\r\n        }\r\n        if(green && green > HIGH){\r\n            texts.push({text: `People find my constant sunglasses strange, and my constantly dilated pupils stranger still, but not enough to comment, usually.`})\r\n        }else if(green && green < LOW){\r\n            texts.push({text: `I began to use a blind seers stick, probing the ground as I walked. Some people thought a \r\n            fully sighted person using such a stick was offensive, but most never commented.`})\r\n        }\r\n    }else{\r\n        if(red && (red > HIGH || red < LOW)){\r\n            texts.push({text: `I couldn't ignore the pain, I couldn't hide it, \r\n            and no one else could see the cause. `})\r\n        }\r\n        if(blue && (blue > HIGH || blue < LOW) || green && (green > HIGH || green < LOW)){\r\n            texts.push({text: `I couldn't adjust to my broken perspective on the world. `})\r\n        }\r\n        texts.push({text: `When every effort proved futile, they put me away\r\n        in a padded box, and I haven't seen anyone but paid professionals since.`})\r\n        texts.push({text: `Please wait, results being calculated...`, className: 'block', color: 'secondary'})\r\n    }\r\n    return texts;\r\n}\r\n\r\nexport const getEndingHallwayText = (read, write) => {\r\n    let values = get('values', read, write, null, true);\r\n    let flags = get('flags', read, write, null, true);\r\n    let dvs = get('meta.dvs', read, write, []);\r\n    let dvRanges = dvs.map(dv => {\r\n        return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n    })\r\n    let red = dvs.indexOf(keys.vLr);\r\n    let blue = dvs.indexOf(keys.vLb);\r\n    let green = dvs.indexOf(keys.vLg);\r\n    let redScore = get(`values.${keys.vLr}Score.value`, read, write, 0, true);\r\n    let blueScore = get(`values.${keys.vLb}Score.value`, read, write, 0, true);\r\n    let greenScore = get(`values.${keys.vLg}Score.value`, read, write, 0, true);\r\n    let score = get(`values.score.value`, read, write, 0, true);\r\n    let texts = [];\r\n    //if the score is >0.99 then the player has no ill effects\r\n    if(score > 0.95){\r\n        texts.push({text: `I stepped out into the hallway. When I looked back, my room was normal.\r\n        The walls were normal, the floor was normal, the table was normal. \r\n        Everything was as it was, as if nothing had ever changed`})\r\n    }else if(score > 0.7){\r\n        texts.push({text: `I stepped out into the hallway, \r\n        and while everything was a little off, I'd never been so grateful.`})\r\n        if(red && red > HIGH){\r\n            texts.push({text: `The pictures on the walls were still burning, \r\n                I was sweating profusely in the heat.`})\r\n        }else if(red && red < LOW){\r\n            texts.push({text: `Ice cold wind still pushed through the hallway, chilling me to the bone.`})\r\n        }\r\n        if(blue && blue > HIGH){\r\n            texts.push({text: `I had to squeeze past the massive table.`})\r\n        }else if(blue && blue < LOW){\r\n            texts.push({text: `I took care not to step in the tiny table`})\r\n        }\r\n        if(green && green > HIGH){\r\n            texts.push({text: `I had to squint at the blinding light the walls produced.`})\r\n        }else if(green && green < LOW){\r\n            texts.push({text: `I could hardly see the floor, I moved carefully not to trip over anything.`})\r\n        }\r\n    }else{\r\n        if(red && red > HIGH){\r\n            texts.push({text: `The pictures on the walls were still burning, \r\n                My skin felt like it was searing, like I was burning on the inside.`})\r\n        }else if(red && red < LOW){\r\n            texts.push({text: `Ice cold wind still pushed through the hallway. \r\n            I felt frozen through, it was hard to move.`})\r\n        }\r\n        if(blue && blue > HIGH){\r\n            texts.push({text: `I had to squeeze past the massive table.`})\r\n        }else if(blue && blue < LOW){\r\n            texts.push({text: `I took care not to step in the tiny table`})\r\n        }\r\n        if(green && green > HIGH){\r\n            texts.push({text: `I had to cover my eyes to block out the light of the walls. \r\n            It helped little, as the same blinding light lived behind my eyelids too.`})\r\n        }else if(green && green < LOW){\r\n            texts.push({text: `I tried not to look down, as the floor was a terrifying, \r\n                black void that I did not want to gaze into.`})\r\n        }\r\n    }\r\n    texts.push({text: `At the end of the hall, I opened the living room door, \r\n        afraid of how disfigured the world might be.`})\r\n    return texts;\r\n}","import React from 'react';\r\nimport keys from './keys';\r\nimport {MAX, HIGH, LOW, MIN} from './flags';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Choice from 'views/Choices/v1/Choices';\r\nimport Graph from 'game/Views/Graph/Raw/index';\r\nimport Slider from 'views/Slider/v1/Slider.js';\r\nimport Select from 'views/Select/v2/Select';\r\nimport {markMCQs, getEqSide, mixAndMatch, getRandomIndex, getImg, getPar, roundTo, listToEnglish} from 'utilities/Format.js';\r\nimport {transformData, getVariables, subMathEq, simplify, execute, toLatex, operate, EQLR, \r\n        buildLinearEquations, solveEquations, getRegressionSlope, \r\n        getDataMinMax, subEqByString, getRangeFraction} from 'utilities/Game/MathFun.js';\r\nimport {scoreDistance} from 'utilities/Game/Scoring.js';\r\nimport {Expression, MathUpdate} from 'utilities/Game/MathExpression.js';\r\nimport {MCQ, GameInstance} from 'utilities/Create.js';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport {log} from 'utilities/Measure';\r\nimport {getLhsPuzzleView, getEquations} from './scenes';\r\nimport {getEndingHallwayText, getEndingText} from './texts';\r\n\r\n\r\nexport const getDgByState = (read, write) => {\r\n//else, check state to see if valid dialogue\r\n    //else return null\r\n    let flags = get('flags', read, write, {}, true);\r\n    let values = get('values', read, write, {}, true);\r\n    if(flags.changedMultipleVariables > 1 && !flags.changedMultipleVariables1){\r\n        return changedMultipleVariables1;\r\n    }\r\n    // else if(flags.changedMultipleVariables > 1 && !flags.changedMultipleVariables2){\r\n    //     return changedMultipleVariables2;\r\n    // }\r\n    if(flags.badGradientAnswer && !flags.dgBadGradient){\r\n        return dgBadGradient;\r\n    }\r\n    if(values.time.value > 0 && !flags.descentToMadeness1){\r\n        return descentToMadeness1;\r\n    }else if(values.time.value > 0 && !flags.descentToMadeness2){\r\n        return descentToMadeness2;\r\n    }else if(values.time.value > 0 && !flags.descentToMadeness3){\r\n        return descentToMadeness3;\r\n    }else if(values.time.value > 0 && !flags.descentToMadeness4){\r\n        return descentToMadeness4;\r\n    }\r\n    \r\n}\r\n\r\nexport const getGradientDg = {\r\n    push: (data, iv, dv, live) => {\r\n        //make options out of data\r\n        // let options = data.map(e => {\r\n        //     return {label: `${iv}: ${e[iv]}, ${dv}: ${e[dv]}`, value: [e[iv], e[dv]]};\r\n        // })\r\n        // log(`branch getGradient iv ${iv} dv ${dv} live`, live);\r\n        let formulas = [\r\n            {eq: '(y1-y2)/(x1-x2)', latex: toLatex('(y1-y2)/(x1-x2)')},\r\n            {eq: '(y1-x1)/(y2-x2)', latex: toLatex('(y1-x1)/(y2-x2)')},\r\n            {eq: '(y1+x1)/(y2+x2)', latex: toLatex('(y1+x1)/(y2+x2)')},\r\n            {eq: '(x1-x2)/(y1-y2)', latex: toLatex('(x1-x2)/(y1-y2)')},\r\n        ]\r\n        ////getRegressionSlope = (data, x, y)\r\n       // let sliderValue = 3;\r\n        let gradient = getRegressionSlope(data, iv, dv);\r\n        let direction = [\r\n            <Text text=\"strong positive\" \r\n            out={[\r\n                MCQ(keys.acGameMCQ, 'gradient-direction', null, gradient > 0.7?100:0),\r\n                {type:'set', path: 'temp.node', value: 'how'}\r\n            ]} />,\r\n            <Text text=\"weak positive\" out={[\r\n                MCQ(keys.acGameMCQ, 'gradient-direction', null, (gradient > -0.3 && gradient < 0.9)?100:0),\r\n                {type:'set', path: 'temp.node', value: 'how'}\r\n            ]} />,\r\n            <Text text=\"weak negative\" out={[\r\n                MCQ(keys.acGameMCQ, 'gradient-direction', null, (gradient > -0.9 && gradient < 0.3)?100:0),\r\n                {type:'set', path: 'temp.node', value: 'how'}\r\n            ]} />,\r\n            <Text text=\"strong negative\" out={[\r\n                MCQ(keys.acGameMCQ, 'gradient-direction', null, gradient < -0.7?100:0),\r\n                {type:'set', path: 'temp.node', value: 'how'}\r\n            ]} />\r\n        ]\r\n        return {data, iv, dv,  formulas, direction, live, gradient: null, dataGradient: gradient};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let points = get('temp.points', read, write, []);\r\n        \r\n        switch(node){\r\n            case 'err':\r\n                return Scene( 'graderr', {settings, viewProps, makeChange, \r\n                    text: [`Error calculating the gradient. Make sure you pick points with different y values.`],\r\n                choice: {options: [\r\n                    <Text id={`graderr-ch`} text={\"okay\"} out={[\r\n                        {end: true}\r\n                    ]} />\r\n                ]}})\r\n            case 'autoCalc': return Scene('calculatedValue', {\r\n                settings, viewProps, makeChange,\r\n                text: [{fontSize: 'remM', text: `Automatically calculated: ${get('temp.gradient', read, write, null)}`}],\r\n                choice: {options: [\r\n                    <Text id={`autoCalc-btn`} text={\"Yes\"} out={{end: true}} />\r\n                ]}});\r\n            case 'calculatedValue': return Scene('calculatedValue', {\r\n                settings, viewProps, makeChange,\r\n                text: [{text: `I calculated the gradient to be ${get('temp.gradient', read, write, null)}`}],\r\n                choice: {options: [\r\n                    <Text id={`calculatedValuegrad`} text={\"Yes\"} out={{end: true}} />\r\n                ]}});\r\n            case 'calculatingValue': return Scene('calculatingValue', {\r\n                settings, viewProps, makeChange,\r\n                text: [{text: `I think the gradient would then be...`}],\r\n                choice: {options: write.temp.gradientValues.map((v, i) => {\r\n                    return <Text id={`calculatingValuegrad`} text={v} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'calculatedValue'},\r\n                        {type: 'set', path: `temp.gradient`, value: `${v}`},\r\n                        MCQ(keys.acGameMCQ, 'gradient-formula-value', null, i === 0),\r\n                    ]} />\r\n                })}})\r\n            case 'calculating':\r\n                let subbedEqs = write.temp.subbedEqs;\r\n                let calculatingInput = (id, val) => {\r\n                    let actions = [{type: 'set', path: 'temp.node', value: 'calculatingValue'}];\r\n                    let g = roundTo(transformData(val.eq, [{}]), 2);\r\n                    //actions.push({type: 'set', path: `temp.gradient`, value: `${g}`});\r\n                    actions.push({type: 'set', path: `temp.gradientValues`, value: [g, g*-10, g*0.01, g*1000]});\r\n                    actions.push(MCQ(keys.acGameMCQ, 'gradient-formula-filled-in', null, val.index === 0));\r\n                    makeChange(node, actions);\r\n                }\r\n                return Scene('calculating', {\r\n                    settings, viewProps, makeChange,\r\n                    text: [{text: `I shall use the points (${points[0].x}, ${points[0].y}) and (${points[1].x}, ${points[1].y}) with the formula`},\r\n                {latex: get('temp.formula', read, write, null).latex}, {text: `to calculate the gradient.`}, \r\n                {text: `That should look like`}],\r\n                choice: {options: subbedEqs.map((eq, i) => {\r\n                    return <Text id={`calcgrad`} index={i} latex={eq.latex} eq={eq.eq} onInput={calculatingInput} />\r\n                })}})\r\n            case 'pickPointX':\r\n            case 'pickPointY':\r\n                if(points.length >= 2){\r\n                    let a = []\r\n                    let formula = get('temp.formula', read, write, null);\r\n                    //subMathEq = (eq, constants, useLatex) \r\n                        let values = {\r\n                            x1: points[0].x, y1: points[0].y,\r\n                            x2: points[1].x, y2: points[1].y,\r\n                        }\r\n                        if(values.x1 === values.x2){\r\n                            a = [\r\n                                {type: 'set', path: 'temp.node', value:'err'},\r\n                              //  MCQ(keys.acGameMCQ, 'gradient-pick-point-2', null, 0)\r\n                            ]\r\n                        }else{\r\n                            \r\n                           // a.push(MCQ(keys.acGameMCQ, 'gradient-pick-point-2', null, 1));\r\n                            if(settings[keys.setDiff] <= 2){\r\n                                a.push({type: 'set', path: 'temp.node', value: 'autoCalc'});\r\n                                let g = roundTo(transformData(formula.eq, [values]), 2);\r\n                                a.push({type: 'set', path: `temp.gradient`, value: `${g}`});\r\n                            }else{\r\n                                a.push({type: 'set', path: 'temp.node', value: 'calculating'});\r\n                                let geq = get('temp.formula', read, write, null);\r\n                                let eqs = [\r\n                                    {eq: subEqByString(geq.eq, {...values}), latex:subEqByString(geq.latex, {...values})},\r\n                                    {eq: subEqByString(geq.eq, {...values, y2: values.x2, y1: values.x1}), latex:subEqByString(geq.latex, {...values, y2: values.x2, y1: values.x1})},\r\n                                    {eq: subEqByString(geq.eq, {...values, x2: values.y2, x1: values.y1}), latex:subEqByString(geq.latex,{...values, x2: values.y2, x1: values.y1})},\r\n                                    {eq: subEqByString(geq.eq, {...values, y1: values.y2, x1: values.x2}), latex:subEqByString(geq.latex, {...values, y1: values.y2, x1: values.x2})}\r\n                                ];\r\n                                a.push({\r\n                                    type: 'set', path: `temp.subbedEqs`, value: eqs\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                    log(`dialogue gradient props actions`, a);\r\n                    makeChange(node, a);\r\n                    return;\r\n                }\r\n                let pointsText = 'points: ';\r\n                points.map((p, i) => {\r\n                    if(i > 0) pointsText += ', ';\r\n                    pointsText += `(${p.x}, ${p.y})`;\r\n                })\r\n                return Scene(node, {settings, viewProps, makeChange,\r\n                    text: [{text: `Pick point ${points.length + 1} for formula from the graph`}, \r\n                    {text: pointsText, className: 'block'},\r\n                    {latex: get('temp.formula', read, write, null).latex}],\r\n                })\r\n            case 'pointslope': return Scene('pointslope', {\r\n                settings, viewProps, makeChange,\r\n                text: [{text: `what is the formula to find a gradient \r\n                    from two points, (x1, y1) and (x2, y2)?`, fontSize:\"remM\"}],\r\n                choice: {options: get('temp.formulas', read, write, []).map((e, i) => {\r\n                    return <Text id={`point-slope-${i}`} latex={e.latex} fontSize=\"remM\"\r\n                    out={[\r\n                        {type: 'set', path: 'temp.node', value: 'pickPointX'},\r\n                        {type: 'set', path: 'temp.formula', value: e},\r\n                        MCQ(keys.acGameMCQ, 'gradient-two-point-formula', e.eq, i === 0)\r\n                    ]} />\r\n                })}})\r\n            case 'guess': return Scene('guess', {\r\n                settings, viewProps, makeChange,\r\n                text: [`What is the gradient?`],\r\n                extras: [\r\n                    <Slider {...getPar(settings, viewProps, makeChange, `temp.gradient`)} \r\n                    min={-100} max={100} step={0.1} text=\"red\"\r\n                    value={get(`temp.gradient`, read, write, 3)} />\r\n                ],\r\n                choice: {options: [<Text text={\"select\"} out={[\r\n                {end: true},\r\n                //{type: 'set', path: 'temp.gradient', value: get('temp.sliderValue', read, write, 3)}\r\n              ]} />]}})\r\n            default: return Scene('how', {settings, viewProps, makeChange, \r\n                text: [`How should I get the gradient`],\r\n                choice: {options: [\r\n                <Text id={`${id}-c1`} text={\"Guess\"} out={[\r\n                    {type: 'set', path: 'temp.node', value: 'guess'}\r\n                ]} />,\r\n                <Text id={`${id}-c1`} text={\"Point Slope formula\"} out={[\r\n                    {type: 'set', path: 'temp.node', value: 'pointslope'}\r\n                ]} />\r\n            ]}})\r\n            // default: return Scene('intro-start', {\r\n            //     settings, viewProps, makeChange, \r\n            //     text: [`What kind of relationship is it?`],\r\n            //     choice: {options: write.temp.direction}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const descentToMadeness1 = {\r\n    key: 'descentToMadeness1',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('descentToMadeness1', {\r\n                settings, viewProps, makeChange,\r\n                text: [`You wonder why this is happening to you, of all people. Was it an accident? Were you in the \r\n                    wrong place at the wrong time? Is it a punishment? Is it because you're special? Why you?`],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const descentToMadeness2 = {\r\n    key: 'descentToMadeness2',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('descentToMadeness2', \r\n            {settings, viewProps, makeChange, text: [`As you retrace your steps again and again, you get the sense you are being watched.\r\n                At this point, you'd be glad for almost anyone to show up. You've lost count of how many loops you've done already.`],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const descentToMadeness3 = {\r\n    key: 'descentToMadeness3',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            case 'donttell':return Scene('descentToMadeness3', \r\n            {settings, viewProps, makeChange, text: [`You doubt you'll tell anyone about this either, if you ever do escape.`],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n            default: return Scene('descentToMadeness3', \r\n            {settings, viewProps, makeChange, text: [`When you escape, you doubt you'll ever feel completely right again. If reality\r\n            can break this completely, making a mockery of all the laws in all your textbooks, how could you trust it again? \r\n            Had this happened to others? Would they ever talk about it to anyone? Had someone told you they were stuck in a twisted pretzel of a room\r\n            when you were last outside, you'd have backed away slowly.`],\r\n              choice: {options: [<Text text={\"next\"} out={ {type: 'set', path: 'temp.node', value: 'donttell'}} />]}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const descentToMadeness4 = {\r\n    key: 'descentToMadeness4',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('descentToMadeness4', \r\n            {settings, viewProps, makeChange, text: [`You miss your family. You miss your friends. How long has it been since you last saw them?\r\n                Do they even know you're gone? Is time even passing for them? `],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const changedMultipleVariables1 = {\r\n    key: 'changedMultipleVariables1',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('changedMultipleVariables1', {\r\n                settings, viewProps, makeChange,\r\n                text: [`Since you changed multiple variables in one loop, it's impossible to say which caused the changes in the lights. \r\n                        Try changing one at a time, then measuring how much change occured.`],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n        }\r\n    }\r\n}\r\n\r\n// export const changedMultipleVariables2 = {\r\n//     key: 'changedMultipleVariables2',\r\n//     dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n//         switch(node){\r\n//             default: return Scene('changedMultipleVariables2', {\r\n//                 settings, viewProps, makeChange,\r\n//                 text: [`I'll need to change variables one at a time, to figure out what caused these changes.`],\r\n//               choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const dgBadGradient = {\r\n    key: 'dgBadGradient',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        switch(node){\r\n            default: return Scene('changeThenGradient', {\r\n                settings, viewProps, makeChange,\r\n                text: [`To find out how the independent variables really relate to the dependent variables, you'll need to be careful. \r\n                    You'll need to change them one at a time, then measure how the lights change.`],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const dgIntro = {\r\n    key: 'dgIntro',\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let dvs = get('meta.dvs', read, write, null);\r\n        let ivs = get('meta.unlockedIvs', read, write, null);\r\n        let lhs = get(`values.${keys.vLhs}.value`, read, write, null);\r\n        switch(node){\r\n            case 'goal': return Scene('goal', {settings, viewProps, makeChange,\r\n                text: [`I need to find what values the ${listToEnglish(ivs)}  need to be, \r\n                to make the ${listToEnglish(dvs)} lights equal ${lhs || 'that poem'}`],\r\n              choice: {options: [<Text text={\"next\"} out={{end: true}} />]}})\r\n            case 'data': return Scene('data', {settings, viewProps, makeChange,\r\n                text: [`I have started collecting data on how changing the glowing objects, the ${listToEnglish(ivs)} \r\n                    changes the room, and most importantly, the ${listToEnglish(dvs)} lights`],\r\n                choice: {options: [<Text text={\"next\"} out={[\r\n                    {type: 'set', path: 'temp.node', value: 'goal'}\r\n                ]} />]}})\r\n            case 'eqsTrue': \r\n                //getEquations = (iv, dv, read, write) \r\n                return Scene('eqsTrue', {settings, viewProps, makeChange,\r\n                    text: [{text: `I'm starting to think they might be my only way out of this nightmare.`, className: 'block'},\r\n                    {text: `If they lights need to equal ${lhs || 'that poem'}, and the lights are controlled by the glowing objects...\r\n                    then perhaps there is some configuration that will let me leave. \r\n                    But I have no idea to figure out what it could be...`}],\r\n                    choice: {options: [<Text text={\"next\"} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'data'}\r\n                    ]} />]}})\r\n            case 'eqs': \r\n                //getEquations = (iv, dv, read, write) \r\n                let equations = getEquations(null, null, read, write);\r\n                return Scene('eqs', {settings, viewProps, makeChange,\r\n                    text: [`And there's ${dvs.length} equations`, \r\n                    ...equations.map(eq => {return {latex: eq, className: 'block', block:true}})\r\n                    ],\r\n                    choice: {options: [<Text text={\"next\"} out={[\r\n                        {type: 'set', path: 'temp.node', value: 'eqsTrue'}\r\n                    ]} />]}})\r\n            case 'puzzle': return getLhsPuzzleView({type: 'set', path: 'temp.node', value: 'eqs'}, \r\n                read, write, makeChange, settings, viewProps);\r\n            case 'sparkle': \r\n                    return Scene('sparkle', {settings, viewProps, makeChange,\r\n                    text: [`Sparkeling stars of ${listToEnglish(dvs)} pepper the walls. A few items in my room are smothered with them.`,\r\n                    `These items being my ${listToEnglish(ivs)}`,\r\n                    `Changing them seems to trigger unfathomable effects elsewhere in the room, but only once I've broken every geometrical law\r\n                    in dropping from my bedroom to my dual entry bathroom once more.`, \r\n                    {text: `The strangest thing, is the writing on the wall`, className: 'block'}, \r\n                    {text: `There's a poem`, className: 'block'}],\r\n                    choice: {options: [<Text text={\"next\"} out={[\r\n                            {type: 'set', path: 'temp.node', value: 'puzzle'}\r\n                        ]} />]}})\r\n            case 'change': return Scene('intro-change', {\r\n                settings, viewProps, makeChange,\r\n                text: [{text: `Something changed. Now the world is broken. Now the world has shrunk down to just my room and ensuite. I can't leave.`},\r\n                {text: `Though I am thankful for the ensuite now that I think about it. I've been here for a long time...`, className: 'block'},\r\n                {text: `Nothing is as it should be. Nothing makes sense. An action that should cause an effect no longer does.\r\n                Strange things cause yet stranger things. I have only just begun to learn these new blasphemous laws.`, className: 'block'}],\r\n                choice: {options: [<Text id={`${id}-c1`} text={\"next\"} out={[\r\n                    {type: 'set', path: 'temp.node', value: 'sparkle'}\r\n                ]} />]}})\r\n            default: return Scene('intro-start', {\r\n                settings, viewProps, makeChange,\r\n                text: [`I'd lived in this room all my life, never thinking about how lucky I was to be able to leave.`],\r\n                choice: {options: [<Text id={`${id}-c1`} text={\"next\"} out={[\r\n                    {type: 'set', path: 'temp.node', value: 'change'}\r\n                ]} />]}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const dgPhoneCall = {\r\n    key: 'dgPhoneCall',\r\n    pull: (read, write) => {\r\n        let flags = get('flags', read, write, 0, true);\r\n        let allIvs = get('meta.allIvs', read, write, 0, true);\r\n        return {flags, allIvs};\r\n    },\r\n    // onExit:()=>{\r\n\r\n    // },\r\n    //make it a help line\r\n    //reveal one variable and its coefficient in exchange for halving your score\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let flag = get('flags.dgPhoneCall', read, write, false, true);\r\n        log(`dgPhoneCall inputs read`, read);\r\n        switch(node){\r\n            case 'health': return Scene('health', {settings, viewProps, makeChange,\r\n                text: [`How are you feeling?`],\r\n                choice: {options: [<Text text={\"next\"} out={{end: true}} />]}});\r\n            case 'answerEnd': return Scene('answerEnd', {settings, viewProps, makeChange,\r\n                    text: [`Operation complete. Have a pleasant day.`],\r\n                    choice: {options: [<Text text={\"next\"} out={{end: true}} />]}});\r\n            case 'answer':return Scene('answer', {settings, viewProps, makeChange,\r\n                text: [`We can add the correct causes to your equations, \r\n                    if you are willing to halve your score.\r\n                    You'll still need to figure out their coefficients. \r\n                    Please note that this will overwrite any of your current coefficients.`, \r\n                    {text: `Do you consent?`, className: 'block'}],\r\n                choice: {options: [<Text text={\"yes\"} onInput={(id, val) => {\r\n                    //pick a random dv, pick one of the active ivs, get the coefficient\r\n                    //set flag to indicate score should be halved\r\n                    let dvs = get('meta.dvs', read, write, null);\r\n                    let ivs = get('meta.correctIvs', read, write, null, true);\r\n                    /*\r\n actions.push({type: 'merge', path: `models.${dv}`, value: {[iv]: roundTo(write.temp.gradient, 2)}});\r\n                        actions.push( {type: 'merge', path: `values.${iv}-${dv}`, value: {...ivValue, value: roundTo(write.temp.gradient, 2)}});\r\n                        actions.push( {type: 'merge', path: `values.${iv}-${dv}`, value: {...ivValue, value: roundTo(write.temp.gradient, 2)}});\r\n                    */\r\n                   let actions = [\r\n                    {type: 'set', path: 'temp.node', value: 'answerEnd'},\r\n                    {type: 'set', path: 'flags.hadHelp', value: true},\r\n                    {type: 'set', path: 'unlockedIvs', value: get('meta.allIvs', read, write, null, true)},\r\n                   ];\r\n                   let model = {};\r\n                   dvs.map(dv => {\r\n                       model[dv] = {};\r\n                       ivs.map(iv => {\r\n                            model[dv] = {...model[dv], [iv]: roundTo(Math.random()*9 + 1, 2)};\r\n                            //actions.push({type: 'merge', path: `values.${iv}-${dv}`, value: {value: 1}})\r\n                       })\r\n                   })\r\n                   actions.push({type: 'set', path: 'models', value: model});\r\n                   makeChange(id, actions);\r\n                }} />]}});\r\n            default: return Scene('walk', {settings, viewProps, makeChange,\r\n                text: [`\"This is the help line. We provide a range of services for your needs. \r\n                    Press 1 if you'd like an answer. \r\n                    Press 2 if you'd like to speak to a health professional\"`],\r\n                choice: {options: [\r\n                <Text text={\"Press 1\"} out={{type: 'set', path: 'temp.node', value: 'answer'}} />,\r\n                <Text text={\"Press 2\"} out={{type: 'set', path: 'temp.node', value: 'health'}} />,\r\n                <Text text={\"hang up\"} out={{end: true}} />,\r\n                ]}});\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const dgMirror = {\r\n    key: 'dgMirror',\r\n    pull: (read, write) => {\r\n        let values = get('values', read, write, null, true);\r\n        let hasTalkedToMirror = get('flags.hasTalkedToMirror', read, write, false, true);\r\n        let dvs = get('meta.dvs', read, write, []);\r\n        let dvRanges = dvs.map(dv => {\r\n            return getRangeFraction(values[dv].min, values[dv].max,  values[dv].value)\r\n        })\r\n        let red = dvs.indexOf(keys.vLr);\r\n        let blue = dvs.indexOf(keys.vLb);\r\n        let green = dvs.indexOf(keys.vLg);\r\n        //blue light controls effect\r\n        let angle = blue*360 - 180;\r\n        return {hasTalkedToMirror, red: dvRanges[red], blue: dvRanges[blue], green: dvRanges[green], angle};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let angle = write.temp.angle;\r\n        let canTalk = Math.abs(write.temp.angle) > 150 && !write.temp.hasTalkedToMirror;\r\n        log(`dgMirror angle ${angle} canTalk ${canTalk} write`, write);\r\n        //instead of a dimmer its a height chart, why so confusing?\r\n        switch(node){\r\n            case 'endConvo1':\r\n            case 'endConvo': return Scene(node, {settings, viewProps, makeChange,\r\n                text: [{text: `The mirror doesn't respond`}],\r\n                choice: {options: [\r\n                <Text text={\"Hey!\"}  out={{type: 'set', path: 'temp.node', value: node === 'endConvo'?'endConvo1':'endConvo'}} />,\r\n                <Text text={\"back\"}  out={{end: true}} />,\r\n            ]}});\r\n            case 'solve':return Scene('solve', {settings, viewProps, makeChange,\r\n                    text: [{text: 'With how the reflection is rotated, I cannot see their face, but they sound happy.'}, \r\n                    {text: `\"And that's why you're still stuck here. \r\n                    You're thinking about anything and everything except the problem.\"`, className: \"block\", color: 'pink'}],\r\n                    choice: {options: [\r\n                    <Text text={\"You mean, I need to solve the problem to escape?\"} \r\n                            out={{type: 'set', path: 'temp.node', value: 'endConvo'}} />\r\n                ]}});\r\n            case 'mad':return Scene('mad', {settings, viewProps, makeChange,\r\n                    text: [{text: `\"You're not mad if you know you're mad.\"`}],\r\n                    choice: {options: [\r\n                    <Text text={\"Thanks for the support\"}  out={{type: 'set', path: 'temp.node', value: 'endConvo'}} />\r\n                ]}});\r\n            case 'who':return Scene('who', {settings, viewProps, makeChange,\r\n                    text: [{text: `\"So many questions. You've already been given all the information you\r\n                    need, and all you'll ever be getting. Now it's just a question of how long it\r\n                    takes you to put the pieces together.\"`}],\r\n                    choice: {options: [\r\n                    <Text text={\"That makes no sense\"}  out={{type: 'set', path: 'temp.node', value: 'endConvo'}} />\r\n                ]}});\r\n            case 'convo':return Scene('convo', {settings, viewProps, makeChange,\r\n                    text: [{text: 'My reflection starts to move, while I am frozen still.'}, \r\n                    {text: `\"And that's why you're still stuck here. \r\n                    You're thinking about anything and everything except the problem.\"`, className: \"block\", color: 'pink'}],\r\n                    choice: {options: [\r\n                    <Text text={\"You mean, Figure out how to make the lights equal the poem to escape?\"} \r\n                            out={{type: 'set', path: 'temp.node', value: 'solve'}} />,\r\n                    <Text text={\"How are you speaking to me? Why are you doing this to me? Who do you work for?\"} \r\n                            out={{type: 'set', path: 'temp.node', value: 'who'}} />,\r\n                    <Text text={\"I've gone mad...\"} \r\n                            out={{type: 'set', path: 'temp.node', value: 'mad'}} />\r\n                ]}});\r\n            case 'nothing':return Scene('nothing', {settings, viewProps, makeChange,\r\n                text: [`Nothing happens`],\r\n                choice: {options: [\r\n                <Text text={\"next\"} out={{type: 'set', path: 'temp.node', value: 'start'}} />\r\n            ]}});\r\n            case 'start':\r\n            default: return Scene('walk', {settings, viewProps, makeChange,\r\n                text: [angle > 0?\r\n                    `My reflection is rotated to around ${write.temp.angle} degrees away from me. They still\r\n                    move as I do, but they aren't oriented as they should be.`:\r\n                    `My reflection is normal again, which is unusual now.`\r\n                ],\r\n                choice: {options: [\r\n                <Text text={\"Say: 'How am I going to get out of this?'\"}  \r\n                out={{type: 'set', path: 'temp.node', value: 'nothing'}} />,\r\n                <Text text={\"Say: 'My hair looks awful...'\"}  \r\n                out={{type: 'set', path: 'temp.node', value: canTalk?'convo':'nothing'}} />,\r\n                <Text text={\"back\"} out={{end: true}} />,\r\n            ]}});\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const dgHallway = {\r\n    key: 'dgHallway',\r\n    pull: (read, write) => {\r\n        let score = get('values.score.value', read, write, 0, true);\r\n        return {score};\r\n    },\r\n    dialogue: (id, node, read, write, makeChange, settings, viewProps) => {\r\n        let score = write.temp.score;\r\n        switch(node){\r\n            case 'world':return Scene('world', {settings, viewProps, makeChange,\r\n                text: [...getEndingText(read, write)],\r\n                choice: {options: [<Text text={\"next\"} out={{end: true}} />]}});\r\n            default: return Scene('walk', {settings, viewProps, makeChange,\r\n                text: [...getEndingHallwayText(read, write)],\r\n                choice: {options: [<Text text={\"next\"} \r\n                out={{type: 'set', path: 'temp.node', value: 'world'}} />]}});\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Dialogue from 'game/Views/Dialogue/Dialogue.js';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport Choice from 'views/Choices/v1/Choices';\r\nimport Graph from 'game/Views/Graph/Raw/index';\r\nimport {log} from 'utilities/Measure.js';\r\nimport Slider from 'views/Slider/v1/Slider.js';\r\nimport {toLatex, buildLinearEquations} from 'utilities/Game/MathFun.js';\r\nimport {getPar, roundTo} from 'utilities/Format.js';\r\nimport {scoreDistance} from 'utilities/Game/Scoring.js';\r\nimport {getTextVariableObservation} from './texts.js';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport {MCQ} from 'utilities/Create.js';\r\nimport {getGradientDg} from './dialogues.js';\r\nimport keys from './keys';\r\n\r\n\r\nexport const getEquations = (iv, dv, read, write) => {\r\n    let eqs = [];\r\n    let lhs = get(`values.${keys.vLhs}`, read, write,  {value: null}).value;\r\n    let userModel = get(`models`, read, write,  {}, true);\r\n    let model = null;\r\n    let eq = null;\r\n    if(dv){\r\n        model = iv? {[iv]: userModel[dv][iv]}:userModel[dv]\r\n        eq = buildLinearEquations(lhs || dv, model);\r\n        eqs.push({eq: `${dv}: ${eq.eq}`, latex: `${dv}: ${eq.latex}`});\r\n    }else{\r\n        for(let key in userModel){\r\n            model = iv? {[iv]: userModel[key][iv]}:userModel[key];\r\n            eq = buildLinearEquations(lhs || key, model);\r\n          //  eqs.push({eq: `${key} light: ${eq.eq}`, latex: `${key}: ${eq.latex}`});\r\n            eqs.push(eq);\r\n        }\r\n    }\r\n    \r\n    return eqs;\r\n}\r\n\r\n\r\nexport const correlationView = (iv, returnNode, read, write, makeChange, settings, viewProps) => {\r\n    let values = get(`values`, read, write,  {}, true);\r\n    let flags = get(`flags`, read, write,  {}, true);\r\n    let getGradient = get(`temp.getGradient`, read, write,  false);\r\n    let dv = get(`temp.dv`, read, write,  null);\r\n    let ivValue = get(`values.${iv}`, read, write,  {});\r\n    let coefficient = get(`models.${dv}.${iv}`, read, write,  null, true);\r\n    let isInSystem = typeof coefficient === 'number';\r\n    let dataset = get(`data.room`, read, write,  {});\r\n    \r\n    let dvs =  get(`meta.dvs`, read, write,  [], true);\r\n\r\n    if(dv){\r\n        // let dvRange = getDataMinMax(dv, dataset.data);\r\n        // dvRange[0] = dvRange[0]-100;\r\n        // dvRange[1] = dvRange[1]+100;\r\n        let dvRange = [-1000, 1000]\r\n        let text = [];\r\n        let eq = null;\r\n        if(coefficient && !isNaN(coefficient)){\r\n            eq = `${dv} = ${coefficient} * ${iv}`;\r\n            text.push({text: `I think the ${dv} lights and ${iv} are related by`});\r\n            text.push({latex: toLatex(eq)});\r\n        }else{\r\n            text.push({text: `I don't know how the ${dv} lights and ${iv} are related`});\r\n        }\r\n        return Scene(`${iv}-${dv}`, {makeChange, settings, viewProps, text: [\r\n            {text: `Independent Variable: ${iv}`, tag: \"h2\", className: 'block'},\r\n            ...text\r\n            ],\r\n            extras: [\r\n                <Graph \r\n                    className=\"item-large\"\r\n                    {...getPar(settings, viewProps, makeChange, 'graph-wardrobe')}\r\n                    iv={iv}\r\n                    dv={dv}\r\n                    dvDomain={dvRange}\r\n                    values={get(`values`, read, write,  {})}\r\n                    plots={[\r\n                        {type: 'scatter', key: `${iv}-${dv}-light-data`,  set: dataset.data, color: dv, onClick: (a1) => {\r\n                            if(getGradient){\r\n                                let points = get(`temp.points`, read, write, []);\r\n                                log(`graph click points`, points);\r\n                                if(points.length < 3){\r\n                                    let node = a1.node;\r\n                                    makeChange(iv, [{type: 'merge', array:true, path: 'temp.points', value: node}]);\r\n                                }\r\n                            }\r\n                        }}\r\n                    ]}\r\n                    dataset={dataset}\r\n                    equations={getEquations(iv, dv, read, write).map((e, i) => {\r\n                        return {eq: e, color: dvs[i], name: dvs[i]}\r\n                    })}\r\n                />,\r\n                getGradient?<Dialogue {...getPar(settings, viewProps, makeChange, `getGradient-${iv}`)}\r\n                compact minHeight=\"200px\"\r\n                dialogue={getGradientDg} \r\n                onExit={(id, write)=>{\r\n               \r\n                        let actions = [{type: 'set', path: 'temp.points', value: []}, \r\n                            {type: 'set', path: 'temp.getGradient', value: false}];\r\n                    if(write.temp.gradient || write.temp.gradient === 0){\r\n                        let dataGradient = write.temp.dataGradient;\r\n                        let score = scoreDistance(dataGradient, 3, write.temp.gradient);\r\n                        let rounded = Math.ceil(score*100);\r\n                        actions.push({type: 'merge', path: `models.${dv}`, value: {[iv]: roundTo(write.temp.gradient, 2)}});\r\n                        actions.push( {type: 'merge', path: `values.${iv}-${dv}`, value: {...ivValue, value: roundTo(write.temp.gradient, 2)}});\r\n                        actions.push( {type: 'merge', path: `values.${iv}-${dv}`, value: {...ivValue, value: roundTo(write.temp.gradient, 2)}});\r\n                        actions.push(  MCQ(keys.acGameMCQ, 'gradient-correlation', null, rounded));\r\n                    }\r\n                    makeChange(id, actions);\r\n                }}\r\n                write={write}\r\n                read={read}\r\n                merge={get(`temp.points`, read, write, null)?\r\n                    [{type: 'set', path: 'temp.points', value:get(`temp.points`, read, write, null)}]:null}\r\n                addons={getGradientDg.push(dataset.data, iv, dv, get(`temp.forDialogue`, read, write, {}))} \r\n                />:null\r\n            ],\r\n            choice: {options: [\r\n                !getGradient?<Text text={\"get gradient\"} \r\n                out={[\r\n                    {type: 'set', path: 'temp.getGradient', value: true}\r\n                ]} \r\n                />:null,\r\n                isInSystem?<Text text={\"Actually I don't think these are related\"} \r\n                out={[\r\n                    ...dvs.map(e => {\r\n                        return {type: 'set', path: `models.${e}.${iv}`, value: 0}\r\n                    }),\r\n                    ...dvs.map(e => {\r\n                        return {type: 'set', path: `changes`, value: {[`models.${e}.${iv}`]: 0}}\r\n                    })\r\n                ]} \r\n                />:null,\r\n                <Text text={\"back\"} \r\n                out={[\r\n                    {type: 'set', path: 'temp.dv', value: DELETED}\r\n                ]} \r\n                />]\r\n            },\r\n        })\r\n    }else{\r\n        let unlockedIvs = get(`meta.unlockedIvs`, read, write,  []);\r\n        let isUnlocked = unlockedIvs.indexOf(iv) > -1;\r\n        return Scene(`${iv}`, {settings, viewProps, makeChange, text: [\r\n            {text: `Independent Variable: ${iv}`, tag: \"h2\", className: 'block'},\r\n            ...getTextVariableObservation(iv, dv, isUnlocked, read, write, flags),\r\n            ...getEquations(iv, null, read, write).map(e => {return {latex: e.latex, className: 'block', block:true}})\r\n        ],\r\n            extras: isUnlocked?[\r\n                <Slider key={`${iv}-slider`} id={`${iv}-slider`} text={`${iv} (${ivValue.unit})`} \r\n                    min={ivValue.min} max={ivValue.max} step={0.1} value={ivValue.value || 0}\r\n                    onInput={(id, val) => {\r\n                        //if its the gradients, must be stored in model\r\n                        //`${k}-${c}`\r\n                        makeChange(id, [\r\n                            {type: 'merge', path: `values.${iv}`, value: {...ivValue, value: roundTo(val, 2)}}\r\n                        ])\r\n                    }}\r\n                />,\r\n            ]:null,\r\n            choice: {options: [\r\n                ...isUnlocked?dvs.map(dv => {\r\n                    return <Text text={dv} out={{type: 'set', path: 'temp.dv', value: dv}} />\r\n                }):[],\r\n                <Text text={\"back\"} \r\n                out={[\r\n                    {type: 'set', path: 'move', value: {location: returnNode}}\r\n                ]} \r\n                />]\r\n            },\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport function getLhsPuzzleView(out, read, write, makeChange, settings, viewProps){\r\n            let dvs = get('meta.dvs', read, write, [], true);\r\n            let values = get(`values`, read, write, null, true);\r\n            let userLhs = get(`values.${keys.vLhs}`, read, write, {}, true);\r\n            let {max, min} = userLhs;\r\n            let value = get(`values.${keys.vLhs}.value`, read, write, null, true);\r\n            let gameAnswer = get(`meta.${keys.vLhs}`, read, write, null, true);\r\n          \r\n            let add = Math.ceil(Math.random()*30) + 10;\r\n            let mult = Math.ceil(Math.random()*4)*2  + 2;\r\n            let result = roundTo((gameAnswer/mult)+add, 1);\r\n            let eq = `x = (z-${add})*${mult}`;\r\n            let latex = toLatex(eq);\r\n            let riddle = latex.replace('z', result);\r\n            log(`tree node lhsRiddle, gameAnswer ${gameAnswer} userAnswer ${value} \r\n                answerMin ${min} answerMax ${max}\r\n                result ${result} eq ${eq} riddle ${riddle} values`, values);\r\n            let texts = [{text: 'The poem says', className:'block'},\r\n            {text: `again all will be right`, className:'block', color: 'secondary'},\r\n            {text: `when x is equal to the light`, className:'block', color: 'secondary'}];\r\n            return Scene('lhsRiddle-unsolved', {\r\n                settings, viewProps, makeChange, \r\n                text: [\r\n                ...texts, \r\n                {latex: riddle, className: 'block'},\r\n                (value || value === 0)?{text: `I answered ${value}`}:null\r\n                ],\r\n                extras: [\r\n                    <Slider {...getPar(settings, viewProps, makeChange, 'lhsRiddle-unsolved-slider')}\r\n                        min={min} max={max} \r\n                        value={value || ((max - min)/2 + min)}\r\n                        onInput={(id, val)=>{\r\n                            //record answer, save answer \r\n                            let lhscore = scoreDistance(gameAnswer, (max- min)/2, val)*100;\r\n                            log(`tree node lhsRiddle score ${lhscore}`);\r\n                            makeChange(id, [\r\n                                {type: 'set', path: `values.${keys.vLhs}`, value: {...userLhs, value: val}},\r\n                                MCQ(keys.acGameMCQ, 'lhs-arithmetic-riddle', `${gameAnswer}`, lhscore),\r\n                                out\r\n                            ])\r\n                        }}\r\n                    />\r\n                ],\r\n                choice: {options: [<Text id=\"lhsRiddleack\" text={\"next\"}  out={out} /> ]\r\n                },\r\n            })          \r\n}","import React from 'react';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Dialogue from 'game/Views/Dialogue/Dialogue.js';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport Choice from 'views/Choices/v1/Choices';\r\nimport Graph from 'game/Views/Graph/Raw/index';\r\nimport {log} from 'utilities/Measure.js';\r\nimport Slider from 'views/Slider/v1/Slider.js';\r\nimport Select from 'views/Select/v2/Select';\r\nimport functions from './functions';\r\nimport {getLhsPuzzleView, getEquations, correlationView} from './scenes.js';\r\nimport {animations, keys as animKeys} from 'animations';\r\nimport keys from './keys';\r\nimport simulation from './sim.js';\r\nimport {markMCQs, getEqSide, mixAndMatch, getRandomIndex, \r\n        getImg, getPar, listToEnglish,roundTo} from 'utilities/Format.js';\r\nimport {transformData, getVariables, subMathEq, simplify, execute, toLatex, operate, EQLR, \r\n    solveEquations, getRegressionSlope, buildLinearEquations,\r\n    getDataMinMax} from 'utilities/Game/MathFun.js';\r\nimport {scoreDistance} from 'utilities/Game/Scoring.js';\r\nimport {Expression, MathUpdate} from 'utilities/Game/MathExpression.js';\r\nimport {MCQ, GameInstance} from 'utilities/Create.js';\r\nimport {get, DELETED} from 'utilities/Merge';\r\nimport {getRoomEffectText, getRoomText, getTextVariableObservation, getHubRiddle, getHubLightText, \r\n    getIVChangeText, getBrokenDoorText, getVariableText} from './texts';\r\nimport LinearSystemSolver from 'game/Views/MathTools/LinearSystemSolver/index';\r\nimport {checkFlags} from './flags';\r\nimport { user } from 'firebase-functions/lib/providers/auth';\r\nimport {getDgByState, dgIntro,  getGradientDg, dgHallway, dgPhoneCall, dgMirror} from './dialogues';\r\n\r\n\r\n\r\n\r\nvar o = {\r\n    //n keys must match k values\r\n    sim: simulation,\r\n    n: {},\r\n    k: keys,\r\n    checkFlags,\r\n    trigger: (state, methods) => {\r\n        //occurs after input integration into state\r\n        //occurs before sim call, can be overridden by sim\r\n        //a series of checks that determine if a scene will occur\r\n        let score = 0; //if a check passes, and its score is higher than whatever the current scene is, it replaces it\r\n        let changes = {}; //scale 1 to 5 in priority, is never equal check, as order determines priority of equals\r\n        return changes;\r\n    },\r\n    ['trees']: { \r\n        ['intro']: function(read, settings, viewProps){\r\n            return {node: 'intro', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, `intro-dialogue`)}\r\n                                    dialogue={dgIntro} \r\n                                    move='hub'\r\n                                    write={write}\r\n                                    read={read}\r\n                                />\r\n                }\r\n            }\r\n        },\r\n        ['hub']: function(read, settings, viewProps){\r\n            return {node: 'hub', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    let error = get(`temp.solveError`, read, write,  null);\r\n                    let score = get(`values.${keys.vScore}`, read, write,  {}).value;\r\n                    let lhs = get(`values.${keys.vLhs}`, read, write,  {value: null}).value;\r\n                    let dvs = get(`meta.dvs`, read, write,  []);\r\n                    let unlockedIvs = get(`meta.unlockedIvs`, read, write,  []);\r\n                    //let lhs =10;\r\n                    let eqs = getEquations(null, null, read, write, viewProps);\r\n                    eqs = eqs.map((eq,i) => {\r\n                        return {eq: `${dvs[i]} light: ${eq.eq}`, latex: `${dvs[i]}: ${eq.latex}`};\r\n                    })\r\n                    let roomText = getRoomText(read, write);\r\n                    return Scene('hub', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                        {text: \"My Room\", tag: \"h2\", className: 'block'},\r\n                        ...roomText,\r\n                        ...getHubLightText(lhs, unlockedIvs),\r\n                        error?{ text: error, color: 'orange', className: 'block'}:null,\r\n                        //...getHubRiddle(dvs, lhs),\r\n                        { text: 'Your equations:',  className: 'block'},\r\n                            ...eqs.map(e => {return {latex: e.latex, block: true, className: 'block', block:true}})\r\n                        ],\r\n                        choice: {options: [ //bedroomExit bathroom\r\n                            <Text text={\"Go to your wardrobe\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'wardrobe'}}\r\n                            ]} />,\r\n                            <Text text={\"Go to your desk\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'desk'}}\r\n                            ]} />,\r\n                            <Text text={\"Go back to your bathroom\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'bathroom'}}\r\n                            ]} />,\r\n                            <Text text={\"Go to the broken bedroom door\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'bedroomExit'}}\r\n                            ]} />,\r\n                            <Text text={\"Look at the poem\"} \r\n                            out={[\r\n                                {type: 'set', path: 'meta.lhsRiddle', value: 'hub'},\r\n                                {type: 'set', path: 'move', value: {location: 'lhsRiddle'}}\r\n                            ]} />,\r\n                            ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['loop']: function(read, settings, viewProps){\r\n            return {node: 'loop', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    //the loop should display any triggered dialogues\r\n                    //they are triggered by state\r\n                    //read.sentHash !== read.recievedHash\r\n                    log(`tree node loop read`, read);\r\n                    if(read.sentHash !== read.recievedHash){\r\n                        return Scene('loopWait', {\r\n                            settings, viewProps, makeChange, \r\n                            text: 'Waiting for results...'\r\n                        })\r\n                    }else{\r\n                        let dialogue = getDgByState(read, write);\r\n                        if(dialogue){\r\n                            return <Dialogue {...getPar(settings, viewProps, makeChange, dialogue.key)}\r\n                                        dialogue={dialogue} \r\n                                        move='hub'\r\n                                        write={write}\r\n                                        read={read}\r\n                                        onExit={(id, val)=>{\r\n                                            // makeChange(id, [\r\n                                            //     {type: 'set', path: 'move', value: {location: 'hub'}},\r\n                                            //     {type: 'set', path: `flags.${dialogue.key}`, value: true},\r\n                                            //     //...dialogue.changes,\r\n                                            // ]);\r\n                                            return [\r\n                                                {type: 'set', path: 'move', value: {location: 'hub'}},\r\n                                                {type: 'set', path: `flags.${dialogue.key}`, value: true}\r\n                                            ]\r\n                                        }}\r\n                                        addons={dialogue.pull?dialogue.pull(read, write):null}\r\n                                    />\r\n                        }else{\r\n                            //describe the room at a glance\r\n                            return Scene('loop', {settings, viewProps, makeChange, \r\n                                text: [{text: 'Loop', color: 'pink'}],\r\n                                choice: {options: [<Text id=\"loop\" text={\"next\"} \r\n                                    out={[\r\n                                        {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                                    ]} />]\r\n                                },\r\n                            })\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        },\r\n        ['solve']: function(read, settings, viewProps){\r\n            return {node: 'solve', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    log(`tree solve settings`, settings);\r\n                    log(`tree solve read`, read);\r\n                    log(`tree solve write`, write);\r\n                    let dvs = get(`meta.dvs`, read, write,  [], true);\r\n                    let model = get(`models`, read, write,  {}, true);\r\n                    let lhs = get(`values.${keys.vLhs}`, read, write,  {value: null}).value;\r\n                    let values = get(`values`, read, write,  {}, true);\r\n                    if(!(lhs || lhs === 0)){\r\n                        error = [\r\n                            {text: `The left hand side must equal something before the system can be solved`, color: 'red'},\r\n                            {text: `Look around to find the value of the left hand side of the equation`, color: 'red'},\r\n                        ];\r\n                    }\r\n                    let solution = get(`temp.solution`, read, write,  null);\r\n               \r\n                    let updated = get(`temp.updated`, read, write,  false);\r\n                    let eqs = getEquations(null, null, read, write, viewProps);\r\n                    log(`tree solve eqs`, eqs);\r\n                    let error, system, solutionText = '', solutionKeys;\r\n                    if(settings.difficulty === 1 && !solution && !error && (lhs || lhs === 0)){ //auto solve on easy mode\r\n                        \r\n                        system = eqs.map(e => e.eq);\r\n                        log(`tree solve solving system`, system);\r\n                        try{\r\n                            solution = solveEquations(system);\r\n                            solutionKeys = Object.keys(solution);\r\n                            log(`tree solve solveEquations solution`, solution);\r\n                            \r\n                            solutionText = `If your equations are right, then ` + listToEnglish(solutionKeys.map((e, i) => {\r\n                                return  `${e} needs to equal ${roundTo(solution[e], 2)}`\r\n                            })) + ` to get the lights to the right value.`;\r\n                        }catch(e){\r\n                            log(`tree solve solveEquations error`, e);\r\n                            solution = null;\r\n                            error = [\r\n                                {text: `Unable to solve system in its current state`, color: 'red', className:'text-center block'},\r\n                                {text: `Here is a tutorial on how to build and solve systems of linear equations`, \r\n                                        leave: true, \r\n                                        href:\"https://www.khanacademy.org/test-prep/sat/sat-math-practice/new-sat-heart-of-algebra/v/sat-math-h7-harder\", \r\n                                        className:'text-center block'},\r\n                            ]\r\n                        }\r\n                    }\r\n                    //if temp.solution, show text to update room state\r\n                    log(`tree solve rendering, error ${error}`);\r\n                    \r\n                    const sliderInput = (id, val) => {\r\n                        makeChange('solveSlider', {type: 'merge', path: `values.${id}`, value: {value: val}})\r\n                    }\r\n                    if(error){\r\n                        return Scene('solve-solution', {\r\n                            settings, viewProps, makeChange,\r\n                            text: [\r\n                                {text: \"Solve the Equations\", tag: \"h2\", className: 'block'},\r\n                                ...error,\r\n                                ...eqs.map(e => {return {latex: e.latex, block: true, \r\n                                        className: 'block'}})\r\n                            ],\r\n                            choice: {\r\n                                options: [\r\n                                    <Text text={\"back\"} \r\n                                        out={[\r\n                                            {type: 'set', path: 'move', value: {location: 'bedroomExit'}}\r\n                                        ]} />,\r\n                                ]\r\n                            }\r\n                        })\r\n                    }else if(solution){\r\n                        let str = '';\r\n                        let counter = 0;\r\n                        let values = get(`values`, read, write,  {}, true);\r\n                        log(`tree solve current values`, values);\r\n                        log(`tree solve current solutionKeys`, solutionKeys);\r\n                        let ivs = [];\r\n                        let currentState = 'currently, the independent variable values are: ';\r\n                        let v = 0;\r\n                        for(let k in solution){\r\n                            if(counter > 0){\r\n                                str += ', ';\r\n                                currentState += ', ';\r\n                            }\r\n                            v = roundTo(solution[k], 2);\r\n                            str += `${k} = ${v}`;\r\n                            currentState += `${k} = ${values[k].value}`;\r\n                            ivs.push(<Text text={`Set ${k} to ${v}`} \r\n                                out={{type: 'merge', path: `values.${k}`, value: {value: v}}}\r\n                            />)\r\n                            counter++;\r\n                        }\r\n                        return Scene('solve-solution', {\r\n                            settings, viewProps, makeChange,\r\n                            text: [{text: 'Auto solved', className: 'block'}, \r\n                                    ...eqs.map(e => {return {latex: e.latex, block: true, className: 'block'}}),\r\n                                    solutionText\r\n                                    // {text: 'The solutions are ' + str}, \r\n                                    // updated?{text:'values updated', className:'block text-left'}:null\r\n                            ],\r\n                            extras:[\r\n                                // <Text text={currentState} />,\r\n                                // <Choice text={currentState} \r\n                                //     {...getPar(settings, viewProps, makeChange, 'solve-ivs-choice')}\r\n                                //     choices={ivs} \r\n                                // />\r\n                                ...solutionKeys.map(k => {\r\n                                    return <Slider \r\n                                        id={k}\r\n                                        value={values[k].value}\r\n                                        min={-100}\r\n                                        max={100}\r\n                                        step={0.1}\r\n                                        text={`value of ${k}`}\r\n                                        onInput={sliderInput}\r\n                                    />\r\n                                })\r\n                            ],\r\n                            choice: {\r\n                                options: [\r\n                                    <Text text={\"back\"} \r\n                                        out={[\r\n                                            {type: 'set', path: 'move', value: {location: 'bedroomExit'}}\r\n                                        ]} />,\r\n                                    // <Text text={\"loop\"} \r\n                                    //     out={[\r\n                                    //         {type: 'set', path: 'move', value: {location: 'loop'}}\r\n                                    //     ]} />,\r\n                                ]\r\n                            }\r\n                        })\r\n                    }else if(updated){\r\n                        return Scene('solve-updated', {\r\n                            settings, viewProps, makeChange,\r\n                            text: [\r\n                                {text: \"The room has been updated, hopefully those solutions are right.\", className: 'block'},\r\n                            ],\r\n                            choice: {\r\n                                options: [\r\n                                    <Text text={\"back\"} \r\n                                        out={[\r\n                                            {type: 'set', path: 'move', value: {location: 'bedroomExit'}}\r\n                                        ]} />,\r\n                                ]\r\n                            }\r\n                        })\r\n                    }else{\r\n                        const updateValues = (solVal) => {\r\n                            let a = [];\r\n                            for(let k in solVal){\r\n                                a.push({type: 'set', path: `values.${k}.value`, value: roundTo(solVal[k], 2)})\r\n                            }\r\n                            return a;\r\n                        }\r\n                        return Scene('solve-ui', {settings, viewProps, makeChange,\r\n                            extras: [\r\n                                <LinearSystemSolver id=\"hub-solver\" \r\n                                    onInput={(id, values) => {\r\n                                        log(`tree solve linearsystemsolver answer`, values)\r\n                                        //if error, solveError, if solution .solution\r\n                                        makeChange('solution-update', \r\n                                            [{type: 'set', path: 'temp.updated', value: true}, \r\n                                            ...updateValues(values)]);\r\n                                    }}\r\n                                    lhs={dvs.map(dv => lhs)}\r\n                                    coefficients={model}\r\n                                />\r\n                            ],\r\n                            choice: {options: [\r\n                                <Text text={\"back\"} \r\n                                out={[\r\n                                    {type: 'set', path: 'move', value: {location: 'bedroomExit'}}\r\n                                ]} />,\r\n                                ]\r\n                            },\r\n                        })\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n        ['bedroomExit']: function(read, settings, viewProps){\r\n            return {node: 'bedroomExit', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    let score = get('values.score.value', read, write, 0, true);\r\n                    let lhs = get(`values.${keys.vLhs}.value`, read, write, null, true);\r\n                    let values = get('values', read, write, 0, true);\r\n                    values = functions.mapSimValues(values);\r\n                    let dvs = get('meta.dvs', read, write, [], true);\r\n                    let eqs = getEquations(null, null, read, write);\r\n                    let dvsValues = dvs.map(e => {\r\n                        return functions.calculateLinearEquation(e, values);\r\n                    })\r\n                    return Scene('bedroomExit', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                            {text: \"Broken Bedroom Exit\", tag: \"h2\", className: 'block'},\r\n                            ...getBrokenDoorText(read, write),\r\n                            ...eqs.map(e => {return {latex: e.latex, block: true, className: 'block'}}),\r\n                            {text: \"Currently the equations equal\", className: 'block'},\r\n                            ...dvsValues.map((e, i) => {\r\n                                if(isNaN(e)){\r\n                                    return {text: `${dvs[i]} = nothing` , className: 'block'};\r\n                                }else{\r\n                                    return {text: `${dvs[i]} = ${lhs}` , className: 'block'}\r\n                                }\r\n                            }),\r\n                            {text: `All the equations need to equal ${lhs || lhs === 0?lhs:' that poem.'}. \r\n                            You can change the equations by changing the gradients of the variables around the room.`, className: 'block'}\r\n                        ],\r\n                        choice: {options: [\r\n                            score < 0.99?<Text text={\"Drop down into bathroom\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'loop'}}\r\n                            ]} />:null,\r\n                            <Text text={score < 0.99?\"Crawl up into hallway\":\"Walk into hallway\"} \r\n                                out={[\r\n                                    {type: 'set', path: 'move', value: {location: score < 0.99?'warning':'hallway'}}\r\n                                ]} />,\r\n                            <Text text={\"solve equations\"} \r\n                                out={[\r\n                                    {type: 'set', path: 'move', value: {location: 'solve'}}\r\n                                ]} />,\r\n                            <Text text={\"Look at the poem\"} \r\n                                out={[\r\n                                    {type: 'set', path: 'meta.lhsRiddle', value: 'bedroomExit'},\r\n                                    {type: 'set', path: 'move', value: {location: 'lhsRiddle'}}\r\n                                ]} />,\r\n                            <Text text={\"back\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                            ]} />,\r\n                            ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['lhsRiddle']:function(read, settings, viewProps){\r\n            return {node: 'lhsRiddle', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    let returnLocation = get(`meta.lhsRiddle`, read, write, 'hub', true);\r\n                    return getLhsPuzzleView({type: 'set', path: 'move', value: {location: returnLocation}}, \r\n                        read, write, makeChange, settings, viewProps);\r\n                }\r\n            }\r\n        },\r\n        ['desk']: function(read, settings, viewProps){\r\n            return {node: 'desk', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    log(`tree node desk read`, read);\r\n                    return Scene('desk', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [{text: `The desk is an embarassing mess.`, className: 'block'},\r\n                        {text: `You have tried cleaning it, but it returns to this state when you loop.`, className: 'block'},\r\n                        {text: `On the desk there is a phone, a music player, a lamp, a teapot and some pens.`, className: 'block'}],\r\n                        choice: {options: [\r\n                        <Text id=\"wd\" text={\"Look at the phone\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'phone'}}\r\n                            ]} />,\r\n                        <Text id=\"wd\" text={\"Look at music player\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'music'}}\r\n                            ]} />,\r\n                        <Text id=\"tp\" text={\"Look at lamp\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'lamp'}}\r\n                            ]} />,\r\n                        <Text id=\"tp\" text={\"Look at teapot\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'teapot'}}\r\n                            ]} />,\r\n                        <Text id=\"gb\" text={\"back\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                            ]} />\r\n                        ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['phone']:function(read, settings, viewProps){\r\n            return {node: 'phone', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return Scene('phone', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                        {text: \"Your Phone\", tag: \"h2\", className: 'block'},\r\n                        {text: `When the looping began, the phone was the first thing you tried to use.`, className: 'block'},\r\n                        {text: `You tried to call for help, but it has no reception.`, className: 'block'},\r\n                    ],\r\n                        choice: {options: [\r\n                            <Text id=\"phone-t2\" text={\"Look at contacts\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'phoneContacts'}}\r\n                            ]} />,\r\n                        <Text id=\"phone-t1\" text={\"back\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'desk'}}\r\n                            ]} />,\r\n                        ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['phoneContacts']: function(read, settings, viewProps){\r\n            return {node: 'phoneContacts', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return Scene('phoneContacts', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                        {text: \"Your Contacts\", tag: \"h2\", className: 'block'},\r\n                        {text: `You usually have hundreds of contacts that you've picked up over the years.`, className: 'block'},\r\n                        {text: `Now, there are less than a dozen. Their icons are missing, and strange characters \r\n                        appear where their names and numbers should be.`, className: 'block'},\r\n                        {text: `Except for one. It's a number you don't recognize. \r\n                            It's 2424 3535 4646. It has no message history with you.`, className: 'block'},\r\n                    ],\r\n                        choice: {options: [\r\n                            <Text id=\"phoneContacts-t2\" text={\"Call the number\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'phoneCall'}}\r\n                            ]} />,\r\n                        <Text id=\"phoneContacts-t1\" text={\"back\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'desk'}}\r\n                            ]} />,\r\n                        ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['phoneCall']:function(read, settings, viewProps){\r\n            return {node: 'phoneCall', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, `phoneCall`)}\r\n                                    dialogue={dgPhoneCall} \r\n                                    onExit={(id, val)=>{\r\n                                        let actions = [\r\n                                            {type: 'set', path: 'move', value: {location: 'desk'}},\r\n                                            {type: 'set', path: `flags.${dgPhoneCall.key}`, value: true},\r\n                                        ];\r\n                                        if(val.models){ //user used the help line\r\n                                            actions.push({type: 'set', path: 'meta.unlockedIvs', value: val.unlockedIvs})\r\n                                            actions.push( {type: 'set', path: 'models', value: val.models});\r\n                                         //   actions.push( {type: 'merge', path: 'values', value: val.values});\r\n                                            actions.push( {type: 'merge', path: 'flags', value: val.flags});\r\n                                        }\r\n                                       /// makeChange(id, actions);\r\n                                       return actions;\r\n                                    }}\r\n                                    write={write}\r\n                                    read={read}\r\n                                />\r\n                }\r\n            }\r\n        },\r\n        ['music']: function(read, settings, viewProps){\r\n            return {node: 'music', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return correlationView(keys.vMv, 'desk',  read, write, makeChange, settings, viewProps)\r\n                }\r\n            }\r\n        },\r\n        ['lamp']: function(read, settings, viewProps){\r\n            return {node: 'music', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return correlationView(keys.vLl, 'desk',  read, write, makeChange, settings, viewProps)\r\n                }\r\n            }\r\n        },\r\n        ['teapot']: function(read, settings, viewProps){\r\n            return {node: 'teapot', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return Scene('teapot', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                        {text: \"Teapot\", tag: \"h2\", className: 'block'},\r\n                        ...getRoomEffectText('teapot', read, write)],\r\n                        choice: {options: [\r\n                        <Text id=\"teapot-t1\" text={\"back\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'desk'}}\r\n                            ]} />,\r\n                        ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['bathroom']: function(read, settings, viewProps){\r\n            return {node: 'bathroom', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return Scene('bathroom', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                            {text: \"My Bathroom\", tag: \"h2\", className: 'block'},\r\n                            {text: `The shower head is dripping rapidly. The water is pooling in the recess.`},\r\n                            {text: `From this direction, the broken door just connects smoothly to the entrance of my room.`}],\r\n                        choice: {options: [\r\n                        <Text id=\"wd\" text={\"Look at the mirror\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'mirror'}}\r\n                            ]} />,\r\n                        <Text id=\"wd\" text={\"Look at the shower\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'shower'}}\r\n                            ]} />,\r\n                        <Text id=\"gb\" text={\"Go through to the room\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                            ]} />\r\n                        ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        //dgMirror\r\n        ['mirror']: function(read, settings, viewProps){\r\n            return {node: 'mirror', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                        return <Dialogue {...getPar(settings, viewProps, makeChange, `mirror`)}\r\n                                    dialogue={dgMirror} \r\n                                    move=\"bathroom\"\r\n                                    write={write}\r\n                                    read={read}\r\n                                    addons={dgMirror.pull(read, write)}\r\n                                />\r\n                }\r\n            }\r\n        },\r\n        ['shower']: function(read, settings, viewProps){\r\n            return {node: 'shower', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return correlationView(keys.vSd, 'bathroom',  read, write, \r\n                    makeChange, settings, viewProps)\r\n                }\r\n            }\r\n        },\r\n        ['wardrobe']: function(read, settings, viewProps){\r\n            return {node: 'wardrobe', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return Scene('wardrobe', {\r\n                        settings, viewProps, makeChange,\r\n                        text: [{text: `There is smoke billowing out of the wardrobe door, though it never seems to accumulate in the room. Its slightly ajar.\r\n                        There's a height chart beside it. `, color: 'pink'}],\r\n                        choice: {options: [\r\n                        <Text id=\"wd\" text={\"Look at wardrobe door\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'wardrobeDoor'}}\r\n                            ]} />,\r\n                        <Text id=\"wd\" text={\"Look at fan dial\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'fanDial'}}\r\n                            ]} />,\r\n                        <Text id=\"hc\" text={\"Look at the height chart\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'heightChart'}}\r\n                            ]} />,\r\n                        <Text id=\"gb\" text={\"Go back\"} \r\n                            out={[\r\n                                {type: 'set', path: 'move', value: {location: 'hub'}}\r\n                            ]} />\r\n                        ]\r\n                        },\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['fanDial']: function(read, settings, viewProps){\r\n            return {node: 'fanDial', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return correlationView(keys.vFd, 'wardrobe', read, write, makeChange, settings, viewProps)\r\n                }\r\n            }\r\n        },\r\n        ['wardrobeDoor']: function(read, settings, viewProps){\r\n            return {node: 'wardrobeDoor', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return correlationView(keys.vDw, 'wardrobe', read, write, makeChange, settings, viewProps)\r\n                }\r\n            }\r\n        },\r\n        ['heightChart']: function(read, settings, viewProps){\r\n            return {node: 'heightChart', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return correlationView(keys.vHc, 'wardrobe', read, write, makeChange, settings, viewProps)\r\n                }\r\n            }\r\n        },\r\n        ['warning']: function(read, settings, viewProps){\r\n            return {node: 'warning', label: keys.aclocStory,\r\n               // out: () => {return {gameover:true}},\r\n                view: (write, makeChange) => {\r\n                    return Scene(\"warning\", {\r\n                        settings, viewProps, makeChange,\r\n                        text: [`The hallway looks as broken as your room.`, \r\n                        {text: `You have a bad feeling that once you leave, the changes will be permanent. \r\n                                You need to make sure you have it right.`, color: 'orange', className: 'block'}],\r\n                        choice: {options: [\r\n                        <Text text={'enter hallway'} \r\n                                    out={[\r\n                                        {type: 'set', path:'move', value: {location: 'hallway'}}\r\n                                    ]} \r\n                        />,\r\n                        <Text text={'back to bedroom'} \r\n                                    out={[\r\n                                        {type: 'set', path:'move', value: {location: 'bedroomExit'}}\r\n                                    ]} \r\n                        />\r\n                    ]}\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['hallway']: function(read, settings, viewProps){\r\n            return {node: 'hallway', label: keys.aclocStory,\r\n               // out: () => {return {gameover:true}},\r\n                view: (write, makeChange) => {\r\n                    return <Dialogue {...getPar(settings, viewProps, makeChange, 'hallway')}\r\n                            dialogue={dgHallway} \r\n                            onExit={()=>{\r\n                                // makeChange('hallway', [\r\n                                //     {type: 'set', path:'move', value: {location: 'intro'}},\r\n                                //     {type: 'set', path: 'meta.gameover', value: true}\r\n                                // ])\r\n                                return [\r\n                                    {type: 'set', path:'move', value: {location: 'intro'}},\r\n                                    {type: 'set', path: 'meta.gameover', value: true}\r\n                                ]\r\n                            }}\r\n                            write={write}\r\n                            read={read}\r\n                            addons={dgHallway.pull(read, write)}\r\n                        />\r\n                }\r\n            }\r\n        },\r\n        // ['endgame']: function(read, settings, viewProps){\r\n        //     return {node: 'endgame', label: keys.aclocStory,\r\n        //        // out: () => {return {gameover:true}},\r\n        //         view: (write, makeChange) => {\r\n        //             return Scene(\"endgame\", {\r\n        //                 settings, viewProps, makeChange,\r\n        //                 text: [`Waiting for results`],\r\n        //                 choice: {options: [<Text text={'next'} \r\n        //                             out={[\r\n        //                                 {type: 'set', path:'move', value: {location: 'intro'}},\r\n        //                                 {type: 'set', path: 'meta.gameover', value: true}\r\n        //                             ]} \r\n        //                 />]}\r\n        //             })\r\n        //         }\r\n        //     }\r\n        // },\r\n    },\r\n}\r\n\r\nconst output = o;\r\nexport default output;","\r\nvar keys = require('./keys');\r\nvar functions = require('./functions');\r\n\r\nconst allIvs = {\r\n    //keys.vHc, keys.vGp, keys.vDw, keys,vMv, keys.vLi, keys.vSd,keys.vFd, vLl\r\n    [keys.vHc]: true,\r\n    [keys.vGp]: true,\r\n    [keys.vDw]: true,\r\n    [keys.vMv]: true,\r\n    [keys.vLl]: true,\r\n    [keys.vSd]: true,\r\n    [keys.vFd]: true\r\n};\r\nconst unlockIvs = {\r\n    1: 2,\r\n    2: 4,\r\n    3: 10,\r\n    4: 20\r\n}\r\nconst countDifferences = (set1, set2, ks) => {\r\n    let keys = ks || Object.keys(set1);\r\n    let counter = 0;\r\n    keys.map(k => {\r\n        if(set1[k] !== set2[k]){\r\n           // console.log(`getDgByState checkFlags countDifferences k ${k} s1 ${set1[k]} s2 ${set2[k]}`);\r\n            counter++;\r\n        }\r\n    });\r\n    return counter;\r\n}\r\n\r\nconst incrementFlag = (src, flag) => {\r\n    return src.hasOwnProperty(flag)? src[flag] + 1:1; //0 is the first time a scene type is triggered\r\n}\r\n\r\nconst LOGGING = true;\r\nconst log = (message, obj) => {\r\n    if(LOGGING) console.log(message, obj);\r\n}\r\n\r\nconst selectSubset = (src, dest, blacklist, count, shuffle) => {\r\n    let dSet = new Set(Array.isArray(dest)?dest:Object.keys(dest));\r\n    let sSet = new Set(Array.isArray(src)?src:Object.keys(src));\r\n\r\n    blacklist.map(bl => {\r\n        sSet.delete(bl);\r\n    })\r\n    let sumSet = new Set([...dSet, ...sSet]);\r\n    let counter = sumSet.size < count?sumSet.size:count;\r\n    let keys = Array.from(sSet);\r\n    if(shuffle) keys = shuffle(keys);\r\n   \r\n    while(dSet.size < counter && keys.length > 0){\r\n        if(!dSet.has(keys[0])){\r\n            dSet.add(keys[0]);\r\n        }\r\n        keys = keys.slice(1);\r\n    }\r\n    return Array.from(dSet);\r\n}\r\n\r\nconst getUnlockCount = (unlockedIvs, activeIvs) => {\r\n    //get the subset of unlockedIvs that are active\r\n    let counter = 0;\r\n    unlockedIvs.map(e => {\r\n        if(activeIvs.indexOf(e) > -1){\r\n            counter++;\r\n        }\r\n    });\r\n    let f = (counter + 1)/activeIvs.length;\r\n    let c = Math.ceil(f*Object.keys(allIvs).length);\r\n    return c;\r\n}\r\n\r\n\r\nvar gameSim =  {\r\n    simInit: (settings, create, generate, format, math, score, iterators) => {\r\n    \r\n        let state = new create.GameInstance('intro');\r\n        state.sim.ranges = {};\r\n        state.sim.ranges[keys.vHc] = [0, 220];\r\n        state.sim.ranges[keys.vGp] = [0, 50];\r\n        state.sim.ranges[keys.vDw] = [0, 120];\r\n        state.sim.ranges[keys.vMv] = [0, 20];\r\n        state.sim.ranges[keys.vLl] = [0, 15];\r\n       // state.sim.ranges[keys.vL] = [0, 1000];\r\n        state.sim.ranges[keys.vSd] = [0, 10];\r\n        //state.sim.ranges[keys.vLhs] = [10, 100];\r\n        state.sim.ranges[keys.vFd] = [0, 3*Math.PI/4];\r\n        let lhsMin = 10, lhsMax = 100;\r\n\r\n        let solutionLhs = Math.ceil(generate.getRange(lhsMin, lhsMax));\r\n        \r\n        state.game.values[keys.vHc] = {value: generate.getRange(state.sim.ranges[keys.vHc][1], state.sim.ranges[keys.vHc][1]), \r\n                                unit: 'cm', max: state.sim.ranges[keys.vHc][1], min: state.sim.ranges[keys.vHc][0]};\r\n        state.game.values[keys.vGp] = {value: generate.getRange(state.sim.ranges[keys.vGp][0], state.sim.ranges[keys.vGp][1]), \r\n                                unit: 'cm', max: state.sim.ranges[keys.vGp][1], min: state.sim.ranges[keys.vGp][0]};\r\n        state.game.values[keys.vDw] = {value: generate.getRange(state.sim.ranges[keys.vDw][0], state.sim.ranges[keys.vDw][1]), \r\n                                unit: 'cm', max: state.sim.ranges[keys.vDw][1], min: state.sim.ranges[keys.vDw][0]};\r\n        state.game.values[keys.vMv] = {value: generate.getRange(state.sim.ranges[keys.vMv][0], state.sim.ranges[keys.vMv][1]), \r\n                                unit: 'decibels', max: state.sim.ranges[keys.vMv][1], min: state.sim.ranges[keys.vMv][0]};\r\n        state.game.values[keys.vLl] = {value: generate.getRange(state.sim.ranges[keys.vLl][0], state.sim.ranges[keys.vLl][1]), \r\n                                unit: 'watt', max: state.sim.ranges[keys.vLl][1], min: state.sim.ranges[keys.vLl][0]};\r\n        // state.game.values[keys.vL] = {value: 0, unit: 'watt', max: state.sim.ranges[keys.vL][1], min: state.sim.ranges[keys.vL][0]};\r\n        state.game.values[keys.vFd] = {value: generate.getRange(state.sim.ranges[keys.vFd][0], state.sim.ranges[keys.vFd][1]), \r\n                                unit: 'radians', max: state.sim.ranges[keys.vFd][1], min: state.sim.ranges[keys.vFd][0]};\r\n        state.game.values[keys.vSd] = {value: generate.getRange(state.sim.ranges[keys.vSd][0], state.sim.ranges[keys.vSd][1]), \r\n            unit: 'litres', max: state.sim.ranges[keys.vSd][1], min: state.sim.ranges[keys.vSd][0]};\r\n        state.game.values[keys.vScore] = {value: 0, max: 1, min:0};\r\n        state.game.values[keys.vLhs] = {value: 0, max: lhsMax, min:lhsMin};\r\n        //so it can be scores\r\n        state.game.values[keys.vL] = {value: 0};\r\n\r\n       \r\n\r\n        let difficulty = settings[keys.setDiff] > 3?3:2;\r\n        let ivs = [];\r\n        let randIndex = 0;\r\n        let allIvsKeys = Object.keys(allIvs);\r\n        let loopCounter = 0;\r\n        let dvs = [keys.vLr, keys.vLb];\r\n        if(difficulty > 2){\r\n            dvs.push(keys.vLg);\r\n        }\r\n        while(ivs.length < difficulty && loopCounter < 100){\r\n            randIndex = format.getRandomIndex(allIvsKeys.length);\r\n            if(ivs.indexOf(allIvsKeys[randIndex]) === -1){\r\n                ivs.push(allIvsKeys[randIndex]);\r\n            }\r\n            loopCounter++;\r\n        }\r\n        if(loopCounter > 100){\r\n            ivs = [keys.mMv, keys.vDw];\r\n        }\r\n      \r\n   \r\n        state.game.meta.allIvs = Object.keys(state.sim.ranges);\r\n        //difficulty determines number of ivs\r\n        state.game.meta.unlockedIvs = selectSubset(allIvs, [ivs[0]], ivs.slice(1), getUnlockCount([], ivs), format.shuf);\r\n\r\n        state.game.meta.dvs = dvs;\r\n        state.game.meta[keys.vLhs] = solutionLhs;\r\n        state.game.meta.correctIvs = ivs; //for hint line\r\n        state.sim.ivs = ivs;\r\n        state.sim.dvs = dvs;\r\n\r\n        let activeIvs = {};\r\n        let coefficientRanges = {};\r\n        ivs.map((e, i) => {\r\n            activeIvs[e] = state.sim.ranges[e];\r\n            //coefficientRanges[e] = [0, 1/(Math.pow((state.sim.ranges[e][1]-state.sim.ranges[e][0]), 1/4))*(1*i)]\r\n            coefficientRanges[e] = state.sim.ranges[e];\r\n            //coefficientRanges[e] = [0, 10]\r\n        })\r\n       \r\n        let lightCoefficients = {};\r\n        let minMaxRanges = {};\r\n        state.game.models = {};\r\n        let res =  functions.reverseCoefficients(solutionLhs, coefficientRanges, dvs, format.roundTo);\r\n        lightCoefficients = res.coefficients;\r\n        dvs.map(dv => {\r\n           \r\n           // lightCoefficients[dv] = math.generateCoefficients(coefficientRanges,true, format.roundTo);\r\n         //   simEqs.push(functions.buildLinearEquations(solutionLhs, lightCoefficients[dv]).eq);\r\n            minMaxRanges[dv] = functions.getCoefficientsRange(lightCoefficients[dv], activeIvs);\r\n            state.game.models[dv] = {}\r\n            //state.game.models;\r\n            \r\n        })\r\n\r\n        //state = functions.giveAnswer(state, res, 1, format.roundTo);\r\n        for(let k in res.solutions){\r\n            state.sim.model[k] = {value: res.solutions[k], range: Math.max(res.solutions[k]*0.1, 5), \r\n                description: `The solution for the variable ${k}`, name: `the ${k} solution`}\r\n            dvs.map(dv => {\r\n                state.sim.model[`${k}-${dv}`] = {\r\n                    value: res.coefficients[dv][k], range: 10,\r\n                    description: `The coefficient relating ${k} to ${dv}`, \r\n                    name: `the ${k}-${dv} light coefficient` \r\n                }\r\n            })\r\n        }\r\n        state.sim.ranges = {...state.sim.ranges, ...minMaxRanges};\r\n        state.sim.coefficients = lightCoefficients;\r\n        state.game.values.time =  {value: 1, unit:'days', min: 0, max:1000};\r\n      \r\n        state.game.data = {};\r\n\r\n        let dataset = create.Dataset(keys.vLr, {\r\n            [keys.vLr]: 'red light',\r\n            [keys.vLb]: 'blue light',\r\n        });\r\n\r\n        dataset.data = [];\r\n        let randVals;\r\n        let loopMax = 10;\r\n        for(let i = 0; i<loopMax;i++){\r\n            if(i < loopMax - 1){\r\n                randVals = math.randomizeValues(state.game.values);\r\n            }else{\r\n                randVals = state.game.values;\r\n            }\r\n            state.game.values[keys.vT].value = i;\r\n            randVals.time.value = i + 1;\r\n            dataset.data.push(\r\n                gameSim.data.lights(\r\n                    state.sim.coefficients, \r\n                    functions.mapSimValues(randVals), \r\n                    format, math\r\n                )\r\n            );\r\n        }\r\n        let lastDp = dataset.data[dataset.data.length - 1];\r\n        dvs.map(dv => {\r\n            state.game.values[dv] = {value: lastDp[dv], min: format.roundTo(minMaxRanges[dv][0], 2), \r\n                        max: format.roundTo(minMaxRanges[dv][1], 2), unit: 'watt'};\r\n            state.sim.model[dv] = {value: solutionLhs, range: 10, \r\n                description: `The user sum for ${dv} light`, name: `the ${dv} light sum`}\r\n        })\r\n\r\n        state.game.data = {\r\n            room: dataset\r\n        }\r\n  \r\n        state.sim.values = {\r\n            time: state.game.values.time,\r\n            [keys.vLhs]: {value: solutionLhs, min: 1, max: 100, unit: 'days'}\r\n        };\r\n   \r\n        return state;\r\n    },\r\n    loop: function(inputs, state, settings, create, generate, format, math, score, iterators){\r\n      \r\n        let change = {};\r\n        let ivs = state.sim.ivs;\r\n        let dvs = state.sim.dvs;\r\n        let time = state.sim.values.time.value + 1;\r\n        state.game.values.time.value = time;\r\n        let doorWardrobe = state.game.values[keys.vDw].value;\r\n        let data = state.game.data.room.data;\r\n        let flags = state.game.flags;\r\n        let unlockedIvs = state.game.meta.unlockedIvs;\r\n        // /calculateLinearEquation\r\n        let lights = state.sim.coefficients;\r\n       \r\n        let values = functions.mapSimValues(state.game.values);\r\n\r\n        let simModel = state.sim.coefficients;\r\n        let userModel = state.game.models;\r\n        let lhs = state.sim.values[keys.vLhs];\r\n        /**Get sum of user equation -> determines ending */\r\n\r\n        let simSol = state.sim.model;\r\n    \r\n        //scoring solutions\r\n        let solutionScores = ivs.map(iv => {\r\n            return score.scoreDistance( state.sim.model[iv].value,  10,  values[iv]);\r\n        })\r\n        let solutionScoresFinal = score.getFinalScore(solutionScores);\r\n        /**Score the Coefficients */\r\n        let simIv;\r\n        let coefficientScores = [];\r\n        dvs.map(dv => {\r\n            for(let iv in userModel[dv]){\r\n                simIv = simModel[dv][iv];\r\n                if(simIv){\r\n                    let cScore = format.roundTo(score.scoreDistance(simIv, 10, userModel[dv][iv]));\r\n                    if(cScore <= 0) change[`game.flags.badGradientAnswer`] = true;\r\n                    coefficientScores.push({key: `${iv}-${dv}`, score: cScore});\r\n                }\r\n            }\r\n        })\r\n        let coefficientScoresFinal = score.getFinalScore(coefficientScores);\r\n        /**Score the Equation Sums */\r\n        let equationSumScores = dvs.map(dv => {\r\n            let usV = functions.calculateLinearEquation(state.game.models[dv], values); //format.roundTo(functions.calculateLinearEquation(simModel[dv], values), 2);\r\n            change[`game.values.${dv}`] = {value: usV, min: 0, max: 1};\r\n            return score.scoreDistance(lhs.value, 10, usV);\r\n        })\r\n        let equationSumScoresFinal = score.getFinalScore(equationSumScores);\r\n        /**Score User */\r\n        let scores = [];\r\n        let unlockScores = []; //the score used to determine if more ivs should be unlocked\r\n\r\n        let simEq;\r\n        for(let simKey in simModel){\r\n            simEq = simModel[simKey]\r\n            for(let eqKey in simEq){\r\n                scores.push({score: score.scoreDistance(simEq[eqKey], 5, userModel[simKey][eqKey])})\r\n                if(unlockedIvs.indexOf(eqKey) > -1){ //if the user has access to the model part\r\n                    unlockScores.push({score: score.scoreDistance(simEq[eqKey], 5, userModel[simKey][eqKey])})\r\n                }\r\n            }\r\n        }\r\n       let simCoeffFinal = score.getFinalScore(scores);\r\n       let userCoeffFinal = score.getFinalScore(unlockScores);\r\n        if(userCoeffFinal > 0.5 && unlockedIvs.length < Object.keys(allIvs).length){\r\n            let toUnlock = getUnlockCount(unlockedIvs, ivs);\r\n            let nextUnlock; \r\n            let ivsIndex = 0;\r\n            ivs.map((e, i) => {\r\n                if(!nextUnlock && unlockedIvs.indexOf(e) === -1){\r\n                    nextUnlock = e;\r\n                    ivsIndex = i;\r\n                }\r\n            })\r\n            let unlockedMoreIvs = selectSubset(allIvs, [...unlockedIvs, nextUnlock], \r\n                   ivs.slice(ivsIndex + 1),\r\n                   toUnlock);\r\n            change[`game.meta.unlockedIvs`] = unlockedMoreIvs;\r\n            unlockedIvs = unlockedMoreIvs;\r\n        }\r\n\r\n        let dp = gameSim.data.lights(lights, values, format, math)\r\n        //let allIvs = state.game.meta.allIvs;\r\n\r\n        let differences = countDifferences(data[data.length - 1], dp, unlockedIvs);\r\n        change[`game.flags.changedMultipleVariables`] = differences;\r\n  \r\n        change[`game.values.time.value`] = time;\r\n        change[`game.values.${keys.vScore}.value`] = simCoeffFinal;\r\n        change[`sim.values.time.value`] = time;\r\n        change[`sim.values.red.value`] = dp.red;\r\n        change['sim.state.room'] = dp;\r\n        change[`game.data.room.data.${data.length}`] = dp; \r\n        return change;\r\n    },\r\n    ['data']:{\r\n        lights: function(lights, values, format, math){\r\n            let dp = {...values};\r\n            for(light in lights){\r\n                dp[light] = format.roundTo(functions.calculateLinearEquation(lights[light], values), 3)\r\n            }\r\n            return dp\r\n        },\r\n    },\r\n}\r\nmodule.exports = gameSim;\r\n\r\n"],"sourceRoot":""}