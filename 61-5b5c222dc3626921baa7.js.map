{"version":3,"sources":["webpack:///./src/games/TestTool/keys.js","webpack:///./src/games/TestTool/sim.js","webpack:///./src/games/TestTool/index.js"],"names":["DefaultKeys","require","keys","eqPyth","figureNames","module","exports","sim","simInit","settings","create","generate","format","math","state","GameInstance","scores","temperature","AssessmentScore","output","simulation","n","k","start","read","viewProps","node","label","aclocStory","view","write","makeChange","Scene","text","className","choice","options","out","type","path","value","location","aclocData","img","id","imageId","pose","convoId","textId","initial","animate","MCQ","acGameMCQ","extras","min","max","step","onInput","v","score","roundTo","scoreDistance","sentHash","recievedHash","items"],"mappings":"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","file":"61-5b5c222dc3626921baa7.js","sourcesContent":["\r\n\r\nconst DefaultKeys = require('./../keys');\r\n\r\nconst keys =  {...DefaultKeys, \r\n    eqPyth: 'eqPyth',\r\n    figureNames: ['AB', 'BC', 'AC', 'BD', 'AD', 'DC']\r\n};\r\n\r\nmodule.exports = keys;\r\n\r\n// [vp.keys.c]: vp.keys.acMath, [vp.keys.act]","\r\nvar keys = require('./keys');\r\n\r\nvar sim =  {\r\n    //(settings, create, generate, format, math)\r\n    simInit: (settings, create, generate, format, math) => {\r\n       // console.log(`Game simInit methods`, methods);\r\n        let state = new create.GameInstance('intro');\r\n        //AssessmentScore\r\n        state.sim.scores.temperature = create.AssessmentScore('temperature', 0, 1, 1);\r\n        return state;\r\n    },\r\n    ['data']:{},\r\n}\r\nmodule.exports = sim;\r\n\r\n","\r\nimport React from 'react';\r\nimport Text from 'game/Views/TextManager/TextManager.js';\r\nimport Dialogue from 'game/Views/Dialogue/Dialogue.js';\r\nimport Scene from 'game/Views/Scene/Scene.js';\r\nimport Slider from 'views/Slider/v1/Slider.js';\r\nimport keys from './keys';\r\nimport simulation from './sim.js';\r\nimport {getPar, roundTo} from 'utilities/Format.js';\r\nimport {MCQ, GameInstance, AssessmentScore} from 'utilities/Create.js'; //create.AssessmentScore('temperature', 0, 1, 1)\r\nimport {scoreDistance} from 'utilities/Game/Scoring.js';\r\n\r\nvar o = {\r\n    //n keys must match k values\r\n    sim: simulation,\r\n    n: {},\r\n    k: keys,\r\n    start: 'intro',\r\n    ['trees']: { \r\n        ['intro']: function(read, settings, viewProps){\r\n            return {node: 'intro', label: keys.aclocStory,\r\n                view: (write, makeChange) => {\r\n                    return Scene('intro',{\r\n                        settings, viewProps, makeChange,\r\n                        text: [\r\n                            {text: `This is a 'game' designed to test basic features of the platform. \r\n                            It should take around 1 minute.`, className: 'block'}\r\n                        ],\r\n                        choice: {options: [\r\n                            <Text text={\"next\"} out={[\r\n                                {type: 'set', path:'move', value: {location: 'question'}},\r\n                            ]} />\r\n                        ]}\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['question']: function(read, settings, viewProps){\r\n            return {node: 'question', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return Scene('question',{\r\n                        settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id: `kara`, //src: getImg(viewProps.meta, keys[`${keys.nMc}-neutral`]), \r\n                            imageId: 'kara', pose: 'neutral', convoId: 'mistake', textId: 'question', \r\n                            text: [{text: `Test question: What is 1 + 2?` }, ], \r\n                            initial: ['pL'], animate: ['aL']},\r\n                        ],\r\n                        //text: `Test question: What is 1 + 2`,\r\n                        choice: {options: [\r\n                        <Text id=\"testscene-btn-1\" text={\"3\"} out={[\r\n                            MCQ(keys.acGameMCQ, 'sum', '3', true),\r\n                            {type: 'set', path:'move', value: {location: 'real'}},\r\n                        ]} />,\r\n                        <Text id=\"testscene-btn-2\" text={\"4\"} out={[\r\n                            MCQ(keys.acGameMCQ, 'sum', '4', false),\r\n                            {type: 'set', path:'move', value: {location: 'real'}},\r\n                        ]} />\r\n                        ]}\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['real']: function(read, settings, viewProps){\r\n            return {node: 'real', label: keys.aclocData,\r\n                view: (write, makeChange) => {\r\n                    return Scene('real',{\r\n                        settings, viewProps, makeChange,\r\n                        img: [\r\n                            {id: `rainbow`, //src: getImg(viewProps.meta, keys[`${keys.nMc}-neutral`]), \r\n                            imageId: 'rainbow', pose: 'neutral', convoId: 'rainbow', textId: 'real', \r\n                            text: [{text: `Please move the slider to 17.5` }, ], \r\n                            initial: ['pR'], animate: ['aR']},\r\n                        ],\r\n                        //text: `Please move the slider to 17.5`,\r\n                        extras: [\r\n                            <Slider min={0} max={20} step={0.5} value={10} onInput={(id, v) => {\r\n                                let score = roundTo(scoreDistance(17.5, 5, v), 2);\r\n                                makeChange(id, [\r\n                                    MCQ(keys.acGameMCQ, 'temperature', null, score),\r\n                                    {type: 'set', path: 'move', value: {location: 'endgame'}}\r\n                                ])\r\n                            }}/>\r\n                        ]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        ['endgame']: function(read, settings, viewProps){\r\n            return {node: 'endgame', label: keys.aclocStory,\r\n               // out: () => {return {gameover:true}},\r\n                view: (write, makeChange) => {\r\n                    if(read.sentHash !== read.recievedHash){\r\n                        return Scene('endgameWait', {\r\n                            settings, viewProps, makeChange, \r\n                            text: 'Waiting for server...'\r\n                        })\r\n                    }else{\r\n                        return Scene('endgame-start', {\r\n                            settings, viewProps, makeChange,\r\n                            text: [`You have reached the end of the game, \r\n                            please remember to test upload your report to Google Drive.`],\r\n                            choice: {options: [<Text id=\"intro111t1\" text={\"okay\"} out={[\r\n                                {type: 'set', path: 'meta.gameover', value: true},\r\n                            ]} />]}\r\n                        })\r\n                    }\r\n                        \r\n                }\r\n            }\r\n        },\r\n    },\r\n    ['branches']: {\r\n    },\r\n    items:{}\r\n}\r\n\r\nconst output = o;\r\nexport default output;"],"sourceRoot":""}